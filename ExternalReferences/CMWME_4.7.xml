<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMWME_4.7</name>
    </assembly>
    <members>
        <member name="T:CMWME.C_Drawing.ExIcon">
            <summary>
            Class Extracts Icons from a file using he specific number given to find the icon.
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.ExIcon.Extract(System.String,System.Int32)">
            <summary>
            Extracts Icon from file using number given to find the Icon.
            </summary>
            <param name="file">File to use.</param>
            <param name="number">Icon number to retreive.</param>
            <returns></returns>
        </member>
        <member name="T:CMWME.C_Drawing.C_Graphics">
            <SUMMARY> 
            Inherited child for the class Graphics encapsulating 
            additional functionality for curves and rounded rectangles. 
            </SUMMARY> 
        </member>
        <member name="P:CMWME.C_Drawing.C_Graphics.Graphics">
            <summary>
            Current Graphics Class
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.#ctor(System.Drawing.Graphics)">
            <summary>
            Creates Extended Graphics Class with Current Graphics Class
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.FillRoundRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills A Rounded Rectangle with Brush/Color given
            </summary>
            <param name="brush">Brush to fill the Rectangle</param>
            <param name="x">Starting X coordinate for rectangle</param>
            <param name="y">Starting Y coordinate for rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
            <param name="radius">Sharpness of curve</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.FillRoundRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills A Rounded Rectangle with Brush/Color given
            </summary>
            <param name="brush">Brush to fill the Rectangle</param>
            <param name="x">Starting X coordinate for rectangle</param>
            <param name="y">Starting Y coordinate for rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
            <param name="radius">Sharpness of curve</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.DrawRoundRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Rounded Rectangle border with Pen/Color given
            </summary>
            <param name="pen">Brush to fill the Rectangle</param>
            <param name="x">Starting X coordinate for rectangle</param>
            <param name="y">Starting Y coordinate for rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
            <param name="radius">Sharpness of curve</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.DrawRoundRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a Rounded Rectangle border with Pen/Color given
            </summary>
            <param name="pen">Brush to fill the Rectangle</param>
            <param name="x">Starting X coordinate for rectangle</param>
            <param name="y">Starting Y coordinate for rectangle</param>
            <param name="width">Width of rectangle</param>
            <param name="height">Height of rectangle</param>
            <param name="radius">Sharpness of curve</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.Finalize">
            <summary>
            Disposes of all Components/Graphics in class
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.Dispose(System.Boolean)">
            <summary>
            Disposes of all components generated by C_Graphics.
            </summary>
            <param name="Disposing">If true, only disposes non-dotNet components.</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Graphics.Dispose">
            <summary>
            Disposes All Components Used in Extended Graphics
            </summary>
        </member>
        <member name="T:CMWME.C_Drawing.DrawGraphics">
            <summary>
            Extended Graphics Drawing Class
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.#ctor">
            <summary>
            Creates the class to draw and build components and images
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.Double,System.Double,System.String,System.String,System.String,System.Single)">
            <summary>
            Draws an image of a button and saves it at the path given
            </summary>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="savePath">Path to save the img file</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.String,System.Single)">
            <summary>
            Draws an image of a button and saves it at the path given
            </summary>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="savePath">Path to save the img file</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.String,System.Double,System.Double,System.String,System.String,System.String,System.Single)">
            <summary>
            Draws an image of a button and saves it at the path given
            </summary>
            <param name="buttonText">Text of the Button</param>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="savePath">Path to save the img file</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.String,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.String,System.Single)">
            <summary>
            Draws an image of a button and saves it at the path given
            </summary>
            <param name="buttonText">Text of the Button</param>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="savePath">Path to save the img file</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.Double,System.Double,System.String,System.String,System.Single)">
            <summary>
            Draws an image of a button
            </summary>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
            <returns>Image Class of the button drawn</returns>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Draws an image of a button
            </summary>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
            <returns>Image Class of the button drawn</returns>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.String,System.Double,System.Double,System.String,System.String,System.Single)">
            <summary>
            Draws an image of a button
            </summary>
            <param name="buttonText">Text of the Button</param>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shaddow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
            <returns>Image Class of the button drawn</returns>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.DrawButton(System.String,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Draws an image of a button
            </summary>
            <param name="buttonText">Text of the Button</param>
            <param name="width">Width of the button</param>
            <param name="height">Height of the button</param>
            <param name="foreColor">Shadow/text of the button</param>
            <param name="backgroundColor">Main Background color of the button</param>
            <param name="fontSize">Size of the Font to Draw in the Button</param>
            <returns>Image Class of the button drawn</returns>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.Dispose">
            <summary>
            Disposes of all the draw objects created.
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.Dispose(System.Boolean)">
            <summary>
            Disposes of all components created by DrawGrapics.
            </summary>
            <param name="disposing">if true only disposes of non-dotNet components.</param>
        </member>
        <member name="M:CMWME.C_Drawing.DrawGraphics.Finalize">
            <summary>
            Disposes All Components
            </summary>
        </member>
        <member name="T:CMWME.C_Drawing.HSL">
            <summary>
            Hue, Saturation and lightness Class Converts a Color or RGB Class to the HUE Saturation and lightness components of a color
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.HSL.#ctor(System.Drawing.Color)">
            <summary>
            Converts a Color Class to HSL
            </summary>
            <param name="color">Color Class to Convert</param>
        </member>
        <member name="M:CMWME.C_Drawing.HSL.#ctor(CMWME.C_Drawing.RGB)">
            <summary>
            Converts a RGB Class to HSL
            </summary>
            <param name="rgb">RGB Class to Convert</param>
        </member>
        <member name="P:CMWME.C_Drawing.HSL.L">
            <summary>
            Lightness Value of the color
            </summary>
        </member>
        <member name="P:CMWME.C_Drawing.HSL.H">
            <summary>
            HUE of Color
            </summary>
        </member>
        <member name="P:CMWME.C_Drawing.HSL.S">
            <summary>
            Saturation of Color
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.HSL.Lighten(System.Int32)">
            <summary>
            Lightens the color by the amount given
            </summary>
            <param name="percentage">percentage to lighten by</param>
        </member>
        <member name="M:CMWME.C_Drawing.HSL.Darken(System.Int32)">
            <summary>
            Darkens the color by the amount given
            </summary>
            <param name="percentage">percentage to Darken by</param>
        </member>
        <member name="T:CMWME.C_Drawing.RGB">
            <summary>
            Converts any Color or HSL to RGB 
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.RGB.#ctor(System.Drawing.Color)">
            <summary>
            Converts the Color Class to RGB
            </summary>
            <param name="color">Color Class</param>
        </member>
        <member name="M:CMWME.C_Drawing.RGB.#ctor(CMWME.C_Drawing.HSL)">
            <summary>
            Converts the HSL Class to RGB
            </summary>
            <param name="hsl"></param>
        </member>
        <member name="F:CMWME.C_Drawing.RGB.R">
            <summary>
            Red Value of the Color
            </summary>
        </member>
        <member name="F:CMWME.C_Drawing.RGB.G">
            <summary>
            Green Value of the Color
            </summary>
        </member>
        <member name="F:CMWME.C_Drawing.RGB.B">
            <summary>
            Blue Value of the color
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.RGB.ToColor">
            <summary>
            Changes the RGB Class to a Color Class
            </summary>
            <returns></returns>
        </member>
        <member name="T:CMWME.C_Drawing.C_Extentions">
            <summary>
            Graphic Drawing Class That Extends the Current Graphics Class
            </summary>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.GetTextSize(System.String,System.Drawing.Font)">
            <summary>
            Allows you to get the Text size of a string with multiple fonts. By Default it will use the Default Font Size, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="Text">Text to Measure</param>
            <param name="DefaultFont">Default Font to use</param>
            <returns>Size Class with Width and Height mesurments of the string</returns>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.GetTextSize(System.String,System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Allows you to get the Text size of a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="Text">Text to Measure</param>
            <param name="g">Graphics Class to Mesure the Text With</param>
            <param name="DefaultFont">Default Font to use</param>
            <returns>Size Class with Width and Height mesurments of the string</returns>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="point">Points To Use as a Starting Location for the Text</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point,System.Drawing.StringFormat)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="point">Points To Use as a Starting Location for the Text</param>
            <param name="stringformat">Not Used Currently</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="rectangle">Rectangle to Draw the String Within</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="rectangle">Rectangle to Draw the String Within</param>
            <param name="stringformat">Not Used Currently</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="x">X Location to Start the Text From</param>
            <param name="y">Y Location to Start the Text From</param>
        </member>
        <member name="M:CMWME.C_Drawing.C_Extentions.DrawMultiFontString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)">
            <summary>
            Draws a string with multiple fonts. By Default it will use the Default Font Given, but you can change the font
            in string by using &lt;FontName&gt;&lt;/FontName&gt; around the parts that you want diffent fonts. This is good for creating symbols in Wingdings or Webdings.
            </summary>
            <param name="g">Graphics Class Used to Draw the Graphics</param>
            <param name="s">String to Draw</param>
            <param name="font">Default Font to Use for the String</param>
            <param name="brush">Brush to Use When Drawing the String</param>
            <param name="x">X Location to Start the Text From</param>
            <param name="y">Y Location to Start the Text From</param>
            <param name="stringformat">Not Used Currently</param>
        </member>
        <member name="T:CMWME.C_Exceptions.NotImplimentedTypeException">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String)">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
            <param name="Inner">Inner exception.</param>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String,System.Object[])">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
            <param name="Args">arguments to insert into string using typical String.Format</param>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
            <param name="ErrorCode">Error code to in the C_Exeption, to determine where the error occurred.</param>
            <param name="Args">arguments to insert into string using typical String.Format</param>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
            <param name="Inner">Inner exception.</param>
            <param name="Args">arguments to insert into string using typical String.Format</param>
        </member>
        <member name="M:CMWME.C_Exceptions.NotImplimentedTypeException.#ctor(System.String,System.Int32,System.Exception,System.Object[])">
            <summary>
            Use when type of enum is missing in a case or if.
            </summary>
            <param name="Message">message to use in exception.</param>
            <param name="ErrorCode">Error code to in the C_Exeption, to determine where the error occurred.</param>
            <param name="Inner">Inner exception.</param>
            <param name="Args">arguments to insert into string using typical String.Format</param>
        </member>
        <member name="T:CMWME.C_Exceptions.C_Exception">
            <summary>
            Custom Exception Class that inherits the base Exception class. This class contains an extra ErrorCode property that helps track
            where the exception occurred, and contains additional parameters that allows you to replace the {#} values within the message.
            </summary>
        </member>
        <member name="P:CMWME.C_Exceptions.C_Exception.Created">
            <summary>
            DateTime Exception was created.
            </summary>
        </member>
        <member name="P:CMWME.C_Exceptions.C_Exception.ErrorCode">
            <summary>
            ErrorCode is a unique code that can be given on error that allows you to track where the error was thrown.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Replacement for the basic exception, just adds the ability to add parameters to the message that use a String.Format to replace each parameter for the arg parameter by it's index 
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="ErrorCode">Unique code that can be given on error that allows you to track where the error was thrown.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.#ctor(System.String,System.Int32,System.Exception,System.Object[])">
            <summary>
            Replacement for the basic exception, just adds the ability to add parameters to the message that use a String.Format to replace each parameter for the arg parameter by it's index 
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="ErrorCode">Unique code that can be given on error that allows you to track where the error was thrown.</param>
            <param name="Inner">The exception that is the cause of the current exception, or a null reference
                (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.#ctor(System.String,System.Int32)">
            <summary>
            Replacement for the basic exception, just adds the ability to add parameters to the message that use a String.Format to replace each parameter for the arg parameter by it's index 
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="ErrorCode">Unique code that can be given on error that allows you to track where the error was thrown.</param>
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.#ctor(System.String,System.Object[])">
            <summary>
            Replacement for the basic exception, just adds the ability to add parameters to the message that use a String.Format to replace each parameter for the arg parameter by it's index 
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Replacement for the basic exception, just adds the ability to add parameters to the message that use a String.Format to replace each parameter for the arg parameter by it's index 
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="Inner">The exception that is the cause of the current exception, or a null reference
                (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example> 
        </member>
        <member name="M:CMWME.C_Exceptions.C_Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the Exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:CMWME.C_Exceptions.Final_Exception">
            <summary>
            Same as C_Exception but allows you to catch these separate to throw them to the end of the code.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.Final_Exception.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Final Exceptions are meant to be a bailout for the application, in order to appropriately catch you must create a separate catch for final_exception and throw it.
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="ErrorCode">Unique code that can be given on error that allows you to track where the error was thrown.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.Final_Exception.#ctor(System.String,System.Int32,System.Exception,System.Object[])">
            <summary>
            Final Exceptions are meant to be a bailout for the application, in order to appropriately catch you must create a separate catch for final_exception and throw it.
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="ErrorCode">Unique code that can be given on error that allows you to track where the error was thrown.</param>
            <param name="Inner">The exception that is the cause of the current exception, or a null reference
                (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="Arg">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.Final_Exception.#ctor(System.String,System.Object[])">
            <summary>
            Final Exceptions are meant to be a bailout for the application, in order to appropriately catch you must create a separate catch for final_exception and throw it.
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="Arg">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="M:CMWME.C_Exceptions.Final_Exception.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Final Exceptions are meant to be a bailout for the application, in order to appropriately catch you must create a separate catch for final_exception and throw it.
            </summary>
            <param name="Message">Message that describes the error.</param>
            <param name="Inner">The exception that is the cause of the current exception, or a null reference
                (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="Args">An object array that contains zero or more objects to format.</param>
            <example>index zero will replace {0}, index one will replace {1} etc...</example>
        </member>
        <member name="T:CMWME.C_Exceptions.N_Exception">
            <summary>
            This class allows you to create a new exception out of another exception.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.#ctor(System.Exception,System.Exception)">
            <summary>
            Creates a new Exception storing the first exception given in an internal property.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="P:CMWME.C_Exceptions.N_Exception.Message">
            <summary>
            Returns the message for the given exception.
            </summary>
        </member>
        <member name="P:CMWME.C_Exceptions.N_Exception.Data">
            <summary>
            Returns the Data for the given exception.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.Equals(System.Object)">
            <summary>
            Compares the given exception with the object given.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if the exception is the same as the object given.</returns>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.GetBaseException">
            <summary>
            Returns the base exception for the exception given.
            </summary>
            <returns>Base Exception</returns>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.GetHashCode">
            <summary>
            Gets the Hash code of the exception given.
            </summary>
            <returns>Integer representing the hash code for the given exception.</returns>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo
               with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
                The info parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:CMWME.C_Exceptions.N_Exception.HelpLink">
            <summary>
            Gets or Sets the help file associated with the given exception.
            </summary>
        </member>
        <member name="P:CMWME.C_Exceptions.N_Exception.Source">
            <summary>
            Gets the name of the application or object that caused the exception.
            </summary>
        </member>
        <member name="P:CMWME.C_Exceptions.N_Exception.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="M:CMWME.C_Exceptions.N_Exception.ToString">
            <summary>
            Creates and returns a string representation of the given exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CMWME.C_Extensions.C_Extensions_Forms">
            <summary>
            Extensions that are made for WinForm objects.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.Enable(System.Windows.Forms.Control,System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Enables/Disables all forms and enables/visible Named Cancel button/control. 
            Marks original disposition of control in the tag property for reset.
            
            Does not Enable/Disable:
            Panels
            Named Main Class(ex:typeof(mainClass))
            Forms
            TabControl
            TabPage
            SplitContainer
            Panel
            StatusStrip
            </summary>
            <param name="con">Any Control</param>
            <param name="enable">Enable or Disable all Controls</param>
            <param name="Cancel_btn">Cancel Button/Control</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.Reset(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Resets All controls back to original enabled disposition based on the value in the Tag property set running the Enable Method
            </summary>
            <param name="con">Any Control</param>
            <param name="Cancel_btn">Cancel Button/Control</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.ContainsTab(System.Windows.Forms.TabControl,System.String)">
            <summary>
            Checks if Tab Control contains TabPage with name matching string and returns found tab.
            </summary>
            <param name="tabControl">Any Tab Control</param>
            <param name="partialTabName">String to match tab name on</param>
            <returns>Found Tab</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.FindGrid(System.Windows.Forms.Control)">
            <summary>
            Finds first DataGridView on Control and returns it.
            </summary>
            <param name="con">Any Control</param>
            <returns>First Found DataGridView</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            Snaps Form to parent form's top and left.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Int32,System.Int32)">
            <summary>
            Snaps Form to parent form's top and left with offset.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
            <param name="top_offset">Top Offset of Parent Form</param>
            <param name="left_offset">Left Offset of Parent Form</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Snaps Form to parent form's top and left with offset. If Match size is true then it also matches size of the Parent Form.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
            <param name="top_offset">Top Offset of Parent Form</param>
            <param name="left_offset">Left Offset of Parent Form</param>
            <param name="match_Size">Matches Size of Parent Form</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Snaps Form to parent form's top and left. If Match size is true then it also matches size of the Parent Form.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
            <param name="match_Size">Matches Size of Parent Form</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Snaps Form to parent form's top and left. If Match size is true then it also matches size of the Parent Form with offset.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
            <param name="match_Size">Matches Size of Parent Form</param>
            <param name="width_offset">Width Offset</param>
            <param name="height_offset">Height Offset</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.SnapForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Snaps Form to parent form's top and left with offset. If Match size is true then it also matches size of the Parent Form with offset.
            </summary>
            <param name="frm">Any Form</param>
            <param name="ParentForm">Parent Form</param>
            <param name="top_offset">Top Offset of Parent Form</param>
            <param name="left_offset">Left Offset of Parent Form</param>
            <param name="match_Size">Matches Size of Parent Form</param>
            <param name="width_offset">Width Offset</param>
            <param name="height_offset">Height Offset</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.IsCustom(CMWME.C_Forms.C_MessageBoxButtons)">
            <summary>
            Tests if the MessageBoxButtons is a custom type
            </summary>
            <param name="btns"></param>
            <returns>true if a custom type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.IsType``1(System.Object)">
            <summary>
            Returns true if object is Type given. 
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <param name="obj">Object to check if Type.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.IsType``1(System.Object,``0@)">
            <summary>
            Returns true if object is Type given. Also will return an object of the Type.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <param name="obj">Object to check if Type.</param>
            <param name="TypeObject">Returns an Object of the Type</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.IsType(System.Object,System.Type,System.Type[])">
            <summary>
            Returns true if object is Type given. 
            </summary>
            <param name="obj">Object to check if Type.</param>
            <param name="t">Type to check the object of.</param>
            <param name="parentInterfaces">Interfaces parent inherits.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.GetDefaultSize(System.Windows.Forms.Control)">
            <summary>
            Returns Default Size of a Control.
            </summary>
            <param name="ctrl">Control to get default size.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.GetBytes(System.Drawing.Icon)">
            <summary>
            Gets the byte stream of the Icon.
            </summary>
            <param name="icon">Icon to get the byte stream from.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.EqualsIcon(System.Drawing.Icon,System.Drawing.Icon)">
            <summary>
            Checks if the Bytes of one icon Equals another.
            </summary>
            <param name="icon">Icon to check.</param>
            <param name="CompareIcon">Icon to compare to.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.ConvertToIcon(System.Byte[])">
            <summary>
            Converts Byte array to Icon class.
            </summary>
            <param name="iconBytes">Bytes of Icon to convert back to Icon.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.GetIcon(System.Drawing.Image)">
            <summary>
            Converts Image class to Icon.
            </summary>
            <param name="ImageToConvert">Image to convert to Icon.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.GetImage(System.Drawing.Icon)">
            <summary>
            Converts Icon to Image class.
            </summary>
            <param name="IconToConvert">Icon to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_Forms.GetParentForm(System.Windows.Forms.Control)">
            <summary>
            Finds and returns the Form that is at the root/parent of the Controls tree.
            </summary>
            <param name="control">Control to get the Form from.</param>
        </member>
        <member name="T:CMWME.C_Extensions.C_Extensions_WPF">
            <summary>
            Extensions for WPF Forms.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WPF.GetParentForm(System.Windows.Controls.Control)">
            <summary>
            Returns Parent window object of control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WPF.ToImageSource(System.Drawing.Icon)">
            <summary>
            Converts an icon to an image source for WPF.
            </summary>
            <param name="icon">icon to convert.</param>
        </member>
        <member name="T:CMWME.C_Extensions.C_Process_Extenstions">
            <summary>
            Extensions attached to the Process class.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Process_Extenstions.GetCommandLine(System.Diagnostics.Process)">
            <summary>
            Uses WMI to get the comand line of a process given using the process id.
            </summary>
            <param name="proc">Process to get the command line of.</param>
        </member>
        <member name="T:CMWME.C_Extensions.C_Crypto_Extensions">
            <summary>
            Extensions of variable types FileInfo, byte[], SecureStrings, and strings that allow you to encrypt or decrypt.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ProtectBytes(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte}@)">
            <summary>
            Creates Protected Byte Array to be used with passwords.
            </summary>
            <param name="data">ByteArray to protect</param>
            <param name="key">Key created during protection</param>
            <returns>Protected byte array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ProtectBytes(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates Protected Byte Array to be used with passwords.
            </summary>
            <param name="data">ByteArray to protect</param>
            <param name="key">Key created during protection</param>
            <returns>Protected byte array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.IO.FileInfo,System.String,System.Collections.Generic.IEnumerable{System.Byte}@)">
            <summary>
            Encrypts a File and Saves the encrypted byte array to location given.
            </summary>
            <param name="FileToEncrypt">File to Encrypt</param>
            <param name="SaveFilePath">Location to save the Encrypted file</param>
            <param name="Key">Key used to encrypt the file</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.Encrypt(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Encrypts a File and Saves the encrypted byte array to location given.
            </summary>
            <param name="FileToEncrypt">File to Encrypt</param>
            <param name="Key">Key used to encrypt the file</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.Encrypt(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Encrypts a File with byte array given as the key. Will attempt to retry to Encrypt up to the retry count 
            if errors during encryption. Will wait between the retries the amount of milliseconds specified in Variables.IOWaitTime, defaulted
            to 2000.
            </summary>
            <param name="FileToEncrypt">File to Encrypt.</param>
            <param name="Key">Key used to encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry if failure occurred.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.IO.FileInfo,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Encrypts a File and Saves the encrypted byte array to location given.
            </summary>
            <param name="FileToEncrypt">File to Encrypt.</param>
            <param name="SaveFilePath">Location to save the Encrypted file.</param>
            <param name="Key">Key used to encrypt the file.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.IO.FileInfo,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Encrypts a File and Saves the encrypted byte array to location given. Will attempt to retry to Encrypt up to the retry count 
            if errors during encryption. Will wait between the retries the amount of milliseconds specified in Variables.IOWaitTime, defaulted
            to 2000.
            </summary>
            <param name="FileToEncrypt">File to Encrypt.</param>
            <param name="SaveFilePath">Location to save the Encrypted file.</param>
            <param name="Key">Key used to encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry if failure occurred.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Saves string data to an Encrypted File. Will attempt to retry to Encrypt up to the retry count 
            if errors during encryption. Will wait between the retries the amount of milliseconds specified in Variables.IOWaitTime, defaulted
            to 2000.
            </summary>
            <param name="Data">Data to save to encrypted file.</param>
            <param name="SaveFilePath">Location to save the Encrypted file.</param>
            <param name="Key">Key used to encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry if failure occurred.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Saves byte array data to an Encrypted File. Will attempt to retry to Encrypt up to the retry count 
            if errors during encryption. Will wait between the retries the amount of milliseconds specified in Variables.IOWaitTime, defaulted
            to 2000.
            </summary>
            <param name="Data">Data to save to encrypted file.</param>
            <param name="SaveFilePath">Location to save the Encrypted file.</param>
            <param name="Key">Key used to encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry if failure occurred.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.EncryptAndSave(System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Saves Stream data to an Encrypted File. Will attempt to retry to Encrypt up to the retry count 
            if errors during encryption. Will wait between the retries the amount of milliseconds specified in Variables.IOWaitTime, defaulted
            to 2000.
            </summary>
            <param name="Data">Data to save to encrypted file.</param>
            <param name="SaveFilePath">Location to save the Encrypted file.</param>
            <param name="Key">Key used to encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry if failure occurred.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.GetBytes(System.IO.Stream)">
            <summary>
            Reads the Stream into a buffer and returns the buffer.
            </summary>
            <param name="Data">Stream to read into the buffer.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.GenerateNewPath(System.IO.FileInfo,System.String)">
            <summary>
            Generates new path for file including file name. If File already exists in path given will add (#) to the end of the file 
            until it finds a name that doesn't already exist or hits the amount of tries listed in CMWME.Variables.IORenameRetry.
            </summary>
            <param name="OriginalFile">File to create new path for.</param>
            <param name="NewPath">Root directory that new path will be created with.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.GetNameWOExtension(System.IO.FileInfo)">
            <summary>
            Returns name of file without extension.
            </summary>
            <param name="File">File to get name of.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecryptAndSave(System.IO.FileInfo,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts file and saves decrypted file to location
            </summary>
            <param name="file">File to decrypt</param>
            <param name="SaveFilePath">Location to save the decrypted file</param>
            <param name="key">key to use when decrypting file</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecryptToBytes(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypt file to byte array
            </summary>
            <param name="file">file to decrypt</param>
            <param name="key">key to use when decrypting file</param>
            <returns>byte array representing decrypted file</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecryptToStream(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypt file to Memory Stream
            </summary>
            <param name="file">file to decrypt</param>
            <param name="key">key to use when decrypting file</param>
            <returns>Memory Stream array representing decrypted file</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecryptToSecureString(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts file to secure string
            </summary>
            <param name="file">file to decrypt</param>
            <param name="key">key to use when decrypting file</param>
            <returns>SecureString representing file</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecyptBytesToString(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts Byte Array Into original string form.
            </summary>
            <param name="ProtectedArray">Protected Array to Decrypt</param>
            <param name="key">Key to use when decrypting the array</param>
            <returns>string value of protected array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.DecyptBytes(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts Byte Array Into original string form.
            </summary>
            <param name="ProtectedArray">Protected Array to Decrypt</param>
            <param name="key">Key to use when decrypting the array</param>
            <returns>string value of protected array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ConvertBytesToStream(System.Byte[])">
            <summary>
            Converts Bytes Array to a Memory Stream, if key given will decrypt bytes.
            </summary>
            <param name="Bytes">Bytes to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToString(System.Byte[])">
            <summary>
            Converts Byte Array Into original string form.
            </summary>
            <param name="bytes">bytes array to convert</param>
            <returns>String value of Bytes Array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToSecureString(System.Byte[])">
            <summary>
            Converts Byte Array to secure string
            </summary>
            <param name="bytes">Byte Array to convert</param>
            <returns>SecureString that represents the bytes array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ConvertToUnsecureString(System.Security.SecureString)">
            <summary>
            Converts secure string to unsecure string
            </summary>
            <param name="SecurePassword">String to Convert</param>
            <returns>unsecure version of string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ConvertToUnsecureBytes(System.Security.SecureString)">
            <summary>
            Converts secure string to unsecure byte array.
            </summary>
            <param name="SecurePassword">String to Convert</param>
            <returns>unsecure version of string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ConvertToUnsecureChars(System.Security.SecureString)">
            <summary>
            Converts secure string to unsecure char array
            </summary>
            <param name="SecurePassword">String to Convert</param>
            <returns>unsecure version of string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.CreateRandomEntropy(System.Collections.Generic.IEnumerable{System.Byte}@)">
            <summary>
            Generates a Random Byte Array Key for encryption/decryption
            </summary>
            <param name="byteArray">Empty byte array to dump the key into</param>
            <returns>byte array of key</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.StringToBytes(System.String)">
            <summary>
            Converts string to Byte Array
            </summary>
            <param name="StringToConvert">String to Convert</param>
            <returns>Byte Array of string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.StringToByteString(System.String)">
            <summary>
            Converts a string to a byte array that represents the string then retuns a string value that represents the byte array, assumes delimiter is a comma if none given
            </summary>
            <param name="Str">string to convert</param>
            <returns>string value of a byte array of the string given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.StringToByteString(System.String,System.Char)">
            <summary>
            Converts a string to a byte array that represents the string then retuns a string value that represents the byte array, assumes delimiter is a comma if none given
            </summary>
            <param name="Str">string to convert</param>
            <param name="Delimiter">delimiter of the byte array</param>
            <returns>string value of a byte array of the string given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.HexStringToByteString(System.String)">
            <summary>
            Converts a String with Hex Array to a String Byte Array
            </summary>
            <param name="StringToParse">String to Parse</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.HexStringToByteString(System.String,System.Char)">
            <summary>
            Converts a String with Hex Array to a String Byte Array
            </summary>
            <param name="StringToParse">String to Parse</param>
            <param name="Delimiter">Delimiter of byte array in string</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.HexStringToBytes(System.String)">
            <summary>
            Converts String with Hex Array to a Byte Array, assumes delimter is nothing if not set
            </summary>
            <param name="StringToParse">String to Parse</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.HexStringToBytes(System.String,System.Char)">
            <summary>
            Converts String with Hex Array to a Byte Array, assumes delimter is nothing if not set
            </summary>
            <param name="StringToParse">String to Parse</param>
            <param name="Delimiter">Delimiter of byte array in string</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ByteStringToBytes(System.String)">
            <summary>
            Converts String with Byte Array to a Byte Array, assumes delimter is a comma if not set
            </summary>
            <param name="StringToParse">String to Parse</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ByteStringToBytes(System.String,System.Char)">
            <summary>
            Converts String with Byte Array to a Byte Array, assumes delimter is a comma if not set
            </summary>
            <param name="StringToParse">String to Parse</param>
            <param name="Delimiter">Delimiter of byte array in string</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ByteStringToBytes(System.String,System.String)">
            <summary>
            Converts String with Byte Array to a Byte Array, assumes delimter is a comma if not set
            </summary>
            <param name="StringToParse">String to Parse</param>
            <param name="Delimiter">Delimiter of byte array in string</param>
            <returns>Byte Array in string</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToByteString(System.Byte[])">
            <summary>
            Converts a Byte Array to a string value of a byte array of the string, assumes delimiter is comma if none given
            </summary>
            <param name="ByteArr">Bytes to convert</param>
            <returns>string value of a byte array of the string given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToByteString(System.Byte[],System.Char)">
            <summary>
            Converts a Byte Array to a string value of a byte array of the string, assumes delimiter is comma if none given
            </summary>
            <param name="ByteArr">Bytes to convert</param>
            <param name="Delimiter">delimiter of the byte array</param>
            <returns>string value of a byte array given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToByteString(System.Byte[],System.String)">
            <summary>
            Converts a Byte Array to a string value of a byte array of the string, assumes delimiter is comma if none given
            </summary>
            <param name="ByteArr">Bytes to convert</param>
            <param name="Delimiter">delimiter of the byte array</param>
            <returns>string value of a byte array given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToHexString(System.Byte[])">
            <summary>
            Converts Byte array to a Hex Array String, assumes delimiter is nothing if none given
            </summary>
            <param name="ByteArr">Byte Array to convert to Hex Array</param>
            <returns>String value of the Byte array in Hex</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.BytesToHexString(System.Byte[],System.String)">
            <summary>
            Converts Byte array to a Hex Array String, assumes delimiter is nothing if none given
            </summary>
            <param name="ByteArr">Byte Array to convert to Hex Array</param>
            <param name="Delimiter">Delimiter of the Hex array</param>
            <returns>String value of the Byte array in Hex</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.GetBytesLength(System.String)">
            <summary>
            Returns the amount of bytes that the string takes up
            </summary>
            <param name="val">string to convert</param>
            <returns>Length of Bytes</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Crypto_Extensions.ToStream(System.Byte[],System.IO.Stream)">
            <summary>
            Reads Bytes Array into stream given
            </summary>
            <param name="bytes">Bytes Array to Read into Stream</param>
            <param name="stream">Stream to Read Bytes Array into</param>
        </member>
        <member name="T:CMWME.C_Extensions.C_DataGrid_Extensions">
            <summary>
            Extensions for DataGrid classes.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataGrid_Extensions.GetDataGridCell(System.Windows.Controls.DataGridCellInfo)">
            <summary>
            Returns the DataGridCell for the given DataGridCellInfo
            </summary>
            <param name="cellInfo">DataGridCellInfo to get the cell from.</param>\
        </member>
        <member name="T:CMWME.C_Extensions.C_DataTable_Extensions">
            <summary>
            Extensions for DataTable.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.WriteToCsvFile(System.Data.DataTable,System.String)">
            <summary>
            Writes DataTable to CSV file.
            </summary>
            <param name="dataTable">DataTable to write.</param>
            <param name="filePath">FilePath to write the DataTable to.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.MarkInsertAll(System.Data.DataTable,System.Data.DataRowState[])">
            <summary>
            Marks all rows as new rows to be inserted. Allowing SQLClass.UpdateDataTable to insert all records. 
            If this is set and the record exists in the SQL table that you are attempting to send this data to, 
            the SQLClass.UpdateDataTable will fail, because it will be attempting to insert a record that exists.
            
            This function is mainly used for inserting records from one table to another, when you pull the data from 
            another SQL table to a DataTable if you don't change the DataRowState, SQLClass.UpdateDataTable will not 
            attempt to insert the records into the target table because the DataRowState is set to Unchanged. This will 
            mark all DataRowStates to Add or Insert forcing the SQLClass.UpdateDataTable to insert every record.
            </summary>
            <param name="dataTable">Data table to mark.</param>
            <param name="ignoreStates">States to ignore, for example if you need a row deleted from the table that exists set this to DataRowState.Deleted. 
            or if you need rows that were modified to be updated instead of inserted (IE they still exist in the SQL table) set this to DataRowState.Modified</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.MarkUpdateAll(System.Data.DataTable,System.Data.DataRowState[])">
            <summary>
            Marks all rows as new rows to be updated. Forcing SQLClass.UpdateDataTable to update all records. 
            If this is set and the record does not exist in the SQL table that you are attempting to send this data to, 
            the SQLClass.UpdateDataTable will fail, because it will be attempting to update a record that does not exist.
            
            This function is mainly used for updating all records from one table to another, when you pull the data from 
            another SQL table to a DataTable if you don't change the DataRowState, SQLClass.UpdateDataTable will not 
            attempt to update the records in the target table because the DataRowState is set to Unchanged. This will 
            mark all DataRowStates to Modified or Update forcing the SQLClass.UpdateDataTable to update every record.
            </summary>
            <param name="dataTable">Data table to mark.</param>
            <param name="ignoreStates">States to ignore, for example if you need a row deleted from the table that exists set this to DataRowState.Deleted. 
            or if you need rows that were added to be inserted instead of updated (IE they still exist in the SQL table) set this to DataRowState.Modified</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.GetChangesCount(System.Data.DataTable,System.Data.DataRowState[])">
            <summary>
            Gets the count of rows that have a changed state (IE Added, Deleted, or Modified). If you 
            want a specific state or states you can specify StatesToCount parameter. For example if you want just 
            newly added rows: DataTable.GetChangesCount(DataRowState.Added); or if you want newly added rows and 
            modified rows: DataTable.GetChangesCount(DataRowState.Added, DataRowState.Modifed);
            </summary>
            <param name="dataTable">Data table to get count from.</param>
            <param name="StatesToCount">DataRowState types to get count from.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.GetSingleColumn``1(System.Data.DataTable,CMWME.SQLLib.ColumnsValues)">
            <summary>
            Returns a list of the values within a single column.
            </summary>
            <typeparam name="T">Type that the values will be returned as.</typeparam>
            <param name="nmsTbl">Table to get the values from.</param>
            <param name="column">Column to get the values from the table.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.GetSingleColumn``1(System.Data.DataTable,System.String)">
            <summary>
            Returns a list of the values within a single column.
            </summary>
            <typeparam name="T">Type that the values will be returned as.</typeparam>
            <param name="nmsTbl">Table to get the values from.</param>
            <param name="columnName">Column to get the values from the table.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.GetSingleRow(System.Data.DataTable,System.Int32)">
            <summary>
            Returns a ColumnsValues Collection of specific row of a DataTable.
            </summary>
            <param name="retVal">DataTable to get the row from.</param>
            <param name="IndexOfRow">Row to get from the DataTable.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_DataTable_Extensions.GetFirstRow(System.Data.DataTable)">
            <summary>
            Returns a ColumnsValues Collection of the first row of a DataTable.
            </summary>
            <param name="retVal">DataTable to get the row from.</param>
        </member>
        <member name="T:CMWME.C_Extensions.C_Event_Extensions">
            <summary>
            Event log extensions.
            </summary>
        </member>
        <member name="T:CMWME.C_Extensions.C_Xml_Extensions">
            <summary>
            Xml Classes Extensions.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Xml_Extensions.GetRoot(System.Xml.XmlDocument)">
            <summary>
            Gets Root of Xml Document
            </summary>
            <param name="xDoc">Gets the Root of the Xml Document</param>
            <returns>the root of the xml document</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Xml_Extensions.GetRoot(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the Root of the XmlDocument by name case insensitive, if no name is given, then returns first root of document. If Name is given will search all children for the name and return the first it finds.
            </summary>
            <param name="XDoc">XmlDocument to get root from</param>
            <param name="RootName">Name of Root to find</param>
            <returns>Root of Xml Document or Xml Element with the name given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Xml_Extensions.GetRoot(System.Xml.XmlElement,System.String)">
            <summary>
            Finds a specific node of the XmlElement by name. Name must be populated or will throw a null argument exception. Search is Case sensitive and will search all children.
            </summary>
            <param name="root">XmlElement to search</param>
            <param name="RootName">Name to search for case insensitive</param>
            <returns>XmlElemnt with the name given</returns>
        </member>
        <member name="T:CMWME.C_Extensions.SQLTimeZone">
            <summary>
            Time zone format to convert for ToSQLFormat.
            </summary>
        </member>
        <member name="F:CMWME.C_Extensions.SQLTimeZone.ToUTC">
            <summary>
            Converts to UTC or Universal.
            </summary>
        </member>
        <member name="F:CMWME.C_Extensions.SQLTimeZone.ToEST">
            <summary>
            Converts to Eastern.
            </summary>
        </member>
        <member name="F:CMWME.C_Extensions.SQLTimeZone.None">
            <summary>
            Doesn't convert it to a different time zone.
            </summary>
        </member>
        <member name="T:CMWME.C_Extensions.C_Extensions">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.SerializeToDynamic(System.Data.DataTable)">
            <summary>
            Converts DataTable to a Dynamic List for Populating WebGrids
            </summary>
            <param name="dt">DataTable to convert</param>
            <returns>Dynamic view of DataTable with Column Names and values as list</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.Remove``1(``0[],System.Int32)">
            <summary>
            Removes Given Index From Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array to remove Index From</param>
            <param name="index">Index to remove From Array</param>
            <returns>Returns Array With Index Removed From It</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.Average(System.TimeSpan,System.Int32)">
            <summary>
            Gets the Average of a time span
            </summary>
            <param name="tme">TimeSpan to get the average from</param>
            <param name="totalDiv">Total to divide the TimeSpan from</param>
            <returns>the average of the TimeSpan</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.Get_ErrorMessages(System.Exception)">
            <summary>
            Gets All The Data from an Error Message
            </summary>
            <param name="ex">Exception to gather the data from</param>
            <returns>All the Data from the Exception</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.Get_ErrorMessages(System.Exception,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Gets All The Data from an Error Message
            </summary>
            <param name="ex">Exception to gather the data from</param>
            <param name="isInner">Is the Exception given an inner exception</param>
            <param name="innerExceptionNumber">The current number of inner exception.</param>
            <returns>All the Data from the Exception</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.SplitBySegment(System.String,System.Int32)">
            <summary>
            splits string by segments. 
            </summary>
            <param name="str">String to split.</param>
            <param name="countPerSegment">Amount of charactures each segment will have.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToXml(System.Object)">
            <summary>
            Converts Any Object to XML
            </summary>
            <param name="obj">Object To Convert</param>
            <returns>Returns XML Representation of the Object</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToXml(System.Object,System.String)">
            <summary>
            Converts Any Object to XML
            </summary>
            <param name="obj">Object To Convert</param>
            <param name="RootName">Root Name to give XML</param>
            <returns>Returns XML Representation of the Object</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlDocument)">
            <summary>
            Converts XML Document To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xDoc">XML Document To Convert</param>
            <returns>Object as Given Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Converts XML Document To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xDoc">XML Document To Convert</param>
            <param name="isArray">If Children of Root Is Array of the Given Type</param>
            <returns>Array of Object as Given Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlDocument,``0)">
            <summary>
            Converts XML Document To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xDoc">XML Document To Convert</param>
            <param name="obj">Object to convert to</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlElement)">
            <summary>
            Converts XML Element To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xEl">XML Element To Convert</param>
            <returns>Object as Given Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Converts XML Element To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xEl">XML Element To Convert</param>
            <param name="isArray">True If Array</param>
            <returns>Array of Object as Given Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToObject``1(System.Xml.XmlElement,``0)">
            <summary>
            Converts XML Element To Given Type
            </summary>
            <typeparam name="T">Type to Convert XML To</typeparam>
            <param name="xEl">XML Element To Convert</param>
            <param name="obj">Object to Send the Data to</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertValue(System.Type,System.Object)">
            <summary>
            Casts given object to Given Type
            </summary>
            <param name="type">Type to Convert Object to</param>
            <param name="val">Object to Convert</param>
            <returns>Returns Object of Given Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasMethod(System.Object,System.String)">
            <summary>
            Checks to see if object has method by name given, case sensitive
            </summary>
            <param name="obj">Object to check</param>
            <param name="MethodName">Method name to check in object</param>
            <returns>true if object contains method name, false if it doesn't</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasMethod``1(``0,System.String)">
            <summary>
            Checks to see if object has method by name given, case sensitive
            </summary>
            <param name="obj">Object to check</param>
            <param name="MethodName">Method name to check in object</param>
            <returns>true if object contains method name, false if it doesn't</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasMethod(System.Type,System.String)">
            <summary>
            Checks to see if class has method by name given, case sensitive
            </summary>
            <param name="t">class to check</param>
            <param name="MethodName">Method name to check in object</param>
            <returns>true if class contains method name, false if it doesn't</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasProperty(System.Object,System.String,System.Boolean)">
            <summary>
            Checks to see if object has property by name given, case sensitive
            </summary>
            <param name="obj">Object to check</param>
            <param name="PropertyName">Property name to check in object</param>
            <param name="CanSet">Has check see if the property can be set</param>
            <returns>true if object contains property name, false if it doesn't or false if it cannot be set</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasProperty``1(``0,System.String,System.Boolean)">
            <summary>
            Checks to see if object has property by name given, case sensitive
            </summary>
            <param name="obj">Object to check</param>
            <param name="PropertyName">Property name to check in object</param>
            <param name="CanSet">Has check see if the property can be set</param>
            <returns>true if object contains property name, false if it doesn't or false if it cannot be set</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Checks to see if object has property by name given, case sensitive
            </summary>
            <param name="t">Object to check</param>
            <param name="PropertyName">Property name to check in object</param>
            <param name="CanSet">Has check see if the property can be set</param>
            <returns>true if object contains property name, false if it doesn't or false if it cannot be set</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetName``1(``0)">
            <summary>
            Gets Name of Class
            </summary>
            <typeparam name="T">Any Type</typeparam>
            <param name="item">Object to check</param>
            <returns>string value representing the class name</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.DisposeIfNotNull(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes Object if not null
            </summary>
            <param name="objToDispose">Object to Dispose of</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Disposes Object if not null
            </summary>
            <param name="objToDispose">Object to Dispose of</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.toArray``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Returns a Collection as an Array
            </summary>
            <typeparam name="T">Type to cast to</typeparam>
            <param name="arr">Collection to Convert</param>
            <returns>An Array of the Collection</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.CastToType``1(``0,System.Object)">
            <summary>
            This Method does some hacking to convert the Given Object to The Type of the Object of Reference. 
            This Method is good if you don't have the known type to convert to, but you have an object of that type. 
            IE: dynamic NewObject = ObjectOfReference.CastToType(GivenObject)
            </summary>
            <typeparam name="T">Type to Convert To</typeparam>
            <param name="hackToInferNeededType">Object Of Reference</param>
            <param name="givenObject">Given Object To Convert</param>
            <returns>New object representing the Given Object but converted to the given type of the Object of reference</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.CastToType``1(``0,System.Type,System.Object)">
            <summary>
            This Method does some hacking to convert the Given Object to The Type of the Object of Reference. 
            This Method is good if you don't have the known type to convert to, but you have an object of that type. 
            IE: dynamic NewObject = ObjectOfReference.CastToType(GivenObject)
            </summary>
            <typeparam name="T">Type to Convert To</typeparam>
            <param name="hackToInferNeededType">Object Of Reference</param>
            <param name="typeToCast">type to cast to.</param>
            <param name="givenObject">Given Object To Convert</param>
            <returns>New object representing the Given Object but converted to the given type of the Object of reference</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.CastToType``1(``0[],System.Object)">
            <summary>
            This Method does some hacking to convert the Given Object to The Type of the Object of Reference. 
            This Method is good if you don't have the known type to convert to, but you have an object of that type. 
            IE: dynamic NewObject = ObjectOfReference.CastToType(GivenObject)
            </summary>
            <typeparam name="T">Type to Convert To</typeparam>
            <param name="hackToInferNeededType">Object Of Reference</param>
            <param name="givenObject">Given Object To Convert</param>
            <returns>New object representing the Given Object but converted to the given type of the object of reference</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetBaseType``1(``0[])">
            <summary>
            Gets the Base Type of the Array
            </summary>
            <typeparam name="T">Type of Array</typeparam>
            <param name="arr">Array to return Type of</param>
            <returns>Type of the Base Type of the Array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetBaseType``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the Base Type of the Array
            </summary>
            <typeparam name="T">Type of Array</typeparam>
            <param name="arr">Array to return Type of</param>
            <returns>Type of the Base Type of the Array</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetBaseType(System.Type)">
            <summary>
            Gets the Base Type of the Type
            </summary>
            <param name="type">type to return Type of</param>
            <returns>Type of the Base Type of the Type</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetColumnNames(System.Data.DataColumnCollection)">
            <summary>
            Returns an Array of Column Names
            </summary>
            <param name="ColumnsToGet">Columns to Convert</param>
            <returns>String Array of the Column Names</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ContainsExact(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks if Array Contains the Exact String, not case sensitive
            </summary>
            <param name="str">String Array to Check</param>
            <param name="find">String to find</param>
            <returns>True if Array Contains String</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ContainsExact(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Checks if Array Contains the Exact String, Case Sensitive if CaseSensitive is true
            </summary>
            <param name="str">String Array to Check</param>
            <param name="find">String to find</param>
            <param name="CaseSensitive">Makes Search Case Sensitive</param>
            <returns>True if Array Contains String</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Boolean)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Int32)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Char)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Object)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Single)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Double)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.Decimal)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.RemoveString(System.String,System.String)">
            <summary>
            Removes StringToRemove from string
            </summary>
            <param name="str">string</param>
            <param name="StringToRemove">String To Remove</param>
            <returns>String with StringToRemove Removed</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasChildNode(System.Xml.XmlElement,System.String)">
            <summary>
            Checks for specific ChildNode by name, not case sensitive and returns true if found.
            </summary>
            <param name="el">Element to Check</param>
            <param name="name">Name of Element to find</param>
            <returns>true if child node is found, false if not found.</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasColumn(System.Data.DataTable,System.String)">
            <summary>
            Checks DataTable for column that equals the name given. Case insensitive.
            </summary>
            <param name="dt">DataTable to check</param>
            <param name="ColumnName">Column name to check collection for</param>
            <returns>true if collection contains column name given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.HasColumn(System.Data.DataColumnCollection,System.String)">
            <summary>
            Checks DataColumn Collection for column that equals the name given. Case insensitive.
            </summary>
            <param name="ColumnsToCheck">Column Collection</param>
            <param name="ColumnName">Column name to check collection for</param>
            <returns>true if collection contains column name given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertToASCIISum(System.String)">
            <summary>
            Will Convert String to an integer value representing the summed up value of the ASCII Values.
            </summary>
            <param name="str">String to Convert to integer.</param>
            <returns>Integer value representing the summed up value of the given string.</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.IsNullable``1(``0)">
            <summary>
            Returns true if object given is a nullable type.
            </summary>
            <typeparam name="T">Type of object given.</typeparam>
            <param name="obj">Object to check if nullable.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.CheckEquality(System.Byte[],System.Byte[])">
            <summary>
            Compare the values of two byte arrays. If the two arrays are exact returns true else it returns false.
            If both are null returns true, otherwise if one is null returns false.
            </summary>
            <param name="byteArray">Byte array to check.</param>
            <param name="compareByteArray">Byte array to compare to.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Checkes if File is locked, by attempting to open file. If File open failes with an IOException and the HR for the Exception returns an errorCode 32 or 33 will return true
            otherwise it returns false.
            </summary>
            <param name="fle">File to check if locked.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ToEastern(System.DateTime)">
            <summary>
            Converts the date to date time of eastern time zone.
            </summary>
            <param name="date">Date to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ToSQLFormat(System.DateTime,CMWME.C_Extensions.SQLTimeZone)">
            <summary>
            Converts date to enumeration given and then to string format of yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="date">Date to convert.</param>
            <param name="timeZone">Time zone to convert the date to.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertSecondsToMilliseconds``1(System.Int32)">
            <summary>
            Converts value of variable from seconds to milliseconds. <para/>
            IE: variable * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="seconds">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertSecondsToMilliseconds(System.Int32)">
            <summary>
            Converts value of variable from seconds to milliseconds. <para/>
            IE: variable * 1000
            </summary>
            <param name="seconds">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertSecondsToMilliseconds``1(System.Double)">
            <summary>
            Converts value of variable from seconds to milliseconds. <para/>
            IE: variable * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="seconds">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertSecondsToMilliseconds(System.Double)">
            <summary>
            Converts value of variable from seconds to milliseconds. <para/>
            IE: variable * 1000
            </summary>
            <param name="seconds">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToSeconds``1(System.Int32)">
            <summary>
            Converts value of variable from minutes to seconds. <para/>
            IE: variable * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToSeconds(System.Int32)">
            <summary>
            Converts value of variable from minutes to seconds. <para/>
            IE: variable * 60
            </summary>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToSeconds``1(System.Double)">
            <summary>
            Converts value of variable from minutes to seconds. <para/>
            IE: variable * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToSeconds(System.Double)">
            <summary>
            Converts value of variable from minutes to seconds. <para/>
            IE: variable * 60
            </summary>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToMilliseconds``1(System.Int32)">
            <summary>
            Converts value of variable from minutes to milliseconds. <para/>
            IE: variable * 60 * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToMilliseconds(System.Int32)">
            <summary>
            Converts value of variable from minutes to milliseconds. <para/>
            IE: variable * 60 * 1000
            </summary>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToMilliseconds``1(System.Double)">
            <summary>
            Converts value of variable from minutes to milliseconds. <para/>
            IE: variable * 60 * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertMinutesToMilliseconds(System.Double)">
            <summary>
            Converts value of variable from minutes to milliseconds. <para/>
            IE: variable * 60 * 1000
            </summary>
            <param name="minutes">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToSeconds``1(System.Int32)">
            <summary>
            Converts value of variable from hours to seconds. <para/>
            IE: variable * 60 * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToSeconds(System.Int32)">
            <summary>
            Converts value of variable from hours to seconds. <para/>
            IE: variable * 60 * 60
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToSeconds``1(System.Double)">
            <summary>
            Converts value of variable from hours to seconds. <para/>
            IE: variable * 60 * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToSeconds(System.Double)">
            <summary>
            Converts value of variable from hours to seconds. <para/>
            IE: variable * 60 * 60
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMinutes``1(System.Int32)">
            <summary>
            Converts value of variable from hours to minutes. <para/>
            IE: variable * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMinutes(System.Int32)">
            <summary>
            Converts value of variable from hours to minutes. <para/>
            IE: variable * 60
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMinutes``1(System.Double)">
            <summary>
            Converts value of variable from hours to minutes. <para/>
            IE: variable * 60
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMinutes(System.Double)">
            <summary>
            Converts value of variable from hours to minutes. <para/>
            IE: variable * 60
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMilliseconds``1(System.Int32)">
            <summary>
            Converts value of variable from hours to milliseconds. <para/>
            IE: variable * 60 * 60 * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMilliseconds(System.Int32)">
            <summary>
            Converts value of variable from hours to milliseconds. <para/>
            IE: variable * 60 * 60 * 1000
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMilliseconds``1(System.Double)">
            <summary>
            Converts value of variable from hours to milliseconds. <para/>
            IE: variable * 60 * 60 * 1000
            </summary>
            <typeparam name="T">Type to return must be a number type.</typeparam>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.ConvertHoursToMilliseconds(System.Double)">
            <summary>
            Converts value of variable from hours to milliseconds. <para/>
            IE: variable * 60 * 60 * 1000
            </summary>
            <param name="hours">Value to convert.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetCountBig``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the count or length of an array, using the quickest method available. Use this version if
            the value could be above a 32bit int. If 64bit int not needed use GetCount() instead.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="sequence">Array to get the count from.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.GetCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the count or length of an array, using the quickest method available. Use this version if
            the value will be equal to or below a 32bit int. If 64bit int is needed use GetCountBig() instead.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="sequence">Array to get the count from.</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.AreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares two list's equality.
            </summary>
            <typeparam name="T">Type of list</typeparam>
            <param name="sequence1">Item1 to compare to item 2</param>
            <param name="sequence2">Item 2 to compare to item 1</param>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes last item from array or list.
            </summary>
            <typeparam name="T">type of item or list.</typeparam>
            <param name="source">list to remove from.</param>
        </member>
        <member name="T:CMWME.C_Extensions.TooLargeException">
            <summary>
            Thrown when integer value is too large for an Int32 type.
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.TooLargeException.#ctor(System.Int64)">
            <summary>
            Thrown when integer value is too large for an Int32 type.
            </summary>
            <param name="count">the amount that was too large</param>
        </member>
        <member name="M:CMWME.C_Extensions.TooLargeException.#ctor(System.Int64,System.String)">
            <summary>
            Thrown when integer value is too large for an Int32 type.
            </summary>
            <param name="message">Message given to add to base message. Of return value too large for Int32.</param>
            <param name="count">the amount that was too large</param>
        </member>
        <member name="M:CMWME.C_Extensions.TooLargeException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Thrown when integer value is too large for an Int32 type.
            </summary>
            <param name="message">Message given to add to base message. Of return value too large for Int32.</param>
            <param name="inner">Inner exception.</param>
            <param name="count">the amount that was too large</param>
        </member>
        <member name="M:CMWME.C_Extensions.TooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Thrown when integer value is too large for an Int32 type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CMWME.C_Extensions.C_Extensions_WebUI">
            <summary>
            Extension Methods that require WebUI namespace that has conflicting classes with Windows.Forms
            </summary>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WebUI.HtmlEncode(System.String)">
            <summary>
            Converts Plain Text to HtmlEncoded Text
            IE: Converts less than to &lt; and Greater than to &amp;gt; and &amp; to &amp;amp;
            </summary>
            <param name="text">Text to Convert</param>
            <returns>Converted Text</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WebUI.ToHTML(System.Drawing.Color)">
            <summary>
            Returns a Hex Color String for HTML Colors.
            </summary>
            <returns>Hex Color String</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WebUI.Lighten(System.Drawing.Color,System.Int32)">
            <summary>
            Lightens the color by the amount given
            </summary>
            <param name="color">Color to lighten</param>
            <param name="percentage">percentage to lighten by</param>
            <returns>New Color lighten by the percentage given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WebUI.Darken(System.Drawing.Color,System.Int32)">
            <summary>
            Darkens the color by the amount given
            </summary>
            <param name="color">Color to Darken</param>
            <param name="percentage">percentage to Darken by</param>
            <returns>New Color Darken by the percentage given</returns>
        </member>
        <member name="M:CMWME.C_Extensions.C_Extensions_WebUI.HtmlColorToColor(System.String)">
            <summary>
            Converts HTML Color String to Color Class
            </summary>
            <param name="color">String Representation of a HTML Color</param>
            <returns>Color Class representation of the HTML Color</returns>
        </member>
        <member name="T:CMWME.C_Forms.BindingSources">
            <summary>
            Storage for BindingSources for winForms.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.BindingSources.AddDataSource(System.Windows.Forms.BindingSource)">
            <summary>
            Adds a BindingSource to the list of binding sources within.
            </summary>
            <param name="source">BingingSource to add.</param>
        </member>
        <member name="M:CMWME.C_Forms.BindingSources.ClearDataSources">
            <summary>
            Clears and disposes all BindingSources within the class clearing the storage.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.BindingSources.RemoveDataSource(System.Windows.Forms.BindingSource)">
            <summary>
            Clears, disposes, and removes BindingSource from the collection.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:CMWME.C_Forms.BindingSources.UpdateDataSources">
            <summary>
            Resets the bindings for all binding sources within the collection.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.frm_SelectIcon.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.frm_SelectIcon.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.frm_SelectIcon.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum">
            <summary>
            Class that takes an Enum and creates a DataGrid Column using the values given in the Enum.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.#ctor">
            <summary>
            Constructor for the DataGridViewComboBoxEnum
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor for the DataGridViewComboBoxEnum
            </summary>
            <param name="container">Current container to initialize object with.</param>
        </member>
        <member name="P:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.EnumType">
            <summary>
            Name of the Enum Type to set the ComboBox values to.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.Clone">
            <summary>
            Creates an exact copy of the object.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DataGridView.DataGridViewComboBoxEnum.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.pickListFrm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.pickListFrm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.pickListFrm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.NotifyPropertyClass">
            <summary>
            Class to add to a WPF data context, to allow the class to notify the WPF form when property has changed.
            </summary>
        </member>
        <member name="E:CMWME.C_Forms.NotifyPropertyClass.PropertyChanged">
            <summary>
            Event to call when value of property has changed. Use the Function NotifyPropertyChanged function instead.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.NotifyPropertyClass.NotifyPropertyChanged(System.String)">
            <summary>
            Function to call when the value of a binded property has changed.
            </summary>
            <param name="propertyName">Name of property. You can use nameof(property) to keep from name changes causing issues.</param>
        </member>
        <member name="T:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator">
            <summary>
            Base class for any Button Theme creator class class.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator.FlatAppearance">
            <summary>
            Controls the FlatAppearance property of any button type of within the Themed control.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator.FlatStyle">
            <summary>
            Controls the FlatStyle property of any button type within the Themed control.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator._AutoSizeMode">
            <summary>
            Protected AutoSizeMode.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator.AutoSizeMode">
            <summary>
            Controls the AutoSizeMode property of any button type within the Themed control
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator.#ctor(CMWME.C_Forms.UITheme.ThemeController)">
            <summary>
            Constructor for the ButtonBaseThemeCreator, will set up default values.
            </summary>
            <param name="m_parent">ThemeController parent.</param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator._flatAppearance_PropertyChanged(System.Object,System.EventArgs)">
            <summary>
            Protected property changed method.
            </summary>
            <param name="sender">Sender of method.</param>
            <param name="e">EventArgs of the method.</param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonBaseThemeCreator._flatAppearance_TakeSnapShot(System.Object,System.EventArgs)">
            <summary>
            Protected method that copies the current flat appearance into the oFlatAppearance.
            </summary>
            <param name="sender">Sender of method.</param>
            <param name="e">EventArgs of method.</param>
        </member>
        <member name="T:CMWME.C_Forms.UITheme.ButtonThemeCreator">
            <summary>
            Store for ButtonTheme.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonThemeCreator.#ctor(CMWME.C_Forms.UITheme.ThemeController)">
            <summary>
            Constructor for ButtonTheme.
            </summary>
            <param name="m_parent">
            ThemeController parent for theme.
            </param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonThemeCreator.CopyFrom(System.Windows.Forms.Control)">
            <summary>
            Copies property values from control given, into ButtonTheme.
            </summary>
            <param name="ControlToCopy">
            Control to copy the property values from.
            </param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ButtonThemeCreator.CopyFrom(System.Windows.Forms.Button)">
            <summary>
            Copies property values from button given, into ButtonTheme.
            </summary>
            <param name="ButtonToCopy">
            Button to copy the property values from.
            </param>
        </member>
        <member name="T:CMWME.C_Forms.UITheme.CheckBoxThemeCreator">
            <summary>
            CheckBox Theme container.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.UITheme.CheckBoxThemeCreator.AutoSizeMode">
            <summary>
            Hidden property for checkbox theme.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.UITheme.CheckBoxThemeCreator.AutoSize">
            <summary>
            Theme property for AutoSize of all CheckBoxes within the Themed control.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.CheckBoxThemeCreator.#ctor(CMWME.C_Forms.UITheme.ThemeController)">
            <summary>
            Constructor for CheckBox Theme that initialize all property values.
            </summary>
            <param name="m_parent">
            Parent ThemeController property to store.
            </param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.CheckBoxThemeCreator.CopyFrom(System.Windows.Forms.Control)">
            <summary>
            Copies properties from Control given.
            </summary>
            <param name="ControlToCopy">Control to copy properties from.</param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.CheckBoxThemeCreator.CopyFrom(System.Windows.Forms.CheckBox)">
            <summary>
            Copies properties from CheckBox given.
            </summary>
            <param name="CheckBoxToCopy">Checkbox to copy properties from.</param>
        </member>
        <member name="F:CMWME.C_Forms.UITheme.ThemedPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ThemedPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ThemedPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.UITheme.ThemedForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ThemedForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.UITheme.ThemedForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.MultiSelectTreeView">
            <summary>
            Tree view that allows multi selection.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.MultiSelectTreeView.SelectedNodes">
            <summary>
            Array containing the current selected TreeNodes.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.MultiSelectTreeView.SelectedNode">
            <summary>
            Get's current selected nod, or last selected Node.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.#ctor">
            <summary>
            Constructor for the MultiSelect TreeView.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnGotFocus(System.EventArgs)">
            <summary>
            Make sure at least one node has a selection
            this way we can tab to the ctrl and use the 
            keyboard to select nodes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            If the user clicks on a node that was not
            previously selected, select it now.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            If the clicked on a node that WAS previously
            selected then, reselect it now. This will clear
            any other selected nodes. e.g. A B C D are selected
            the user clicks on B, now A C &amp; D are no longer selected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            If the user drags a node and the node being dragged is NOT
            selected, then clear the active selection, select the
            node being dragged and drag it. Otherwise if the node being
            dragged is selected, drag the entire selection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Never allow base.SelectedNode to be set!
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Never allow base.SelectedNode to be set!
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CMWME.C_Forms.MultiSelectTreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle all possible key strokes for the control.
            including navigation, selection, etc.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:CMWME.C_Forms.C_MessageBoxButtons">
            <summary>
            Custom Message/Error Box Buttons Options
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.AbortRetryIgnore">
            <summary>
            Sets Custom Message/Error Box Buttons to Abort/Retry/Ignore
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.OK">
            <summary>
            Sets Custom Message/Error Box Buttons to OK
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.OKCancel">
            <summary>
            Sets Custom Message/Error Box Buttons to OK/Cancel
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.RetryCancel">
            <summary>
            Sets Custom Message/Error Box Buttons to Retry/Cancel
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.YesNo">
            <summary>
            Sets Custom Message/Error Box Buttons to Yes/No
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.YesNoCancel">
            <summary>
            Sets Custom Message/Error Box Buttons to Yes/No/Cancel
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.Custom1">
            <summary>
            Sets Custom Message/Error Box Buttons to Custom1
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.Custom12">
            <summary>
            Sets Custom Message/Error Box Buttons to Custom1/Custom2
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxButtons.Custom123">
            <summary>
            Sets Custom Message/Error Box Buttons to Custom1/Custom2/Custom3
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.C_MessageBoxDefaultButton">
            <summary>
            Custom Message Box Default Button Options
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Abort">
            <summary>
            Sets Abort Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Retry">
            <summary>
            Sets Retry Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Ignore">
            <summary>
            Sets Ignore Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.OK">
            <summary>
            Sets OK Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Cancel">
            <summary>
            Sets Cancel Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Yes">
            <summary>
            Sets Yes Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.No">
            <summary>
            Sets No Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Custom1">
            <summary>
            Sets Custom1 Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Custom2">
            <summary>
            Sets Custom2 Button to Default Selected
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_MessageBoxDefaultButton.Custom3">
            <summary>
            Sets Custom3 Button to Default Selected
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogResult">
            <summary>
            Custom Dialog Boxes Result/Return
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Abort">
            <summary>
            Dialog Box Returned Abort
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Retry">
            <summary>
            Dialog Box Returned Retry
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Ignore">
            <summary>
            Dialog Box Returned Ignore
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.OK">
            <summary>
            Dialog Box Returned OK
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Cancel">
            <summary>
            Dialog Box Returned Cancel
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Yes">
            <summary>
            Dialog Box Returned Yes
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.No">
            <summary>
            Dialog Box Returned No
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Custom1">
            <summary>
            Dialog Box Returned Custom1
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Custom2">
            <summary>
            Dialog Box Returned Custom2
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogResult.Custom3">
            <summary>
            Dialog Box Returned Custom3
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.CheckBoxesResults">
            <summary>
            Collection of return results of the CheckBoxForm. 
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.CheckBoxesResults.#ctor">
            <summary>
            Base constructor for CheckBoxesResults yields no results.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.CheckBoxesResults.#ctor(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Constructor for CheckBoxesResults that converts Dictionary of String and bool values to CheckBoxResult for each KeyValuePair.
            </summary>
            <param name="CheckBoxVals">Dictionary of string bool values to convert to CheckBoxesResults.</param>
        </member>
        <member name="P:CMWME.C_Forms.CheckBoxesResults.Item(System.String)">
            <summary>
            Get accessor that finds and returns the specific CheckBoxResult with the string name given.
            </summary>
            <param name="name">Name to find CheckBoxResult with.</param>
        </member>
        <member name="T:CMWME.C_Forms.CheckBoxResult">
            <summary>
            CheckBoxResult class that is a class that contains the Name of a checkbox and the Checked value of a checkbox.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.CheckBoxResult.Name">
            <summary>
            Name of the checkbox.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.CheckBoxResult.Checked">
            <summary>
            Checked value of the checkbox.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes">
            <summary>
            Class that contains custom dialog boxes.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.C_DialogBoxes.POSITIONNOTSET">
            <summary>
            The static number for position not set.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.C_DialogBoxes.ThemeController">
            <summary>
            Form Theme for all DialogBoxes. Changing this effects all DialogBoxes within this class.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the starting postion of the dialog form.
            </summary>
            <param name="left">Left most of the form.</param>
            <param name="top">Top most of the form.</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.SetIcon(System.Drawing.Icon)">
            <summary>
            Will set the ThemeController.FormTheme.Icon of the C_DialogBoxes to the Icon given. This will set the icon for all the forms.
            </summary>
            <param name="icon">Icon to set for all the forms.</param>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.CheckBoxForm">
            <summary>
            Check Box Dialog Form Class
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.CheckBoxForm.Show(System.String,System.String,CMWME.C_Forms.CheckBoxesResults)">
            <summary>
            Check Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="CheckBoxes">Dictionary with all checkboxes to generate with the default checked value</param>
            <returns>Dictionary with all checkboxes and whether or not they were checked.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.CheckBoxForm.Show(System.String,System.String,CMWME.C_Forms.CheckBoxesResults,System.Windows.Forms.Form)">
            <summary>
            Check Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="CheckBoxes">Dictionary with all checkboxes to generate with the default checked value</param>
            <param name="Parent">Parent form to allign dialog box to.</param>
            <returns>Dictionary with all checkboxes and whether or not they were checked.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.CheckBoxForm.Show(System.String,System.String,CMWME.C_Forms.CheckBoxesResults,System.Object)">
            <summary>
            Check Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="CheckBoxes">Dictionary with all checkboxes to generate with the default checked value</param>
            <param name="Parent">Parent form to allign dialog box to.</param>
            <returns>Dictionary with all checkboxes and whether or not they were checked.</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.C_InputBox">
            <summary>
            Custom Input box with HTML Message/Title
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_InputBox.Show(System.String,System.String)">
            <summary>
            Input Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_InputBox.Show(System.String,System.String,System.String)">
            <summary>
            Input Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultValue">Default Value Displayed in the Input Box</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_InputBox.Show(System.String,System.String,System.String,System.String)">
            <summary>
            Input Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultValue">Default Value Displayed in the Input Box</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_InputBox.Show(System.String,System.String,System.String,System.String,System.Windows.Forms.Form)">
            <summary>
            Input Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultValue">Default Value Displayed in the Input Box</param>
            <param name="Parent">Parent form to allign the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_InputBox.Show(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Input Box Dialog Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultValue">Default Value Displayed in the Input Box</param>
            <param name="Parent">Parent form to allign the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.C_MessageBox">
            <summary>
            Custom Message Box with HTML Message/Title
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Parent form to align the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Parent form to align the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Parent form to align the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.Show(System.String,System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Parent form to align the dialog box to.</param>
            <returns>Value inputed into the Input box.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Object,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox.ShowCustom(System.String,System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.C_MessageBox._showCustom(System.String,System.String,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Parent Form to align the dialog box to.</param> 
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.ErrorBox">
            <summary>
            Custom Error Box with HTML Message/Title
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Object)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Windows.Forms.Form)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String,System.Object)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.Exception,System.String,System.Windows.Forms.Form)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.Show(System.String,System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object)">
            <summary>
            Message Box Form
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Buttons to show</param>
            <param name="DefaultButton">Default Button Selected</param>
            <param name="Parent">Form for Parent location</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Error Message to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,System.Object,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,System.Windows.Forms.Form,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Object,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ErrorBox.ShowCustom(System.String,System.String,System.Exception,System.String,CMWME.C_Forms.C_MessageBoxButtons,CMWME.C_Forms.C_MessageBoxDefaultButton,System.Object,System.String,System.String,System.String)">
            <summary>
            Custom Message Box
            </summary>
            <param name="Body">Body text inside the form</param>
            <param name="BodyTitle">Title that displays above Body Text</param>
            <param name="Exception">Exception to Display in the Error Box</param>
            <param name="Caption">Title of the Form</param>
            <param name="DefaultButton">Default Selected Custom Button(Custom1, Custom2, or Custom3)</param>
            <param name="Button">Custom Button Type(Custom1, Custom12, or Custom123 </param>
            <param name="CustomButton1">Text for Custom Button 1</param>
            <param name="CustomButton2">Text for Custom Button 2</param>
            <param name="CustomButton3">Text for Custom Button 3</param>
            <param name="Parent">Form for Parent location</param>
            <returns>DialogResult for button Selected Custom1, Custom2, or Custom3</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.ZoomTextBox">
            <summary>
            Zoom in Text Box Text
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ZoomTextBox.Show(System.Windows.Forms.TextBox)">
            <summary>
            Zoom in Text Box Text
            </summary>
            <param name="TextBox">Text box to Get and Replace text for</param>
            <returns>Dialog Result of selected button, OK or Cancel.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ZoomTextBox.Show(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Zoom in Text Box Text
            </summary>
            <param name="TextBox">Text box to Get and Replace text for</param>
            <param name="Title">Title that displays above Body Text</param>
            <returns>Dialog Result of selected button, OK or Cancel.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ZoomTextBox.Show(System.String,System.Windows.Forms.TextBox,System.Windows.Forms.Form)">
            <summary>
            Zoom in Text Box Text
            </summary>
            <param name="TextBox">Text box to Get and Replace text for</param>
            <param name="Title">Title that displays above Body Text</param>
            <param name="Parent">Form for Parent location</param>
            <returns>Dialog Result of selected button, OK or Cancel.</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.ZoomTextBox.Show(System.String,System.Windows.Forms.TextBox,System.Object)">
            <summary>
            Zoom in Text Box Text
            </summary>
            <param name="TextBox">Text box to Get and Replace text for</param>
            <param name="Title">Title that displays above Body Text</param>
            <param name="Parent">Form for Parent location</param>
            <returns>Dialog Result of selected button, OK or Cancel.</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.PickList">
            <summary>
            Zoom in Text Box Text
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.PickList.Show(System.String,System.String[])">
            <summary>
            Shows a Pick List Form, with the given list in the pick list
            </summary>
            <param name="Caption">Caption for the Pick List Form</param>
            <param name="PickList">List to display</param>
            <returns>Item picked from list</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.PickList.Show(System.String,System.Windows.Forms.Form,System.String[])">
            <summary>
            Shows a Pick List Form, with the given list in the pick list
            </summary>
            <param name="Caption">Caption for the Pick List Form</param>
            <param name="PickList">List to display</param>
            <param name="Parent">Parent form to snap to</param>
            <returns>Item picked from list</returns>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.PickList.Show(System.String,System.Object,System.String[])">
            <summary>
            Shows a Pick List Form, with the given list in the pick list
            </summary>
            <param name="Caption">Caption for the Pick List Form</param>
            <param name="PickList">List to display</param>
            <param name="Parent">Parent form to snap to</param>
            <returns>Item picked from list</returns>
        </member>
        <member name="T:CMWME.C_Forms.C_DialogBoxes.PickIcon">
            <summary>
            Class is to show a PickIcon form that allows you to pick an icon from a file and get the icon picked.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.C_DialogBoxes.PickIcon.PickedIcon">
            <summary>
            Icon picked from Icon list.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.C_DialogBoxes.PickIcon.PickedImage">
            <summary>
            Image picked from the Icon list.
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.C_DialogBoxes.PickIcon.PickedImagePath">
            <summary>
            Path to file in format {path},{number}.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.PickIcon.Show(System.String,System.Windows.Forms.Form)">
            <summary>
            Shoes a PickIcon form that allows you to pick an icon from a file and get the returned icon picked from PickedIcon or PickedImage, for bitmap.
            </summary>
            <param name="filePath">File path to choose icon from.</param>
            <param name="Parent">Parent form to tie PickIcon form to.</param>
        </member>
        <member name="M:CMWME.C_Forms.C_DialogBoxes.PickIcon.Show(System.String,System.Object)">
            <summary>
            Shoes a PickIcon form that allows you to pick an icon from a file and get the returned icon picked from PickedIcon or PickedImage, for bitmap.
            </summary>
            <param name="filePath">File path to choose icon from.</param>
            <param name="Parent">Parent form to tie PickIcon form to.</param>
        </member>
        <member name="T:CMWME.C_Forms.ToolTipGenerator">
            <summary>
            Tool Tip Generator Class
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ToolTipGenerator.Show(System.Windows.Forms.Form[])">
            <summary>
            Opens the Tool Tip Generator form that creates the xml to set tool tips for all forms.
            </summary>
            <param name="FormToGenerate">Form to Generate the tool tips for</param>
        </member>
        <member name="M:CMWME.C_Forms.ToolTipGenerator.SetToolTips(System.Windows.Forms.Form,System.String)">
            <summary>
            Sets tool tips for all controls listed in the xml file given. 
            <para>This needs to be ran in the beginging of your form load to set all the Tool Tips.</para>
            </summary>
            <param name="ParentForm">Form to set Tool Tips</param>
            <param name="XMLFile">Xml file generated from the Tool Tip Generator</param>
        </member>
        <member name="M:CMWME.C_Forms.ToolTipGenerator.SetToolTip(System.Windows.Forms.Control,System.String,System.String,System.Int32)">
            <summary>
            Sets tool tip for control given. 
            </summary>
            <param name="control">Control to set the tool tip to</param>
            <param name="format">Format string for tool tip font,fontSize,fontColor,MaxWidth,backgroundColor,BorderColor</param>
            <param name="text">Text for tool tip</param>
            <param name="delay">Delay for tool tip</param>
            <returns>tool tip object with given aspects</returns>
        </member>
        <member name="F:CMWME.C_Forms.ChksFrm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ChksFrm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.ChksFrm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.EditFormat.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.EditFormat.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.EditFormat.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.ErrBxFrm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ErrBxFrm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.ErrBxFrm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.InptBxFrm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.InptBxFrm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.InptBxFrm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.MsgBxFrm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.MsgBxFrm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.MsgBxFrm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.ToolTipGen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ToolTipGen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.ToolTipGen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.txtBxZoom.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.txtBxZoom.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.txtBxZoom.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.ComboBoxWithBorder">
            <summary>
            Modern Combo Box With Border 
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ComboBoxWithBorder.#ctor">
            <summary>
            initalizes a combo box with border
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ComboBoxWithBorder.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WndProc for ComboBox
            </summary>
            <param name="m">WndProc Message</param>
        </member>
        <member name="P:CMWME.C_Forms.ComboBoxWithBorder.BorderColor">
            <summary>
            Border color
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.ComboBoxWithBorder.BorderStyle">
            <summary>
            Border Style
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.ComboBoxWithBorder.BorderSize">
            <summary>
            Border Size
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.ComboBoxWithBorder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.ComboBoxWithBorder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.ComboBoxWithBorder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.FlatTabControl">
            <summary>
            A More Modern Tab Control, with Flat Tabs
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.FlatTabControl.scUpDown">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.FlatTabControl.#ctor">
            <summary>
            Initializes the Tab Control
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.FlatTabControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the OnPaint For the control
            </summary>
            <param name="e">Paint Event Args</param>
        </member>
        <member name="M:CMWME.C_Forms.FlatTabControl.OnCreateControl">
            <summary>
            Overrides the OnCreateControl for the Tab Control
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.TabPages">
            <summary>
            TabPages Collection for the Tab Control
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.Alignment">
            <summary>
            Alignment of the Tab Control
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.Multiline">
            <summary>
            MultiLine Tabs true or false
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.BackColor">
            <summary>
            Back Color of the Tab Control
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.SelectedTabColor">
            <summary>
            Sets the Selected/Active Tab Color
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.InactiveTabsColor">
            <summary>
            Sets the Inactive Tab Color
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.ForeColor">
            <summary>
            Sets the text color of the control
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FlatTabControl.BorderColor">
            <summary>
            Border Color of 
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.FlatTabControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.FlatTabControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.FlatTabControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.FormNoBorder">
            <summary>
            Form with No Border.. Still a work in progress
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.FormNoBorder.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WndProc for Form
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CMWME.C_Forms.FormNoBorder.#ctor">
            <summary>
            Initializes Form
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.FormNoBorder.Text">
            <summary>
            Text of Form
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.FormNoBorder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.FormNoBorder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.FormNoBorder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.HTMLTextBox">
            <summary>
            HTML Text Box User Control
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.#ctor">
            <summary>
            Initializes HTML Text Box
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.SetText(System.String,System.String)">
            <summary>
            Sets Text to HTML Text Box
            </summary>
            <param name="Body">Body of HTML Text Box</param>
            <param name="Title">Title of HTML Text Box</param>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.SetText(System.String,System.String,System.Windows.Forms.Form)">
            <summary>
            Sets Text to HTML Text Box
            </summary>
            <param name="Body">Body of HTML Text Box</param>
            <param name="Title">Title of HTML Text Box</param>
            <param name="ParentForm">Parent Form of HTML Text Box</param>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.SetText(System.String,System.String,System.Drawing.Point)">
            <summary>
            Sets Text to HTML Text Box
            </summary>
            <param name="Body">Body of HTML Text Box</param>
            <param name="Title">Title of HTML Text Box</param>
            <param name="Location">Location to set the HTML Text Box</param>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.SetText(System.String,System.String,System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Sets Text to HTML Text Box
            </summary>
            <param name="Body">Body of HTML Text Box</param>
            <param name="Title">Title of HTML Text Box</param>
            <param name="ParentForm">Parent Form of HTML Text Box</param>
            <param name="Location">Location to set the HTML Text Box</param>
        </member>
        <member name="F:CMWME.C_Forms.HTMLTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.HTMLTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.HTMLTextBox.HTMLBox">
            <summary>
            HTML Text Box
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.StatusStripNoBorder">
            <summary>
            Class to Create Status Strip with No Border, a more modern Status Strip
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.StatusStripNoBorder.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WndProc of Status Strip
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:CMWME.C_Forms.StatusStripNoBorder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.StatusStripNoBorder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.StatusStripNoBorder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CMWME.C_Forms.TextBoxWithBorder">
            <summary>
            Creates a TextBox with Border
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.TextBoxWithBorder.#ctor">
            <summary>
            Initializes the TextBox With Border
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.TextBoxWithBorder.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WinProc for TextBox
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:CMWME.C_Forms.TextBoxWithBorder.BorderColor">
            <summary>
            Changes the BorderColor of the Border
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.TextBoxWithBorder.BorderStyle">
            <summary>
            Changes the Border Style of the Border
            </summary>
        </member>
        <member name="P:CMWME.C_Forms.TextBoxWithBorder.BorderSize">
            <summary>
            Changes the Border Size of the Border
            </summary>
        </member>
        <member name="F:CMWME.C_Forms.TextBoxWithBorder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CMWME.C_Forms.TextBoxWithBorder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CMWME.C_Forms.TextBoxWithBorder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CMWME.C_IO.C_Directory.CreateDirWVer(System.String)">
            <summary>
            Creates all directories in path if doesn't already exist. If created directory fails, with no error throws an IO exception.
            </summary>
            <param name="directory">Directory to create.</param>
            <exception cref="T:System.IO.IOException">Throwes exception if create directory fails.</exception>
        </member>
        <member name="T:CMWME.C_IO.C_FileVersionInfo">
            <summary>
            Put's the FileVersionInfo object version properties into a more readable format and allows you to compare 
            with other version objects. Use GetFileVersion(string) method to create a new object.
            </summary>
        </member>
        <member name="P:CMWME.C_IO.C_FileVersionInfo.Major">
            <summary>
            Major file version or numbers before the first period
            </summary>
        </member>
        <member name="P:CMWME.C_IO.C_FileVersionInfo.Minor">
            <summary>
            Minor file version or numbers after the first period before the second period.
            </summary>
        </member>
        <member name="P:CMWME.C_IO.C_FileVersionInfo.Build">
            <summary>
            Build file version or numbers after the second period before the third.
            </summary>
        </member>
        <member name="P:CMWME.C_IO.C_FileVersionInfo.Revision">
            <summary>
            Revision file version or numbers after the third period.
            </summary>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.GetFileVersion(System.String)">
            <summary>
            Creates a new file version object, from given path and returns it.
            </summary>
            <param name="FullPath">Path to get the file version from.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.#ctor(System.Diagnostics.FileVersionInfo)">
            <summary>
            Creates a new C_FileVersionObject, using the FileVersionInfo object given.
            </summary>
            <param name="fileVersion">FileVersionObject to create the custom FileVersionObject from.</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.ConvertToVersion(System.String)">
            <summary>
            Converts a string value of a version to a file version info.
            </summary>
            <param name="version">String representation of a file version.</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.ToString">
            <summary>
            Returns the string value of the version.
            </summary>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.IsLessThan(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if less than returns true if greater than or equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is less returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_LessThan(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if less than returns true if greater than or equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is less returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.Equals(System.Object)">
            <summary>
            Determines if the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object;
                otherwise, false.
            </returns>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.Equals(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if equal returns true and if not equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is equal returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_Equality(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if equal returns true and if does equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is equal returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_LessThanOrEqual(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if less than or equal returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is less than or equal returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.IsLessThanOrEquals(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if less than or equal returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is less than or equal returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.IsGreaterThan(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if greater than returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is greater than returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_GreaterThan(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if greater than returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is greater than returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.IsGreaterThanOrEquals(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if greater than or equal returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is greater than or equal returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_GreaterThanOrEqual(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if greater than or equal returns true and if greater than returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is greater than or equal returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.op_Inequality(CMWME.C_IO.C_FileVersionInfo,CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of the first object/file to the second object/file, if not equal returns true and if equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is equal returns true.
            </summary>
            <param name="firstFileVersion">Object/file to compare</param>
            <param name="secondFileVersion">Object/file to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_FileVersionInfo.IsNotEqual(CMWME.C_IO.C_FileVersionInfo)">
            <summary>
            Will compare the file version of this object/file to another object/file, if not equal returns true and if equals returns false.
            Will compare each version set: Major, Minor, Build, and Revision in sequence and if the sequence in order is not equal returns true.
            </summary>
            <param name="FileVersion">Object/file to compare to</param>
        </member>
        <member name="T:CMWME.C_IO.ShellLinkExtensions">
            <summary>
            Shell Link Extensions Added to FileSystemInfoClass
            </summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLGP_FLAGS.SLGP_SHORTPATH">
            <summary>Retrieves the standard short (8.3 format) file name</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLGP_FLAGS.SLGP_UNCPRIORITY">
            <summary>Retrieves the Universal Naming Convention (UNC) path name of the file</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLGP_FLAGS.SLGP_RAWPATH">
            <summary>Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. When SLR_NO_UI is set,
            the high-order word of fFlags can be set to a time-out value that specifies the
            maximum amount of time to be spent resolving the link. The function returns if the
            link cannot be resolved within the time-out duration. If the high-order word is set
            to zero, the time-out duration will be set to the default value of 3,000 milliseconds
            (3 seconds). To specify a value, set the high word of fFlags to the desired time-out
            duration, in milliseconds.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_ANY_MATCH">
            <summary>Obsolete and no longer used</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_UPDATE">
            <summary>If the link object has changed, update its path and list of identifiers.
            If SLR_UPDATE is set, you do not need to call IPersistFile::IsDirty to determine
            whether or not the link object has changed.</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_NOUPDATE">
            <summary>Do not update the link information</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_NOSEARCH">
            <summary>Do not execute the search heuristics</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_NOTRACK">
            <summary>Do not use distributed link tracking</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_NOLINKINFO">
            <summary>Disable distributed link tracking. By default, distributed link tracking tracks
            removable media across multiple devices based on the volume name. It also uses the
            Universal Naming Convention (UNC) path to track remote file systems whose drive letter
            has changed. Setting SLR_NOLINKINFO disables both types of tracking.</summary>
        </member>
        <member name="F:CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS.SLR_INVOKE_MSI">
            <summary>Call the Microsoft Windows Installer</summary>
        </member>
        <member name="T:CMWME.C_IO.ShellLinkExtensions.IShellLinkW">
            <summary>The IShellLink interface allows Shell links to be created, modified, and resolved</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,CMWME.C_IO.ShellLinkExtensions.WIN32_FIND_DATAW@,CMWME.C_IO.ShellLinkExtensions.SLGP_FLAGS)">
            <summary>Retrieves the path and file name of a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetIDList(System.IntPtr@)">
            <summary>Retrieves the list of item identifiers for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetIDList(System.IntPtr)">
            <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object.</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the description string for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetDescription(System.String)">
            <summary>Sets the description for a Shell link object. The description can be any application-defined string</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the name of the working directory for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetWorkingDirectory(System.String)">
            <summary>Sets the name of the working directory for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the command-line arguments associated with a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetArguments(System.String)">
            <summary>Sets the command-line arguments for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetHotkey(System.Int16@)">
            <summary>Retrieves the hot key for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetHotkey(System.Int16)">
            <summary>Sets a hot key for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetShowCmd(System.Int32@)">
            <summary>Retrieves the show command for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetShowCmd(System.Int32)">
            <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window.</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>Retrieves the location (path and index) of the icon for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location (path and index) of the icon for a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetRelativePath(System.String,System.Int32)">
            <summary>Sets the relative path to the Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.Resolve(System.IntPtr,CMWME.C_IO.ShellLinkExtensions.SLR_FLAGS)">
            <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.IShellLinkW.SetPath(System.String)">
            <summary>Sets the path and file name of a Shell link object</summary>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.GetShortcutTargetPath(System.IO.FileSystemInfo)">
            <summary>
            Gets Shortcut Target file path
            </summary>
            <param name="filename">File Name</param>
            <returns>Target Address</returns>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.GetShortcutTarget(System.IO.FileSystemInfo)">
            <summary>
            Gets Shortcut Target full value including path and arguments.
            </summary>
            <param name="filename">File Name</param>
            <returns>Target Address</returns>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.CreateShortcut(System.IO.DirectoryInfo,System.String,System.String)">
            <summary>
            Creates a short cut at directory and filename given using the target given for the shortcut target.
            </summary>
            <param name="dir">Directory to create the short cut in.</param>
            <param name="FileName">File name to give the short cut.</param>
            <param name="Target">Target file path to give the short cut.</param>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.CreateShortcut(System.IO.DirectoryInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a short cut at directory and filename given using the target given for the shortcut target.
            </summary>
            <param name="dir">Directory to create the short cut in.</param>
            <param name="FileName">File name to give the short cut.</param>
            <param name="TargetPath">Target file path to give the short cut.</param>
            <param name="TargetArgs">Target file arguments to give the shortcut.</param>
            <param name="Description">Description/comments to give to shortcut.</param>
        </member>
        <member name="M:CMWME.C_IO.ShellLinkExtensions.Utf8ToUnicode(System.String)">
            <summary>
            Returns a converted string from UTF8 to Unicode.
            </summary>
            <param name="input">String to change.</param>
        </member>
        <member name="T:CMWME.C_IO.SymbolicLinkExtensions">
            <summary>
            Symbolic Link Extensions Added to FileSystemInfo Class
            </summary>
        </member>
        <member name="M:CMWME.C_IO.SymbolicLinkExtensions.GetSymbolicLinkTarget(System.IO.FileSystemInfo)">
            <summary>
            Gets the Target Directory or File of a Symbolic Link 
            </summary>
            <param name="symlink">Symbolic Link to Check</param>
            <returns>String representing the Target of the Symbolic Link</returns>
        </member>
        <member name="M:CMWME.C_IO.SymbolicLinkExtensions.IsSymbolicLink(System.IO.FileSystemInfo)">
            <summary>
            Determins if the File or Directory is a Symbolic Link
            </summary>
            <param name="file">File or Directory to Check</param>
            <returns>True if File or Directory is a Symbolic Link False if it isn't</returns>
        </member>
        <member name="T:CMWME.C_IO.FileVersionCompare">
            <summary>
            Return values for CompareFileVersion method. Tells you if the first file was equal, less than or greater than the second.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileVersionCompare.IsEqual">
            <summary>
            Both files versions were equal
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileVersionCompare.IsLessThan">
            <summary>
            First file's version was less than the second's.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileVersionCompare.IsGreaterThan">
            <summary>
            First file's version was greater than the second's.
            </summary>
        </member>
        <member name="T:CMWME.C_IO.FileExistsWriteType">
            <summary>
            What file copies or moves do if file exists already.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileExistsWriteType.Skip">
            <summary>
            File will be skipped if already exists.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileExistsWriteType.Rename">
            <summary>
            File will be renamed if exists up to the count given in CMWME.Variables.IORenameRetry, defaulted to 100.
            </summary>
        </member>
        <member name="F:CMWME.C_IO.FileExistsWriteType.Overwrite">
            <summary>
            File will be overridden if already exists.
            </summary>
        </member>
        <member name="T:CMWME.C_IO.C_File">
            <summary>
            Extra File Functions
            </summary>
        </member>
        <member name="T:CMWME.C_IO.C_File.Hash">
            <summary>
            Different functions to get or check the File Hash
            </summary>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.GetHashString(System.String,System.Byte[])">
            <summary>
            Get the File's Hash String
            </summary>
            <param name="FilePath">File path to get the hash from.</param>
            <param name="keyToDecrypt" >Key to decrypt file if needed. Leave out parameter if not encrypted.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.GetHashString(System.Byte[],System.Byte[])">
            <summary>
            Get the File's Hash String
            </summary>
            <param name="FileBytes">Bytes of a file to get hash from.</param>
            <param name="keyToDecrypt" >Key to decrypt file if needed. Leave out parameter if not encrypted.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.GetBytesString(System.String,System.Byte[])">
            <summary>
            Gets the File's Hash and converts it to a hex string value
            </summary>
            <param name="FilePath">File Path of file to check</param>
            <param name="keyToDecrypt" >Key to decrypt file if needed. Leave out parameter if not encrypted.</param>
            <returns>String value in hex of the file hash</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.GetHashBytes(System.String,System.Byte[])">
            <summary>
            Gets File's Hash in Bytes
            </summary>
            <param name="FilePath">File path for file to check.</param>
            <param name="keyToDecrypt">Key to decrypt file if needed. Leave out parameter if not encrypted.</param>
            <returns>Byte Array of the file hash</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.GetHashBytes(System.Byte[],System.Byte[])">
            <summary>
            Gets File's Hash in Bytes
            </summary>
            <param name="FileBytes">Bytes for file to check</param>
            <param name="keyToDecrypt">Key to decrypt file if needed. Leave out parameter if not encrypted.</param>
            <returns>Byte Array of the file hash</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Compares the Hash bytes of a file to another file
            </summary>
            <param name="File1Hash">Hash bytes of a file</param>
            <param name="File2Path">path of a file to compare the hash</param>
            <param name="keyToDecrypt">Key to decrypt File2Path if needed. Leave out parameter if not encrypted.</param>
            <returns>true if both files hash matches</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareHash(System.String,System.String,System.Byte[])">
            <summary>
            Compares the Hash string bytes of a file to another file
            </summary>
            <param name="File1Hash">Hash string bytes of a file</param>
            <param name="File2Path">path of a file to compare the hash</param>
            <param name="keyToDecrypt">Key to decrypt File2Path if needed. Leave out parameter if not encrypted.</param>
            <returns>true if both files hash matches</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Compares the Hash string bytes of a file to the bytes of another file
            </summary>
            <param name="File1Hash">string hash of a file</param>
            <param name="File2Bytes">bytes a file to get hash and compare.</param>
            <param name="keyToDecrypt">Key to decrypt File2Bytes if needed. Leave out parameter if not encrypted.</param>
            <returns>true if both files hash matches</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compares the Hash string bytes of a file to the bytes of another file
            </summary>
            <param name="File1Hash">bytes hash of a file</param>
            <param name="File2Hash">bytes hash of a file</param>
            <returns>true if both files hash matches</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareFiles(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Checkes File1's hash and compares it to File2's hash
            </summary>
            <param name="File1Bytes">Bytes of File1's hash to check</param>
            <param name="File2Bytes">Bytes of File2's hash to check</param>
            <param name="file1Key">Key to decrypt File1Bytes if needed. Leave out parameter if not encrypted.</param>
            <param name="file2Key">Key to decrypt File2Bytes if needed. Leave out parameter if not encrypted.</param>
            <returns>True if the two file's hash match, false if they don't</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareFiles(System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Checkes File1's hash and compares it to File2's hash
            </summary>
            <param name="File1Path">Path to File1's hash to check</param>
            <param name="File2Bytes">Bytes of File2's hash to check</param>
            <param name="file1Key">Key to decrypt File1Bytes if needed. Leave out parameter if not encrypted.</param>
            <param name="file2Key">Key to decrypt File2Bytes if needed. Leave out parameter if not encrypted.</param>
            <returns>True if the two file's hash match, false if they don't</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareFiles(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Checkes File1's hash and compares it to File2's hash
            </summary>
            <param name="File1Path">Path to File1's hash to check</param>
            <param name="File2Path">Path to File2's hash to check</param>
            <param name="file1Key">Key to decrypt File1Bytes if needed.</param>
            <param name="file2Key">Key to decrypt File2Bytes if needed.</param>
            <returns>True if the two file's hash match, false if they don't</returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.Hash.CompareToken(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Compares File Hash Token's value to hash of file. If match returns true otherwise it returns false.
            Uses key given to decrypt Token to read Token's hash value.
            </summary>
            <param name="FilePath">File to compare token to.</param>
            <param name="TokenPath">Token to get the hash value from.</param>
            <param name="tokenKey">Key to decrypt Token with.</param>
            <param name="fileKey">Key to decrypt file, at FilePath, with, if encrypted. Leave out parameter if not encrypted.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GetFileName(System.String)">
            <summary>
            Returns the last value in a string after a \ or a /. 
            </summary>
            <param name="filePath">Path to get the file name from.</param>
            <exception cref="T:System.NullReferenceException">Throws this exception if the value of filePath is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thows this exception if filePath doesn't have a \ or / in it.</exception>
        </member>
        <member name="M:CMWME.C_IO.C_File.ProtectFile(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Protects/Encrypts file of given path, uses key given to encrypt.
            
            If no RetryCount given assumes 3.
            </summary>
            <param name="UnprotectedFilePath">Path of file to encrypt</param>
            <param name="Key">key to use to encrypt file</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.ProtectFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary> 
            Protects/Encrypts file of given path , uses key given to encrypt.
            
            If no RetryCount given assumes 3.
            </summary>
            <param name="UnprotectedFilePath">Path of file to encrypt</param>
            <param name="ProtectedFilePath">Path to new file.</param>
            <param name="Key">key to use to encrypt file</param>
            <param name="RetryCount">Amount of times to retry, if failure, before giving up.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.ProtectFile(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Protects/Encrypts file of given path, uses key given to encrypt.
            
            If no RetryCount given assumes 3.
            </summary>
            <param name="UnprotectedFilePath">File to encrypt</param>
            <param name="Key">key to use to encrypt file</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.ProtectFile(System.IO.FileInfo,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Protects/Encrypts file of given path, uses key given to encrypt.
            
            If no RetryCount given assumes 3.
            </summary>
            <param name="UnprotectedFilePath">File to encrypt</param>
            <param name="ProtectedFilePath">New file to save the encrypted file to.</param>
            <param name="Key">key to use to encrypt file</param>
            <param name="RetryCount">Amount of times to retry, if failure, before giving up.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.WriteProtectedFile(System.String,System.Byte[],System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Writes data/content to encrypted file, at file path given. Using key given to encrypt the file.
            If no retry count will retry up to 3 times.
            </summary>
            <param name="FilePath">File Path to save the Content to.</param>
            <param name="Content">Content to save to the file.</param>
            <param name="Key">Key to use to Encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry the save.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.WriteProtectedFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Writes data/content to encrypted file, at file path given. Using key given to encrypt the file.
            If no retry count will retry up to 3 times.
            </summary>
            <param name="FilePath">File Path to save the Content to.</param>
            <param name="Content">Content to save to the file.</param>
            <param name="Key">Key to use to Encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry the save.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.WriteProtectedFile(System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Writes data/content to encrypted file, at file path given. Using key given to encrypt the file.
            If no retry count will retry up to 3 times.
            </summary>
            <param name="FilePath">File Path to save the Content to.</param>
            <param name="Content">Content to save to the file.</param>
            <param name="Key">Key to use to Encrypt the file.</param>
            <param name="RetryCount">Amount of times to retry the save.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.DecryptFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts File and saves it in new location
            </summary>
            <param name="ProtectedFilePath">File to Decrypt</param>
            <param name="UnprotectedFilePath">New Location to Save File</param>
            <param name="Key">Key to use to decrypt the file</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.DecryptFile(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decrypts File and retruns bytes of file.
            </summary>
            <param name="ProtectedFilePath">File to Decrypt</param>
            <param name="Key">Key to use to decrypt the file</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.StreamEncryptedFile(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Reads in encrypted File into a memory stream.
            </summary>
            <param name="ProtectedFilePath">protected file</param>
            <param name="Key">key to decrypt file with</param>
            <returns>SecureString Representing the File </returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.ReadEncryptedFile(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Reads in encrypted File and converts it to a secure string
            </summary>
            <param name="ProtectedFilePath">protected file</param>
            <param name="Key">key to decrypt file with</param>
            <returns>SecureString Representing the File </returns>
        </member>
        <member name="M:CMWME.C_IO.C_File.ReadEncryptedFile(System.String,System.Collections.Generic.IEnumerable{System.Byte},System.IO.Stream)">
            <summary>
            Reads in encrypted File into stream given
            </summary>
            <param name="ProtectedFilePath">protected file</param>
            <param name="Key">key to decypt file with</param>
            <param name="Stream">Stream to read file into</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GetFiles(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of files based on the given parameters.
            </summary>
            <param name="DirectoryPath">Directory path to get the files from.</param>
            <param name="Recursive">Whether or not to get the files from sub folders of the directory given.</param>
            <param name="Extensions">Specified file extensions to return.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File._getFiles(System.String,System.Boolean,System.String)">
            <summary>
            Returns a list of files based on the given parameters.
            </summary>
            <param name="DirectoryPath">Directory path to get the files from.</param>
            <param name="Recursive">Whether or not to get the files from sub folders of the directory given.</param>
            <param name="Extension">Specified file extension to return.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GetFiles(System.String,System.Boolean,System.String)">
            <summary>
            Returns a list of files based on the given parameters.
            </summary>
            <param name="DirectoryPath">Directory path to get the files from.</param>
            <param name="Recursive">Whether or not to get the files from sub folders of the directory given.</param>
            <param name="Extension">Specified file extensions to return.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GetFiles(System.String,System.Boolean)">
            <summary>
            Returns a list of files based on the given parameters.
            </summary>
            <param name="DirectoryPath">Directory path to get the files from.</param>
            <param name="Recursive">Whether or not to get the files from sub folders of the directory given.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CompareFileVersions(System.IO.FileInfo,System.String)">
            <summary>
            Compares the versions of two files, if they are equal will return FileVersionCompare.IsEqual enum, if the
            FirstFilePath is less than the SecondFilePath it will return FileVersionCompare.IsLessThan enum, if the
            FirstFilePath is greater than the SecondFilePath it will return FileVersionCompare.IsGreaterThan. If it has
            issues with the compare it will throw an C_Exception with an error code of 100xxx. 
            </summary>
            <param name="FirstFilePath">File/object to compare</param>
            <param name="SecondFilePath">File/object to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CompareFileVersions(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Compares the versions of two files, if they are equal will return FileVersionCompare.IsEqual enum, if the
            FirstFilePath is less than the SecondFilePath it will return FileVersionCompare.IsLessThan enum, if the
            FirstFilePath is greater than the SecondFilePath it will return FileVersionCompare.IsGreaterThan. If it has
            issues with the compare it will throw an C_Exception with an error code of 100xxx. 
            </summary>
            <param name="FirstFilePath">File/object to compare</param>
            <param name="SecondFilePath">File/object to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CompareFileVersions(System.String,System.IO.FileInfo)">
            <summary>
            Compares the versions of two files, if they are equal will return FileVersionCompare.IsEqual enum, if the
            FirstFilePath is less than the SecondFilePath it will return FileVersionCompare.IsLessThan enum, if the
            FirstFilePath is greater than the SecondFilePath it will return FileVersionCompare.IsGreaterThan. If it has
            issues with the compare it will throw an C_Exception with an error code of 100xxx. 
            </summary>
            <param name="FirstFilePath">File/object to compare</param>
            <param name="SecondFilePath">File/object to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CompareFileVersions(System.String,System.String)">
            <summary>
            Compares the versions of two files, if they are equal will return FileVersionCompare.IsEqual enum, if the
            FirstFilePath is less than the SecondFilePath it will return FileVersionCompare.IsLessThan enum, if the
            FirstFilePath is greater than the SecondFilePath it will return FileVersionCompare.IsGreaterThan. If it has
            issues with the compare it will throw an C_Exception with an error code of 100xxx. 
            </summary>
            <param name="FirstFilePath">File/object to compare</param>
            <param name="SecondFilePath">File/object to compare to</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.MoveWithCheck(System.IO.FileInfo,System.String,CMWME.C_IO.FileExistsWriteType,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Copies the FileToCopy to the CopyToPath and verifies the Hash is the same after copy then deletes the original file, will retry if fails 
            based on the amount given in the RetryCount. Based on the value of WriteType will dictate whether or not the file will be overwritten, 
            renamed or skipped if file already exists. If EncryptFile is true you must provide an EncryptKey and the file will be Encrypted before 
            copy based on that key, which will be needed to decrypt it. 
            </summary>
            <param name="FileToMove">File to copy.</param>
            <param name="MoveToPath">Path to copy the file to.</param>
            <param name="WriteType">This value will determine whether or not the file will be Overwritten, renamed, or skipped if it already exists in the destination.</param>
            <param name="RetryCount">Amount of times to retry the copy if fails.</param>
            <param name="EncryptFile">Whether or not the file will be encrypted before copy.</param>
            <param name="EncryptKey">Key to encrypt file with.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.MoveFile(System.IO.FileInfo,System.String,CMWME.C_IO.FileExistsWriteType,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Copies the FileToCopy to the CopyToPath then deletes the original file, will retry if fails 
            based on the amount given in the RetryCount. Based on the value of WriteType will dictate whether or not the file will be overwritten, 
            renamed or skipped if file already exists. If EncryptFile is true you must provide an EncryptKey and the file will be Encrypted before 
            copy based on that key, which will be needed to decrypt it. 
            </summary>
            <param name="FileToMove">File to copy.</param>
            <param name="MoveToPath">Path to copy the file to.</param>
            <param name="WriteType">This value will determine whether or not the file will be Overwritten, renamed, or skipped if it already exists in the destination.</param>
            <param name="RetryCount">Amount of times to retry the copy if fails.</param>
            <param name="EncryptFile">Whether or not the file will be encrypted before copy.</param>
            <param name="EncryptKey">Key to encrypt file with.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.DeleteFile(System.IO.FileInfo,System.Int32)">
            <summary>
            Deletes the file, if fails will retry the amount of times given in RetryCount.
            </summary>
            <param name="FileToDelete">File deleted.</param>
            <param name="RetryCount">Amount of times to attempt.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CopyWithCheck(System.IO.FileInfo,System.String,CMWME.C_IO.FileExistsWriteType,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Copies the FileToCopy to the CopyToPath and verifies the Hash is the same after copy, will retry if fails based on the amount given in the 
            RetryCount. Based on the value of WriteType will dictate whether or not the file will be overwritten, renamed or skipped if file already 
            exists. If EncryptFile is true you must provide an EncryptKey and the file will be Encrypted before copy based on that key, which will 
            be needed to decrypt it. 
            </summary>
            <param name="FileToCopy">File to copy.</param>
            <param name="CopyToPath">Path to copy the file to.</param>
            <param name="WriteType">This value will determine whether or not the file will be Overwritten, renamed, or skipped if it already exists in the destination.</param>
            <param name="RetryCount">Amount of times to retry the copy if fails.</param>
            <param name="EncryptFile">Whether or not the file will be encrypted before copy.</param>
            <param name="EncryptKey">Key to encrypt file with.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CopyFile(System.IO.FileInfo,System.String,CMWME.C_IO.FileExistsWriteType,System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Copies the FileToCopy to the CopyToPath, will retry if fails based on the amount given in the RetryCount. Based on the value
            of WriteType will dictate whether or not the file will be overwritten, renamed or skipped if file already exists. If EncryptFile is true
            you must provide an EncryptKey and the file will be Encrypted before copy based on that key, which will be needed to decrypt it. 
            </summary>
            <param name="FileToCopy">File to copy.</param>
            <param name="CopyToPath">Path to copy the file to.</param>
            <param name="WriteType">This value will determine whether or not the file will be Overwritten, renamed, or skipped if it already exists in the destination.</param>
            <param name="RetryCount">Amount of times to retry the copy if fails.</param>
            <param name="EncryptFile">Whether or not the file will be encrypted before copy.</param>
            <param name="EncryptKey">Key to encrypt file with.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.copyFile(System.IO.FileInfo@,System.String@,CMWME.C_IO.FileExistsWriteType,System.Int32,System.Boolean,System.Byte[],System.Int32@)">
            <summary>
            Copies the FileToCopy to the CopyToPath, will retry if fails based on the amount given in the RetryCount. Based on the value
            of WriteType will dictate whether or not the file will be overwritten, renamed or skipped if file already exists. If EncryptFile is true
            you must provide an EncryptKey and the file will be Encrypted before copy based on that key, which will be needed to decrypt it. 
            The value in rCnt is the current retry count attempted, and will be used to keep it from retying more than the retry count.
            </summary>
            <param name="FileToCopy">File to copy.</param>
            <param name="CopyToPath">Path to copy the file to.</param>
            <param name="WriteType">This value will determine whether or not the file will be Overwritten, renamed, or skipped if it already exists in the destination.</param>
            <param name="RetryCount">Amount of times to retry the copy if fails.</param>
            <param name="EncryptFile">Whether or not the file will be encrypted before copy.</param>
            <param name="EncryptKey">Key to encrypt file with.</param>
            <param name="rCnt">Amount of retries that have already been attempted.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GenerateNewPath(System.String,System.String)">
            <summary>
            Generates a new path for the file based on the NewPath given. Verifies name of file is at the end of the file, and if there's already
            another file with that name renames the file till it finds a name that isn't already taken. It attempts to rename the file the amount 
            given in the CMWME.Variable.IORenameRetry property, defaulted to 2000 milliseconds.
            </summary>
            <param name="OriginalFile">Original file that the NewPath is for.</param>
            <param name="NewPath">New path for Original file.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GenerateNewPath(System.IO.FileInfo,System.String)">
            <summary>
            Generates a new path for the file based on the NewPath given. Verifies name of file is at the end of the file, and if there's already
            another file with that name renames the file till it finds a name that isn't already taken. It attempts to rename the file the amount 
            given in the CMWME.Variable.IORenameRetry property, defaulted to 2000 milliseconds.
            </summary>
            <param name="OriginalFile">Original file that the NewPath is for.</param>
            <param name="NewPath">New path for Original file.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CreateDirectory(System.String,System.String,System.Int32)">
            <summary>
            Creates a directory using CreatePath given. If FileName is not null will check to see if
            the FileName is at the end of the path, if so it will remove before attempting to create. Prior to creating the 
            CreatePath given, if CreatePath already exists returns without attempting. If Exception is thrown during 
            Create or directory doesn't exist after creation will retry based on the amount of RetryCount given and 
            will wait before attempting again the amount dictated in the property CMWME.Variables.IOWaitTime, defaulted to 
            2000 milliseconds.
            </summary>
            <param name="CreatePath">Directory path to create.</param>
            <param name="FileName">File name to remove from the end of the file path.</param>
            <param name="RetryCount">Amount of times to retry to create the directory.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.GetDirectory(System.String,System.String)">
            <summary>
            Returns the FilePath with the FileName removed, if FileName doesn't exist returns the FilePath.
            </summary>
            <param name="FilePath">FilePath to remove the FileName from.</param>
            <param name="FileName">FileName to remove from the FilePath.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CreateTestDirectory(System.String,System.String)">
            <summary>
            Used for unit tests. Creates a directory path using C:\temp\AEP\TestDirectory\testClass.testMethod format. If directory path 
            already exists delets the path and everything in it. Then re-creates the path for use in unit tests. Then
            returns the path created.
            </summary>
            <param name="testClass">Name of test class to add to the directory path.</param>
            <param name="testMethod">Name of test method to add to the directory path.</param>
        </member>
        <member name="M:CMWME.C_IO.C_File.CreateTestDirectory(System.String,System.String,System.String)">
            <summary>
            Used for unit tests. Creates a directory path using parentDir\testClass.testMethod format. If directory path 
            already exists delets the path and everything in it. Then re-creates the path for use in unit tests. Then
            returns the path created.
            </summary>
            <param name="parentDir">Parent directory of the unit test path.</param>
            <param name="testClass">Name of test class to add to the directory path.</param>
            <param name="testMethod">Name of test method to add to the directory path.</param>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.C_ExcelCellCollection">
            <summary>
            Collection of C_ExcelCell. Used during GetCells to store the position, name and values of the excel locations to get.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelCellCollection.Item(System.String)">
            <summary>
            Finds specific C_ExcelCell within the collection with the given name.
            </summary>
            <param name="CellName">Name to find.</param>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.C_ExcelCell">
            <summary>
            Cell location reference on an Excel Sheet.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelCell.Name">
            <summary>
            Friendly name of the cell can be used to lookup cell from C_ExcelCellCollection indexer.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelCell._name">
            <summary>
            Private store for Name.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelCell.Position">
            <summary>
            Position reference in Excel sheet, used when looking up cell value.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelCell._position">
            <summary>
            Private store for Position.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelCell.Value">
            <summary>
            Value of Excel cell, populated during GetCells or used when SetCells ran.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelCell._value">
            <summary>
            Private store for Value.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelCell.#ctor(System.String,System.String)">
            <summary>
            Creates C_ExcelClass with Name and position given. Use when running GetCells.
            </summary>
            <param name="Name">Friendly  name of the cell can be used to lookup cell from C_ExcelCellCollection indexer.</param>
            <param name="Position">Position reference in Excel sheet, used when looking up cell value.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelCell.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates C_ExcelClass with Name and position given. Use when running SetCells.
            </summary>
            <param name="Name">Friendly  name of the cell can be used to lookup cell from C_ExcelCellCollection indexer.</param>
            <param name="Position">Position reference in Excel sheet, used when looking up cell value.</param>
            <param name="Value">Value to set the cells to when running SetCells</param>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.C_ExcelTable">
            <summary>
            Excel sheet table positions. Used to find a data sheet table in Excel.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.HasLabelRow">
            <summary>
            Whether or not the Excel sheet table has a Label row or not. If set to false will set LabelRow to -1 else it will set it to 1 if set to true and current value is -1.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelTable._hasLabelRow">
            <summary>
            Private store for HasLabelRow.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.LabelRow">
            <summary>
            Position on Excel sheet where the first label row is, is a base 1 index value. If set to 0 or below -1 will throw exception. If set to -1 will set HasLabelRow to false.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelTable._labelRow">
            <summary>
            Private store for LabelRow.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.FirstDataRow">
            <summary>
            First row of the data table within the Excel sheet.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.FirstColumn">
            <summary>
            First Column of the data table within the Excel sheet.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.LastDataRow">
            <summary>
            Last row of the data table within the Excel sheet. If set to -1 (Automatic) code will find the last row on it's own.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelTable.LastColumn">
            <summary>
            Last row of the data table within the Excel sheet. If set to -1 (Automatic) code will find the last row on it's own.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelTable.#ctor">
            <summary>
            Used internally, to create base table when none is given.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelTable.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates table positions with the given values, LastDataRow, and LastColumn will be set to -1 (Automatic)
            </summary>
            <param name="FirstColumn">Position of first column of the data table, base 1 index.</param>
            <param name="FirstDataRow">Position of the first row of the data table's data, base 1 index.</param>
            <param name="LabelRow">Position of the label row of the data table, base 1 index.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelTable.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates table positions with the given values, LastDataRow, and LastColumn will be set to -1 (Automatic)
            </summary>
            <param name="FirstColumn">Position of first column of the data table, base 1 index.</param>
            <param name="FirstDataRow">Position of the first row of the data table's data, base 1 index.</param>
            <param name="HasLabelRow"></param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelTable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="FirstColumn"></param>
            <param name="FirstDataRow"></param>
            <param name="LastColumn"></param>
            <param name="LastDataRow"></param>
            <param name="LabelRow"></param>
            <param name="HasLabelRow"></param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelTable.GetFirstRow">
            <summary>
            returns the number of the first row of the Excel Table.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.InitializeFile">
            <summary>
            Given during initialize of C_ExcelApplication, tells class how to load the file into memory.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeFile.Create">
            <summary>
            Tells C_ExcelApplication to create new Excel file during load the Excel file into memory.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeFile.Overwrite">
            <summary>
            Tells C_ExcelApplication to overwrite existing file, if exists, otherwise it creates new file during the load of the Excel file into memory.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeFile.Open">
            <summary>
            Tells C_ExcelApplication to open existing file, if doesn't exist will throw exception, during load of Excel file into memory.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.InitializeSheet">
            <summary>
            Given during initialize of C_ExcelApplication, tells class how to load the Excel sheet into memory.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeSheet.Create">
            <summary>
            Tells C_ExcelApplication to create new Excel sheet in the workbook loaded into memory. If Sheet already exists, will append a numeric value to the sheet name until it finds a name that doesn't.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeSheet.Overwrite">
            <summary>
            Tells C_ExcelApplication to overwrite existing Excel sheet if it already exists in the workbook loaded into memory. Otherwise it creates a new sheet.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.InitializeSheet.Open">
            <summary>
            Tells C_ExcelApplication to open existing Excel sheet in workbook loaded into memory. If doesn't exist it will throw an exception.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Excel.C_ExcelApplication">
            <summary>
            Custom Excel class for managing excel files through the Excel Application.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.xlObj">
            <summary>
            private store for the excel application object.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.xlwkbk">
            <summary>
            Private store for current excel work book object.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.xlSheet">
            <summary>
            Private store for current excel sheet object.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.GetSheetName">
            <summary>
            Returns sheet name of current sheet.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication._cSheetNme">
            <summary>
            Private store for the sheet name.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication._cSheetIndex">
            <summary>
            Private store for the sheet index.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication._filePath">
            <summary>
            Private store for the current file path of the excel file.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication._cancel">
            <summary>
            If set to true, will cancel any long running method.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.SheetNames">
            <summary>
            Sheet names found in the excel file given during creation.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelApplication._snmes">
            <summary>
            private store for sheet names in the excel file.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.CountOfSheets">
            <summary>
            Gets Count of sheets for the current excel file given on creation.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication._sheetCnt">
            <summary>
            Private store for the Count of Sheets.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Excel.C_ExcelApplication.ColumnNames">
            <summary>
            Column names in the excel sheet, populated during GetSheetTable.
            </summary>
        </member>
        <member name="F:CMWME.C_Office.C_Excel.C_ExcelApplication._columnNames">
            <summary>
            Private store for ColumnNames.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.#ctor(System.String,System.String,CMWME.C_Office.C_Excel.InitializeFile,CMWME.C_Office.C_Excel.InitializeSheet)">
            <summary>
            Constructor for C_ExcelApplication. Initializes file given and sheet given.
            </summary>
            <param name="FilePath">Excel or CSV file to load into memory.</param>
            <param name="SheetName">Sheet to load into memory.</param>
            <param name="FileOperation">How to open the Excel file. Whether to create new, overwrite existing, or open existing.</param>
            <param name="SheetOperation">How to initialize the Excel Sheet. Whether to create new, overwrite existing or open existing.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.#ctor(System.String,CMWME.C_Office.C_Excel.InitializeFile)">
            <summary>
            Constructor for C_ExcelApplication. Initializes file given.
            </summary>
            <param name="FilePath">Excel or CSV file to load into memory.</param>
            <param name="FileOperation">How to open the Excel file. Whether to create new, overwrite existing, or open existing.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication._initializeFile(System.String,CMWME.C_Office.C_Excel.InitializeFile)">
            <summary>
            Loades Excel file into memory.
            </summary>
            <param name="filePath">Excel or CSV file to load into memory.</param>
            <param name="fileOperation">How to open the Excel file. Whether to create new, overwrite existing, or open existing.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication._releaseObject(System.Object)">
            <summary>
            Releases object from memory.
            </summary>
            <param name="o">Object to release.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication._initializeSheet(System.String,CMWME.C_Office.C_Excel.InitializeSheet)">
            <summary>
            Loads excel sheet into memory.
            </summary>
            <param name="sheetName">Sheet to load into memory.</param>
            <param name="sheetOperation">How to initialize the Excel Sheet. Whether to create new, overwrite existing or open existing.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.SetSheet(System.String,CMWME.C_Office.C_Excel.InitializeSheet)">
            <summary>
            Initializes worksheet in given file during initialize of C_ExcelApplication. If sheet already initialized 
            will clear it.
            </summary>
            <param name="SheetName">Sheet to initialize.</param>
            <param name="sheetOperation">How to open the sheet, if nothing specified will open existing sheet.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.GetSheetTable(CMWME.C_Office.C_Excel.C_ExcelTable)">
            <summary>
            Returns a DataTable from the excel sheet loaded with the Table settings given.
            </summary>
            <param name="TableSettings">Table settings to use when getting the excel table. If none given defaults to FirstColumn = 1, FirstDataRow = 2, LableRow = 1, LastColumn =(auto), and LastDataRow = (auto)</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.SaveDataTable(System.Data.DataTable,CMWME.C_Office.C_Excel.C_ExcelTable)">
            <summary>
            Saves DataTable to an excel sheet, uses Table Settings given to find location to save on the Excel sheet.
            </summary>
            <param name="SaveTable">DataTable to save to Excel.</param>
            <param name="TableSettings">Table settings to use when getting the excel table. If none given defaults to FirstColumn = 1, FirstDataRow = 2, LableRow = 1, LastColumn =(auto), and LastDataRow = (auto)</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.GetCells(CMWME.C_Office.C_Excel.C_ExcelCellCollection)">
            <summary>
            Populates values of specific cell positions to given C_ExcelCellCollection from the Excel sheet in memory.
            </summary>
            <param name="CellsToGet">Collection with cell positions to lookup within the Excel sheet in memory.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.CancelExecution">
            <summary>
            Cancels execution of long running process. Will cause a Final_Exception to be thrown in the current runing process.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.Finalize">
            <summary>
            Destructor for the Custom Excel API. Runs close excel objects.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.Close">
            <summary>
            Closes the Excel objects.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.Dispose">
            <summary>
            Disposes Excel collection.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Excel.C_ExcelApplication.Dispose(System.Boolean)">
            <summary>
            Disposes the Excel application.
            </summary>
            <param name="Disposing">Whether or not the application is currently disposing.</param>
        </member>
        <member name="T:CMWME.C_Office.C_Addin.C_OutlookApplication">
            <summary>
            Outlook application houses current Outlook Application, Namespace, Accounts and all data associated to current outlook instance.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.Application">
            <summary>
            Native Com object for current Outlook Application.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.NameSpace">
            <summary>
            Native Com object for current Oultook namespace.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.Accounts">
            <summary>
            List of Outlook accounts in current outlook namespace.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.ActiveAccount">
            <summary>
            Active account for selected mail item in outlook application.  Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.ActiveMailItem">
            <summary>
            Active or selected mail item in outlook application  Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.ActiveMailItems">
            <summary>
            Active or selected mail items in outlook application.  Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.SentItemsHandler">
            <summary>
            Sets Sent Item, Item added, event handler for every outlook account in current namespace.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.SaveFolderChanged">
            <summary>
            Sets SaveFolderChanged event handler, fires every time a sent folder changes.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.Top">
            <summary>
            Gets the top most point of the current Outlook window.  Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.Left">
            <summary>
            Gets the left most point of the current outlook window. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookApplication.WindowTimeOut">
            <summary>
            Gets or Sets the current window timeout. The amount of milliseconds that the class will wait before attempting to get the window again. Default 500 milliseconds.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.HasWindowLoaded">
            <summary>
            Returns true if any item/window resources has been loaded. Otherwise it returns false.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.HasAccount(Microsoft.Office.Interop.Outlook.Account)">
            <summary>
            Checks to see if the current namespace contains the account given.
            </summary>
            <param name="Account">Account object to check.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.HasAccount(System.String)">
            <summary>
            Checks to see if the current namespace contains the account with the smtp address given.
            </summary>
            <param name="AccountName">SMTP address to check.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.GetAccount(Microsoft.Office.Interop.Outlook.Account)">
            <summary>
            Returns account object of the Outlook object given.
            </summary>
            <param name="Account">Account to get.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.GetAccount(System.String)">
            <summary>
            Returns account object of the smtp address given.
            </summary>
            <param name="AccountName">SMTP address to retrive account object for.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.GetNativeAccounts">
            <summary>
            Returns a list of the Native Com objects representing the Outlook account in the current namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.GetFolder(System.String)">
            <summary>
            Gets the folder by name, from the list of folders in the current namespace.
            </summary>
            <param name="folderName">Folder name of the folder to find.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.LoadWindow">
            <summary>
            Loads all the window data to be able to access the selected mailitems, window bounds, and current active window.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.CloseWindow">
            <summary>
            Disposes window and releases any open window resources.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.Dispose">
            <summary>
            Disposes the Outlook application object.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.Dispose(System.Boolean)">
            <summary>
            Disposes the Outlook application object.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookApplication.Finalize">
            <summary>
            Disposes the Outlook application object.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Addin.C_OutlookMailItem">
            <summary>
            Class represents an Outlook mail item 
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.NewMailItem(CMWME.C_Office.C_Addin.C_OutlookAccount)">
            <summary>
            Returns new mailitem for account given.
            </summary>
            <param name="Account">Account to make the mailitem for.</param>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookMailItem.Subject">
            <summary>
            Subject of given mailitem.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookMailItem.TextBody">
            <summary>
            Returns Text body of current mailitem. If set, sets body format to plain text and sets body value and saves.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookMailItem.ToAddress">
            <summary>
            Get returns the current To Address of current mail item. When set, verifies address is in proper format if not appends
            @aep.com to the address and sets the To Address of the current mail item then saves the mailitem.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookMailItem.SenderDisplayName">
            <summary>
            Gets the Sender Display Name of the Sender of the Mail Item.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookMailItem.SenderAddress">
            <summary>
            Gets the Sender Address of the Sender of the Mail Item.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.GetNaitiveItem">
            <summary>
            Returns the naitive mailitem object of current mailitem.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.AttachItem(CMWME.C_Office.C_Addin.C_OutlookMailItem)">
            <summary>
            Attaches the Naitive Com object of the given Outlook Mail Item to this mail item.
            </summary>
            <param name="MailItem">Mail item to attach.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.AttachItem(Microsoft.Office.Interop.Outlook.MailItem)">
            <summary>
            Attaches given MailItem Com object to this mail item.
            </summary>
            <param name="MailItem">Mail item to attach.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.AttachFile(System.String)">
            <summary>
            Attaches file at path given to current mail item.
            </summary>
            <param name="FilePath">File path of file to attach.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.DeleteItem">
            <summary>
            Deletes current mail item then disposes of this object.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.SendItem(System.String)">
            <summary>
            Sends item to To Address given. 
            </summary>
            <param name="ToAddress">To Address to send the item to.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.SendItem">
            <summary>
            Sends item.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.Dispose">
            <summary>
            Disposes of the resources of this object.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources of this object.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookMailItem.Finalize">
            <summary>
            Disposes of the resources of this object.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Addin.C_Outlook">
            <summary>
            Static class to manage the OutlookApplication class.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.WindowTimeOut">
            <summary>
            Time in milliseconds that the window will reload if not closed. Defaulted to 500 milliseconds.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.Application">
            <summary>
            Current running outlook application.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.NameSpace">
            <summary>
            Current running outlook namespace.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.Accounts">
            <summary>
            List of outlook accounts attached to the current outlook namespace.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.ActiveAccount">
            <summary>
            The active account for the selected items. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.ActiveMailItem">
            <summary>
            The active mailitem selected. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.ActiveMailItems">
            <summary>
            The active selected mailitems. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.SentItemsHandler">
            <summary>
            Sets Handler for sent items.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.SaveFolderChanged">
            <summary>
            Sets Handler for Save Folder Changed.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.Top">
            <summary>
            Returns the Top most point in the current Outlook application window. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_Outlook.Left">
            <summary>
            Returns the Left most point in the current Outlook applciation window. Value loaded after window is loaded. Run load window before accessing this property.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.Initialize(Microsoft.Office.Interop.Outlook.Application,System.String,System.Boolean)">
            <summary>
            Initializes the Outlook application class, used internally for most functions.
            </summary>
            <param name="CurrentApplication">Outlook's current application instance.</param>
            <param name="AltSentFolder">Alternate sent folder for application.</param>
            <param name="GetFolders">If true, the initaization will load all folders in current Outlook application namespace. Process takes alot of memory and processing, only use if using folder.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.GetNativeAccounts">
            <summary>
            Returns List of Outlook Accounts in their native format.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.NewMailItem(CMWME.C_Office.C_Addin.C_OutlookAccount)">
            <summary>
            Creates a New Outlook Mailitem that can be used to send, forward, save, reply, etc.
            </summary>
            <param name="Account"></param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.HasAccount(Microsoft.Office.Interop.Outlook.Account)">
            <summary>
            Validates that the smtpaddress of the account given isn't already an Outlook acount listed in the current Namspace.
            </summary>
            <param name="Account">Outlook account to look up.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.HasAccount(System.String)">
            <summary>
            Validates that the smtpaddress given isn't already an Outlook acount listed in the current Namspace.
            </summary>
            <param name="AccountName">SMTP address of account requested.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.GetAccount(Microsoft.Office.Interop.Outlook.Account)">
            <summary>
            Gets the Outlook account object of the smtp address of the account given.
            </summary>
            <param name="Account">Account to find.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.GetAccount(System.String)">
            <summary>
            Gets the Outlook account object of the account given.
            </summary>
            <param name="AccountName">Smtp address of account to find.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.GetFolder(System.String)">
            <summary>
            Returns folder object for the folder name given.
            </summary>
            <param name="folderName">Folder to find.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.LoadWindow">
            <summary>
            Loads window data for current Outlook application. Needs to be ran at the begining of every event and CloseWindow needs ran at the end 
            of every event, to verify Window data is accurate.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.CloseWindow">
            <summary>
            Closes window resources of current Outlook application.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.HasWindowLoaded">
            <summary>
            Validates window has been loaded.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_Outlook.Dispose">
            <summary>
            Disposes all resources loaded into memory for Outlook application.
            </summary>
        </member>
        <member name="T:CMWME.C_Office.C_Addin.C_OutlookAccount">
            <summary>
            Outlook application object, houses all data for the current running outlook application after Initailzation. Please run C_Outlook.Initialize 
            to initalize application.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.GetSpecialFoldersAsync">
            <summary>
            Will load speacial folders, using a thread.
            </summary>
        </member>
        <member name="E:CMWME.C_Office.C_Addin.C_OutlookAccount.OutlookAccountAdded">
            <summary>
            Set to handle everytime a new Outlook account is added to the object.
            </summary>
        </member>
        <member name="E:CMWME.C_Office.C_Addin.C_OutlookAccount.SaveFolderChanged">
            <summary>
            Set to handle everytime a Save Folder has changed.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.NameSpace">
            <summary>
            Namespace of current Outlook account.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.AccountName">
            <summary>
            Account name of Outlook account.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.DefaultSentFolder">
            <summary>
            Default sent folder location for account.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.NativeAccount">
            <summary>
            Native com object for the Outlook account.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.SentItemsHandler">
            <summary>
            Sets an ItemAdded event to the Sent Folder.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.SentSaveFolder">
            <summary>
            Gets the path of the current Sent Save Folder
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.DeletedItems">
            <summary>
            Native com object for the Folder for Deleted Items.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.SentSaveFolderName">
            <summary>
            The name of the Sent Save folder.
            </summary>
        </member>
        <member name="P:CMWME.C_Office.C_Addin.C_OutlookAccount.SpecialFolders">
            <summary>
            List of Native com objects that represent the list of Special Folders.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.GetSpecialFolders">
            <summary>
            Process to populate the list of Special Folders.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.IsAccount(System.String)">
            <summary>
            Checks the account name/smtp address given and verifies that this object represents the account.
            </summary>
            <param name="AccountName">Account name/smtp address to check.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.IsSpecialFolder(Microsoft.Office.Interop.Outlook.Folder)">
            <summary>
            Checks folder given and see if it's listed in the Special folder object. If special folder object hasn't been populated, loads special folder object (this
            takes time processing.
            </summary>
            <param name="folder">Folder to check.</param>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.Dispose">
            <summary>
            Disposes Outlook account and all com objects that are being stored for the account.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.Dispose(System.Boolean)">
            <summary>
            Disposes Outlook account and all com objects that are being stored for the account.
            </summary>
        </member>
        <member name="M:CMWME.C_Office.C_Addin.C_OutlookAccount.Finalize">
            <summary>
            Disposes of all resources.
            </summary>
        </member>
        <member name="T:CMWME.C_Fx">
            <summary>
            CMWME Functions
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.PROGRAMDATAREPLACE">
            <summary>
            Replace variable for Program Data path, {programdata}.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.COMPANYNAMEREPLACE">
            <summary>
            Replace variable for company name, {companyname}.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.PRODUCTNAMEREPLACE">
            <summary>
            Replace variable for product name, {productname}.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.COMPUTERNAMEREPLACE">
            <summary>
            Replace variable for Computer Name, {computername}.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.TEMPDIRREPLACE">
            <summary>
            Replace variable for Temp Directory, {tempdir}.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.APPDATADIRREPLACE">
            <summary>
            Replace variable for {programdata}\\{companyname}\\{productname}
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.APPDATADIRDREPLACE">
            <summary>
            Replace variable for {programdata}\\{companyname}\\{productname} changed to d drive.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.PROGRAMFILESREPLACE">
            <summary>
            Replace variable for C:\Program Files\, {programfiles}
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.PROGRAMFILESX86REPLACE">
            <summary>
            Replace variable for C:\Program Files (x86)\, {programfilesx86}
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.APPPROGRAMFILESREPLACE">
            <summary>
            Replace variable for C:\Program Files\{companyname}\{productname}
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.APPPROGRAMFILESX86REPLACE">
            <summary>
            Replace variable for C:\Program Files (x86)\{companyname}\{productname}
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.USERAPPDATAREPLACE">
            <summary>
            Replace variable for C:\Users\{userName}\AppData\Roaming\
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.USERAPPDATAPATHREPLACE">
            <summary>
            Replace variable for C:\Users\{userName}\AppData\Roaming\{companyname}\{productName}
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.IsNull(System.Object)">
            <summary>
            Checks if the string is null or empty whitespace. If it is it returns the NullString, if none supplied then it returns an empty string.
            </summary>
            <param name="IsNullStr">String to check</param>
            <returns>if string is null or empty whitespace returns NullString else returns the string</returns>
        </member>
        <member name="M:CMWME.C_Fx.IsNull(System.Object,System.String)">
            <summary>
            Checks if the string is null or empty whitespace. If it is it returns the NullString, if none supplied then it returns an empty string.
            </summary>
            <param name="IsNullStr">String to check</param>
            <param name="NullString">Alternate string</param>
            <returns>if string is null or empty whitespace returns NullString else returns the string</returns>
        </member>
        <member name="M:CMWME.C_Fx.nz(System.Object)">
            <summary>
            Checks if the string is null or empty whitespace. If it is it returns the NullString, if none supplied then it returns an empty string.
            </summary>
            <param name="IsNullStr">String to check</param>
            <returns>if string is null or empty whitespace returns NullString else returns the string</returns>
        </member>
        <member name="M:CMWME.C_Fx.nz(System.Object,System.String)">
            <summary>
            Checks if the string is null or empty whitespace. If it is it returns the NullString, if none supplied then it returns an empty string.
            </summary>
            <param name="IsNullStr">String to check</param>
            <param name="NullString">Alternate string</param>
            <returns>if string is null or empty whitespace returns NullString else returns the string</returns>
        </member>
        <member name="M:CMWME.C_Fx._nz(System.String,System.String)">
            <summary>
            Checks if the string is null or empty whitespace. If it is it returns the NullString, if none supplied then it returns an empty string.
            </summary>
            <param name="IsNullStr">String to check</param>
            <param name="NullString">Alternate string</param>
            <returns>if string is null or empty whitespace returns NullString else returns the string</returns>
        </member>
        <member name="M:CMWME.C_Fx.GetUniqueKey(System.Int32)">
            <summary>
            Creates a Random Text String that can be Used as a Key for Encryption
            </summary>
            <param name="maxSize">Max Size of String</param>
            <returns>Random Text String</returns>
        </member>
        <member name="M:CMWME.C_Fx.NewTreeNodeCollection">
            <summary>
            Initializes a tree View and returns the collection from the tree node
            </summary>
            <returns>Returns an empty TreeNodeCollection</returns>
        </member>
        <member name="M:CMWME.C_Fx.Add``1(System.Collections.Generic.IEnumerable{``0}@,``0)">
            <summary>
            Adds Object To Array
            </summary>
            <typeparam name="T">Type Of Array</typeparam>
            <param name="arr">Array To Add To</param>
            <param name="value">Object to Add To Array</param>
        </member>
        <member name="M:CMWME.C_Fx.GetRandomBytes(System.Int32)">
            <summary>
            Gets a Random Byte Array based on size given
            </summary>
            <param name="size">size of byte array to return</param>
        </member>
        <member name="M:CMWME.C_Fx.Format(System.String,System.Object[])">
            <summary>
            Converts null and blank values in the arguments to {null} and {blank}, then uses the traditional String.Format() to insert the 
            arguments into the Message. Used for string logs to know if a value came in null or blank.
            </summary>
            <param name="Message">Message to insert the arguments into using String.Format()</param>
            <param name="Args">Arguments to convert and pass onto the String.Format()</param>
        </member>
        <member name="M:CMWME.C_Fx.GetConfigValue``1(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Gets value from app.config, if missing replaces value with ConfigMissingValue (defaulted to null if not supplied). 
            Then converts the value given to the type of T. If T is type of string[] or IEnumerable&lt;string&gt; or List&lt;string&gt; 
            then value returned from the app.config will be split by comma into a string array.
            </summary>
            <typeparam name="T">Type to convert value from config to.</typeparam>
            <param name="ConfigName">Key name of config value to return</param>
            <param name="ConfigMissingValue">Value to return if config is missing.</param>
            <param name="AppConfigAssembly">Assembly that the app config is in, this is only necessary if the method 
            calling this method isn't in the right assembly to get the app config from, if that is the case pass in Assembly.GetExecutingAssembly().</param>
        </member>
        <member name="F:CMWME.C_Fx.lastAppAssembly">
            <summary>
            Stores the last app assembly passed to get config.
            </summary>
        </member>
        <member name="F:CMWME.C_Fx.lastConfig">
            <summary>
            Stores the last config file that was found in get config.
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetConfigValue(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Gets value from app.config, if missing replaces value with ConfigMissingValue (defaulted to null if not supplied).
            </summary>
            <param name="ConfigName">Key name of config value to return</param>
            <param name="ConfigMissingValue">Value to return if config is missing.</param>
            <param name="AppConfigAssembly">Assembly that the app config is in, this is only necessary if the method 
            calling this method isn't in the right assembly to get the app config from, if that is the case pass in Assembly.GetExecutingAssembly().</param>
        </member>
        <member name="M:CMWME.C_Fx.SetVariables(System.String)">
            <summary>
            Replaces variable names in string given using SetAppDataPath, SetAppDataDPath, SetProgramData, SetProductName, SetCompanyName, and SetTempDir.
            </summary>
            <param name="variable">String to replace variable names in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetProgramData(System.String)">
            <summary>
            Replaces the variable name within PROGRAMDATAREPLACE constant that exists in the string given with the value from GetProgramDataPath().
            </summary>
            <param name="path">String to replace the variable name in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetProductName(System.String)">
            <summary>
            Replaces the variable name within PRODUCTNAMEREPLACE constant that exists in the string given with the value from GetProductName().
            </summary>
            <param name="path">String to replace the variable name in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetCompanyName(System.String)">
            <summary>
            Replaces the variable name within COMPANYNAMEREPLACE constant that exists in the string given with the value from GetCompanyName().
            </summary>
            <param name="path">String to replace the variable name in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetComputerName(System.String)">
            <summary>
            Replaces the variable name within COMPUTERNAMEREPLACE constant that exists in the string given with the value from GetComputerName().
            </summary>
            <param name="path">String to replace the variable name in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetTempDir(System.String)">
            <summary>
            Replaces the variable name within TEMPDIRREPLACE constant that exists in the string given with the value from GetTempDir().
            </summary>
            <param name="path">String to replace the variable name in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetProgramFilesPath(System.String)">
            <summary>
            Replaces the variable name within PROGRAMFILESREPLACE constant that exists in the string with the value from
            GetProgramFilesPath();
            </summary>
            <param name="path">String path to replace in.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetProgramFilesX86Path(System.String)">
            <summary>
            Replaces the variable name within PROGRAMFILESX86REPLACE constant that exists in the string with the value from
            GetProgramFilesX86Path();
            </summary>
            <param name="path">String path to replace in.</param>
        </member>
        <member name="M:CMWME.C_Fx.GetProductName">
            <summary>
            Returns the product name of the Entry Assembly if null returns "UNKNOWN".
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetCompanyName">
            <summary>
            Returns the CompanyName of the Entry Assembly if null returns "UNKNOWN". 
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetProgramDataPath">
            <summary>
            Returns the ProgramData Environment Variable path on the local machine. If null returns "C:\ProgramData".
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetUserAppDataPath">
            <summary>
            Returns the app data environment variable path on the local machine. If null returns "C:\Users\{user}\AppData\Roaming".
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetComputerName">
            <summary>
            Returns the ComputerName Environment Variable value on the local machine. If null returns "UNKNOWN".
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetTempDir">
            <summary>
            Returns the Temp Environment Variable path on the location machine. If null returns "C:\Temp".
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetProgramFilesPath">
            <summary>
            Returns the Program Files path.
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.GetProgramFilesX86Path">
            <summary>
            Returns the Program Files x86 path.
            </summary>
        </member>
        <member name="M:CMWME.C_Fx.SetAppDataPath(System.String)">
            <summary>
            Returns updated string replacing the const value of APPDATADIRREPLACE in the path string with the app data path 
            which is made up of program data path, company name, and product name, then replaces c drive for d drive.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetAppDataDPath(System.String)">
            <summary>
            Returns updated string replacing the const value of APPDATADIRDREPLACE in the path string with the app data path 
            which is made up of program data path, company name, and product name, then replaces c drive for d drive.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetAppProgramFilesPath(System.String)">
            <summary>
            Returns updated string replacing the value in the const APPPROGRAMFILESREPLACE with the app data path which is made 
            up of program files path, company name, and product name.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetAppProgramFilesX86Path(System.String)">
            <summary>
            Returns updated string replacing the value in the const APPPROGRAMFILESX86REPLACE with the app data path which is made 
            up of program files x86 path, company name, and product name.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetUserAppDataPath(System.String)">
            <summary>
            Returns updated string replacing the value in the USERAPPDATAPATHREPLACE with the user app data path that is made 
            up of AppData path, company name, and productname.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="M:CMWME.C_Fx.SetUserAppData(System.String)">
            <summary>
            Returns updated string replacing the value in USERAPPDATAREPLACE with the user app data path made of 
            the environment AppData path.
            </summary>
            <param name="path">string to update.</param>
        </member>
        <member name="T:CMWME.Browser.IE">
            <summary>
            Contains Classes/Methods that pertain to Internet Explorer.
            </summary>
        </member>
        <member name="T:CMWME.Browser.IE.CompatiblityView">
            <summary>
            Get or Set Compatibility View Properties
            </summary>
        </member>
        <member name="F:CMWME.Browser.IE.CompatiblityView.CLEARABLE_LIST_DATA">
            <summary>
            Registry Location For the UserFilter 
            </summary>
        </member>
        <member name="F:CMWME.Browser.IE.CompatiblityView.UserHive">
            <summary>
            UserHive is The Base Hive to Look For the CLEARABLE_LIST_DATA Key in.
            </summary>
        </member>
        <member name="M:CMWME.Browser.IE.CompatiblityView.GetDomains">
            <summary>
            Gets list of sites or domains currently in the Compatiblity View
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMWME.Browser.IE.CompatiblityView.AddUserFilter(System.String)">
            <summary>
            Adds site or domain to IE Compatibility View
            </summary>
            <param name="domain">site or domain to add</param>
        </member>
        <member name="M:CMWME.Browser.IE.CompatiblityView.RemoveUserFilter(System.String)">
            <summary>
            Removes site or domain from IE Compatibility View
            </summary>
            <param name="domain">Site or domain to remove</param>
        </member>
        <member name="T:CMWME.C_Registry.C_RegEdit">
            <summary>
            Static functions to access the registry of the local machine.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.C_RegEdit.Software64RegKey">
            <summary>
            The root location for the 64 bit software registry key.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.C_RegEdit.Software32RegKey">
            <summary>
            The root location for the 32 bit software registry key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.C_RegEdit.UninstallKeyStruct">
            <summary>
            Dictionary values that represent the structure of the uninstall keys.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.C_RegEdit.BlockRedirection">
            <summary>
            By default this is true and any registry access will be forced to the appropriate bitness based on if the WOW6432Node is in the path.
            If set to false, will use the default application bitness.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.C_RegEdit.WriteNotFoundWarnings">
            <summary>
            If set to true, will right any error messages to the log as a warning. By default this is false and any errors will be 
            ignored and returned as either false or null depending on the function.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetHive(System.String)">
            <summary>
            Returns a RegHive type based on the string.
            </summary>
            <param name="path">The path do determine what type of hive type to return.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.DeleteValue(System.String,System.String)">
            <summary>
            Deletes a value from the registry key path given by the valueName given.
            </summary>
            <param name="path">Path to the registry key to delete.</param>
            <param name="valueName">valueName of the value to delete.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.DeleteValue(CMWME.C_Registry.RegHive,System.String,System.String)">
            <summary>
            Deletes a value from the registry key path given in the hive given by the valueName given.
            </summary>
            <param name="hive">Hive to find the registry key in.</param>
            <param name="path">Path to the registry key to find the value in to delete.</param>
            <param name="valueName">Value to delete in the registry key given.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.DeleteKey(System.String)">
            <summary>
            Deletes a key using the path given.
            </summary>
            <param name="path">Path to the key to delete.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.DeleteKey(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Deletes a key using the path in the hive given.
            </summary>
            <param name="hive">Hive to find the registry key in.</param>
            <param name="path">Path to the key to delete.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.SetRegistryValue(System.String,System.Object,CMWME.C_Registry.RegType,System.Boolean)">
            <summary>
            Creates or updates a registry value using the path. Using this override will assume valueName is in path. If createKey 
            is true and the path doesn't exist it will create it.
            </summary>
            <param name="path">Path to the registry key</param>
            <param name="value">Value to set the valueName to.</param>
            <param name="type">Type of value to create.</param>
            <param name="createKey">If set to true the path will be created if not exists.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.SetRegistryValue(System.String,System.String,System.Object,CMWME.C_Registry.RegType,System.Boolean)">
            <summary>
            Creates or updates a registry value using the path and value name given. If createKey is true and the path doesn't exist
            it will create it.
            </summary>
            <param name="path">Path to the registry key</param>
            <param name="valueName">Value name to create or update.</param>
            <param name="value">Value to set the valueName to.</param>
            <param name="type">Type of value to create.</param>
            <param name="createKey">If set to true the path will be created if not exists.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.SetRegistryValue(CMWME.C_Registry.RegHive,System.String,System.String,System.Object,CMWME.C_Registry.RegType,System.Boolean)">
            <summary>
            Creates or updates a registry value using the path and value name given. If createKey is true and the path doesn't exist
            it will create it.
            </summary>
            <param name="hive">Registry hive to find the key in.</param>
            <param name="path">Path to the registry key</param>
            <param name="valueName">Value name to create or update.</param>
            <param name="value">Value to set the valueName to.</param>
            <param name="type">Type of value to create.</param>
            <param name="createKey">If set to true the path will be created if not exists.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.getRegistryValueKind(CMWME.C_Registry.RegType)">
            <summary>
            Converts the custom RegType to Microsoft's built in RegistryValueKind.
            </summary>
            <param name="type">Custom RegType to convert from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyName(System.String)">
            <summary>
            Returns a comma delimited list of sub key names, in the registry path.
            </summary>
            <param name="path">Path to get the sub key names from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyName(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a comma delimited list of sub key names, in the registry path in the hive given.
            </summary>
            <param name="hive">Registry hive to find the path in.</param>
            <param name="path">Path to get the sub key names from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyNames(System.String)">
            <summary>
            Returns a list of sub key names from the registry using the path.
            </summary>
            <param name="path">Path to the registry key to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyNames(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a list of sub key names from the registry using the path and hive given.
            </summary>
            <param name="hive">Hive to find the registry key in.</param>
            <param name="path">Path to the registry key to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetValueNameFromPath(System.String@)">
            <summary>
            Parses the registry path and returns the ValueName, assuming the last value after the last \ is the ValueName.
            Also updates the path reference removing the ValueName.
            </summary>
            <param name="path">Path to get value name and removes the value name from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValue(System.String)">
            <summary>
            Get's a value from the key, using the path given. Using this override assumes the valueName is the last part of the path.
            </summary>
            <param name="path">Path to use to get the value from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValue(System.String,System.String)">
            <summary>
            Get's a value from the key, using the path given.
            </summary>
            <param name="path">Path to use to get the value from.</param>
            <param name="valueName">Name of value in the key to return.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValue(CMWME.C_Registry.RegHive,System.String,System.String)">
            <summary>
            Get's a value from the key, using the path given.
            </summary>
            <param name="hive">Registry hive to find the registry path in.</param>
            <param name="path">Path to use to get the value from.</param>
            <param name="valueName">Name of value in the key to return.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValues(System.String)">
            <summary>
            Returns all key values from the registry key path.
            </summary>
            <param name="path">Path to the key to get all the values from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValues(System.String,System.String)">
            <summary>
            Returns the key values from the registry key path that match the valueNameFind parameter.
            </summary>
            <param name="path">Path to the registry key, to get the values in.</param>
            <param name="valueNameFind">Value name to use to search the values.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValues(CMWME.C_Registry.RegHive,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the key values from the registry key path using the valueNames given parameter.
            </summary>
            <param name="hive">The hive to find the registry key in.</param>
            <param name="path">Path to the registry key, to get the values in.</param>
            <param name="valueNames">Values to get.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueName(System.String)">
            <summary>
            Gets the name of a value name of a registry key value, using wild cards in both the path and name to find it. Using this 
            override assumes the value name to find is the last part of the path.
            </summary>
            <param name="path">Path to find the value name.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueName(System.String,System.String)">
            <summary>
            Gets the name of a value name of a registry key value, using wild cards in both the path and name to find it. 
            </summary>
            <param name="path">Path to use to find the registry path.</param>
            <param name="valueNameFind">Value name to find can use * as wild card.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueName(CMWME.C_Registry.RegHive,System.String,System.String)">
            <summary>
            Gets the name of a value name of a registry key value, using wild cards in both the path and name to find it. 
            </summary>
            <param name="hive">Registry hive to find the path in.</param>
            <param name="path">Path to use to find the registry path.</param>
            <param name="valueNameFind">Value name to find can use * as wild card.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueNames(System.String)">
            <summary>
            Get's a list of value names in the path given. Both can use * as wild card.
            </summary>
            <param name="path">Path in the registry to find key.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueNames(System.String,System.String)">
            <summary>
            Get's a list of value names in the path given. Both can use * as wild card.
            </summary>
            <param name="path">Path in the registry to find key.</param>
            <param name="valueNameFind">ValueNames to find.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyValueNames(CMWME.C_Registry.RegHive,System.String,System.String)">
            <summary>
            Get's a list of value names in the path given. Both can use * as wild card.
            </summary>
            <param name="hive">Registry hive to find registry key in.</param>
            <param name="path">Path in the registry to find key.</param>
            <param name="valueNameFind">ValueNames to find.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyPath(System.String)">
            <summary>
            Returns a list of registry sub key paths delimited by comma.
            </summary>
            <param name="path">Registry key path to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyPath(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a list of registry sub key paths delimited by comma.
            </summary>
            <param name="hive">Hive to get the registry path in.</param>
            <param name="path">Registry key path to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyPaths(System.String)">
            <summary>
            Returns a list of registry sub key paths.
            </summary>
            <param name="path">Registry key path to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeyPaths(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a list of registry sub key paths.
            </summary>
            <param name="hive">Hive to get the registry path in.</param>
            <param name="path">Registry key path to get the sub keys from.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyName(System.String)">
            <summary>
            Returns the key name of registry key.
            </summary>
            <param name="path">Path of the registry key to get the name of.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKeyName(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns the key name of registry key.
            </summary>
            <param name="regHive">Registry hive to find the path in.</param>
            <param name="path">Path of the registry key to get the name of.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKey(System.String)">
            <summary>
            Returns a custom regKey class that contains a list of KeyValuePairs, that represents each keyValue.
            </summary>
            <param name="path">Path to the reg key.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetKey(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a custom regKey class that contains a list of KeyValuePairs, that represents each keyValue.
            </summary>
            <param name="hive">Registry hive to get the reg key from.</param>
            <param name="path">Path to the reg key.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeys(System.String)">
            <summary>
            Returns a list of RegKeys that represents the sub keys of the regKey path given. Each regKey class contains
            a list of KeyValuePairs that represents each keyValue.
            </summary>
            <param name="path">Path to the reg key.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetSubKeys(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Returns a list of RegKeys that represents the sub keys of the regKey path given. Each regKey class contains
            a list of KeyValuePairs that represents each keyValue.
            </summary>
            <param name="hive">Reg key hive to get the reg key from.</param>
            <param name="path">Path to the reg key.</param>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetUninstall32Keys(System.String)">
            <summary>
            Returns all uninstall keys found by display name, looking in 32 bit hive.
            </summary>
            <param name="displayName">Display name to look for.</param>
            <returns>Reg key collection that contains all the key value pairs for that reg key.</returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetUninstall64Keys(System.String)">
            <summary>
            Returns all uninstall keys found by display name, looking in 64 bit hive.
            </summary>
            <param name="displayName">Display name to look for.</param>
            <returns>Reg key collection that contains all the key value pairs for that reg key.</returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetUninstall32Keys">
            <summary>
            Returns all uninstall keys for the 32 bit registry hive.
            </summary>
            <returns>Reg key collections each one contains key value pairs for that registry key.</returns>
        </member>
        <member name="M:CMWME.C_Registry.C_RegEdit.GetUninstall64Keys">
            <summary>
            Returns all uninstall keys for the 64 bit registry hive.
            </summary>
            <returns>Reg key collections each one contains key value pairs for that registry key.</returns>
        </member>
        <member name="T:CMWME.C_Registry.IRegKey">
            <summary>
            Interface for the reg key class to allow other types of reg keys to be created.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.IRegKey.KeyName">
            <summary>
            Key name of the reg key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.IRegKey.KeyPath">
            <summary>
            Key path of the reg key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.IRegKey.Item(System.String)">
            <summary>
            Indexer to get the KeyValuePair from the list by name. If not found returns null.
            </summary>
            <param name="name">Name of the KeyValue to find.</param>
        </member>
        <member name="M:CMWME.C_Registry.IRegKey.GetSubKeys">
            <summary>
            Returns the sub keys of this registry key, if first run, gets directly from the registry.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.IRegKey.GetValue(System.String)">
            <summary>
            Get's the value of the KeyValuePair by name. If not found returns null.
            </summary>
            <param name="name">Name of the keyValuePair to find.</param>
        </member>
        <member name="T:CMWME.C_Registry.RegHive">
            <summary>
            Custom reg hive type. If used allows function to change the base hive when accessing the registry.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegHive.HKLM">
            <summary>
            Local Machine registry hive.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegHive.HKCU">
            <summary>
            Current user registry hive.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegHive.HKCR">
            <summary>
            Class root registry hive.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegHive.HKU">
            <summary>
            Users registry hive.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegHive.HKCC">
            <summary>
            Current config registry hive.
            </summary>
        </member>
        <member name="T:CMWME.C_Registry.RegistryFailureException">
            <summary>
            Represents a failure when accessing the registry of some kind.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegistryFailureException.#ctor(System.String)">
            <summary>
            Constructor for RegistryFailureException.
            </summary>
            <param name="message">Message to put in base exception.</param>
        </member>
        <member name="M:CMWME.C_Registry.RegistryFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for RegistryFailureException.
            </summary>
            <param name="message">Message to put in base exception.</param>
            <param name="inner">Inner exception to give to the base exception.</param>
        </member>
        <member name="T:CMWME.C_Registry.RegKey">
            <summary>
            Generic reg key that contains a list of Reg key value pairs. That represents the values within the reg key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.KeyHive">
            <summary>
            Registry hive that the reg key resides in.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.KeyName">
            <summary>
            Name of the key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.KeyPath">
            <summary>
            Registry path of the key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.Count">
            <summary>
            Get's the number of elements contained in the internal list.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.Item(System.Int32)">
            <summary>
            Get's the element of the specific index of the internal list.
            </summary>
            <param name="index">Index of the element to retrieve.</param>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.#ctor(CMWME.C_Registry.RegHive,System.String)">
            <summary>
            Constructor of the reg key, setting the value sof the KeyHive, KeyName, and KeyPath.
            </summary>
            <param name="hive"></param>
            <param name="keyPath"></param>
        </member>
        <member name="P:CMWME.C_Registry.RegKey.Item(System.String)">
            <summary>
            Returns the reg key value pair, based of the name of the value pair.
            </summary>
            <param name="name">Name to find.</param>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.ClearCache">
            <summary>
            Clears the sub key cache.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.GetSubKeys">
            <summary>
            The first time this is ran, will search the registry for any sub keys of the current registry key. If none found returns null.
            This data is cached, and if ran a second time returns the same data. If needs refreshed run ClearCache.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.Add(System.String,System.String)">
            <summary>
            Adds new reg key value pairs to the internal list.
            </summary>
            <param name="name">Name of the reg key value pair.</param>
            <param name="value">Value of the reg key value pair.</param>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.AddRange(System.Collections.Generic.IEnumerable{CMWME.C_Registry.RegKeyValuePair})">
            <summary>
            Adds a list of reg key value pairs to the internal list.
            </summary>
            <param name="list">List to add</param>
        </member>
        <member name="M:CMWME.C_Registry.RegKey.GetEnumerator">
            <summary>
            Enumerator of internal list.
            </summary>
        </member>
        <member name="T:CMWME.C_Registry.RegKeyCollection">
            <summary>
            Represents a registry key collection of type of generic reg keys.
            </summary>
        </member>
        <member name="T:CMWME.C_Registry.RegKeyCollection`1">
            <summary>
            Base class for registry key collections, this allows the list type of RegKey to be changed to different types
            of custom reg keys. The type must inherit the type of IRegKey.
            </summary>
            <typeparam name="T">Type to change the list to, must inherit type of IRegKey.</typeparam>
        </member>
        <member name="P:CMWME.C_Registry.RegKeyCollection`1.Item(System.String)">
            <summary>
            Finds the regKey by name. If none found, returns null.
            </summary>
            <param name="name">Name of the reg key to find.</param>
        </member>
        <member name="P:CMWME.C_Registry.RegKeyCollection`1.Item(System.Int32)">
            <summary>
            Get's the element at a specific index.
            </summary>
            <param name="index">Index to get the element of.</param>
        </member>
        <member name="P:CMWME.C_Registry.RegKeyCollection`1.Count">
            <summary>
            Get's the number of elements contained in the internal list.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegKeyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through internal list.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegKeyCollection`1.Add(`0)">
            <summary>
            Adds item to the end of the internal list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="T:CMWME.C_Registry.RegKeyValuePair">
            <summary>
            Represents a registry key Value Name and Value pair.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKeyValuePair.Name">
            <summary>
            Value name of the KeyValuePair.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.RegKeyValuePair.Value">
            <summary>
            Value of the KeyValuePair.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.RegKeyValuePair.GetValue``1">
            <summary>
            Converts the value to the given type. Currently the only type that is built in is int, but more can be added.
            </summary>
            <typeparam name="T">Type to convert the value to.</typeparam>
        </member>
        <member name="T:CMWME.C_Registry.RegType">
            <summary>
            Custom reg type, to prevent the need for Microsoft's built in type, that will determine the type of registry key usually 
            used during set reg key.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_SZ">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_DWORD">
            <summary>
            DWord type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_BINARY">
            <summary>
            Binary type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_DWORD_LITTLE_ENDIAN">
            <summary>
            DWord Little ENDIAN type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_DWORD_BIG_ENDIAN">
            <summary>
            DWord Big ENDIAN type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_EXPAND_SZ">
            <summary>
            Expand string type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_LINK">
            <summary>
            Link type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_MULTI_SZ">
            <summary>
            Multi string type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_NONE">
            <summary>
            Default none type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_QWORD">
            <summary>
            QWord type.
            </summary>
        </member>
        <member name="F:CMWME.C_Registry.RegType.REG_QWORD_LITTLE_ENDIAN">
            <summary>
            QWord Little ENDIAN type.
            </summary>
        </member>
        <member name="T:CMWME.C_Registry.UninstallKeyStructure">
            <summary>
            Dictionary values that represent the structure of the uninstall keys.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.KeyPath64">
            <summary>
            64 bit registry path to the 64 bit software uninstall keys.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.KeyPath32">
            <summary>
            32 bit registry path to the 32 bit software uninstall keys.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.DisplayName">
            <summary>
            Value name for the DisplayName value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.DisplayVersion">
            <summary>
            Value name for DisplayVersion value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.Publisher">
            <summary>
            Value name for Publisher value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.InstallDate">
            <summary>
            Value name for InstallDate value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.UninstallString">
            <summary>
            Value name for UninstallString value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.EstimatedSize">
            <summary>
            Value name for EstimatedSize value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.InstallLocation">
            <summary>
            Value name for InstallLocation value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.InstallSource">
            <summary>
            Value name for InstallSource value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.ModifyPath">
            <summary>
            Value name for ModifyPath value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.NoModify">
            <summary>
            Value name for NoModify value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.NoRepair">
            <summary>
            Value name for NoRepair value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.QuietUninstallString">
            <summary>
            Value name for QuietUninstallString value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.Comments">
            <summary>
            Value name for Comments value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.VersionMajor">
            <summary>
            Value name for VersionMajor value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.VersionMinor">
            <summary>
            Value name for VersionMinor value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.WindowsInstaller">
            <summary>
            Value name for WindowsInstaller value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.HelpLink">
            <summary>
            Value name for HelpLink value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.HelpTelephone">
            <summary>
            Value name for HelpTelephone value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.URLInfoAbout">
            <summary>
            Value name for URLInfoAbout value in each uninstall key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallKeyStructure.SystemComponent">
            <summary>
            Value name for SystemComponent value in each uninstall key.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.UninstallKeyStructure.#ctor">
            <summary>
            Generates the data for the UninstallKeyStructure.
            </summary>
        </member>
        <member name="T:CMWME.C_Registry.UninstallRegKey">
            <summary>
            Class representing an Uninstall registry key.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.DisplayName">
            <summary>
            Value for the DisplayName keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.DisplayVersion">
            <summary>
            Value for DisplayVersion keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.Publisher">
            <summary>
            Value for Publisher keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.InstallDate">
            <summary>
            Value for InstallDate keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.UninstallString">
            <summary>
            Value for UninstallString keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.EstimatedSize">
            <summary>
            Value for EstimatedSize keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.InstallLocation">
            <summary>
            Value for InstallLocation keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.InstallSource">
            <summary>
            Value for InstallSource keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.ModifyPath">
            <summary>
            Value for ModifyPath keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.NoModify">
            <summary>
            Value for NoModify keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.NoRepair">
            <summary>
            Value for NoRepair keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.QuietUninstallString">
            <summary>
            Value for QuietUninstallString keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.Comments">
            <summary>
            Value for Comments keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.VersionMajor">
            <summary>
            Value for VersionMajor keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.VersionMinor">
            <summary>
            Value for VersionMinor keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.WindowsInstaller">
            <summary>
            Value for WindowsInstaller keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.HelpLink">
            <summary>
            Value for HelpLink keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.HelpTelephone">
            <summary>
            Value for HelpTelephone keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.URLInfoAbout">
            <summary>
            Value for URLInfoAbout keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="P:CMWME.C_Registry.UninstallRegKey.SystemComponent">
            <summary>
            Value for SystemComponent keyValuePair in the uninstall key, if not present returns null.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.UninstallRegKey.#ctor(CMWME.C_Registry.RegKey)">
            <summary>
            Converts the Reg key to an uninstall reg key.
            </summary>
            <param name="key">Key to convert.</param>
        </member>
        <member name="T:CMWME.C_Registry.UninstallRegKeyCollection">
            <summary>
            List of UninstallRegKeys, that represent the returned uninstall reg keys.
            </summary>
        </member>
        <member name="M:CMWME.C_Registry.UninstallRegKeyCollection.#ctor">
            <summary>
            Base constructor, that creates empty uninstall reg key collection.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorker.SetTriggeringControl(System.Windows.Forms.Control)">
            <summary>
            Sets the control will enable on complete, and is disabled on set.
            </summary>
            <param name="ctrl">Control that will be disabled or enabled.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorker.SetTriggeringControl(System.Windows.Controls.Control)">
            <summary>
            Sets the control will enable on complete, and is disabled on set.
            </summary>
            <param name="ctrl">Control that will be disabled or enabled.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorker.EnableTriggeringControl">
            <summary>
            Enables control that was given in SetTriggeringControl.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorker.DisableTriggeringControl">
            <summary>
            Disables control that was given in SetTriggeringControl.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerCollection.SetTriggeringControl(System.String,System.Object)">
            <summary>
            Sets the control will enable on complete, and is disabled on set.
            </summary>
            <param name="name">Name of the background worker to set.</param>
            <param name="ctrl">Control that will be disabled or enabled.</param>
        </member>
        <member name="T:CMWME.C_Threading.BGWorkerControler">
            <summary>
            BackGroundWorker controller, manages a collection of backdground workers and any form objects that are used within the worker.
            </summary>
        </member>
        <member name="F:CMWME.C_Threading.BGWorkerControler.WORKERTIMEOUT">
            <summary>
            Default timeout for the worker when canceling and no timeout given.
            </summary>
        </member>
        <member name="F:CMWME.C_Threading.BGWorkerControler.WORKERNAME">
            <summary>
            Default name of worker when creating. If non given will use this name to get the main worker.
            </summary>
        </member>
        <member name="F:CMWME.C_Threading.BGWorkerControler._bw">
            <summary>
            Amount of time before attempting to kill worker. When attempting to reset or cancel worker.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.SetWorker(System.Action,System.Action,System.Action)">
            <summary>
            If worker is busy, will throw a C_Exception. Otherwise will reset the current background worker and set the DoWork, Completed, and ReportProgress transactions given.
            Using the default worker.
            </summary>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.SetWorker(System.String,System.Action,System.Action,System.Action)">
            <summary>
            If worker is busy, will throw a C_Exception. Otherwise will reset the current background worker and set the DoWork, Completed, and ReportProgress transactions given.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of worker to set, used to get the correct worker.</param>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.SetWorker(System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            If worker is busy, will throw a C_Exception. Otherwise will reset the current background worker and set the DoWork, Completed, and ReportProgress transactions given.
            Using the default worker.
            </summary>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.SetWorker(System.String,System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            If worker is busy, will throw a C_Exception. Otherwise will reset the current background worker and set the DoWork, Completed, and ReportProgress transactions given.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of worker to set, used to get the correct worker.</param>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.StartWorker(System.Action,System.Action,System.Action,System.Object)">
            <summary>
            Runs Set worker with the given parameters and then starts the background worker.
            Using the default worker.
            </summary>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
            <param name="TriggeringControl">Control to disable on start and enable on complete.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.StartWorker(System.String,System.Action,System.Action,System.Action,System.Object)">
            <summary>
            Runs Set worker with the given parameters and then starts the background worker.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
            <param name="TriggeringControl">Control to disable on start and enable on complete.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.StartWorker(System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler,System.Object)">
            <summary>
            Runs Set worker with the given parameters and then starts the background worker.
            Using the default worker.
            </summary>
            <param name="TriggeringControl">Control to disable on start and enable on complete.</param>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.StartWorker(System.String,System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.ComponentModel.ProgressChangedEventHandler,System.Object)">
            <summary>
            Runs set worker with the given parameters and then starts the background worker.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
            <param name="DoWork">Do work action that will be ran when Worker is started.</param>
            <param name="Completed">Completed event that is ran when worker is completed.</param>
            <param name="ReportProgress">ReportProgress event that is ran when BackgroundWorker.ReportProgress even is ran during the DoWork event.</param>
            <param name="TriggeringControl">Control to disable on start and enable on complete.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.StartWorker(System.String,System.Object)">
            <summary>
            Runs Set worker with the given parameters and then starts the background worker.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
            <param name="TriggeringControl">Control to disable on start and enable on complete.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.WorkerBusy">
            <summary>
            Returns true if worker is currently processing.
            Using the default worker.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.WorkerBusy(System.String)">
            <summary>
            Returns true if worker is currently processing.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.AnyWorkerBusy">
            <summary>
            Returns true if any worker inside the worker collection is busy.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.CancelWorker(System.Int32)">
            <summary>
            Cancels worker, if worker doesn't cancel within the time the WorkerTimeout parameter given (Milliseconds). Will dispose the worker.
            Using the default worker.
            If no WorkerTimeout parameter given will use the default value for WORKERTIMEOUT const (Milliseconds).
            </summary>
            <param name="WorkerTimeout">Amount of time to wait after cancel before killing the worker.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.CancelWorker(System.String,System.Int32)">
            <summary>
            Cancels worker, if worker doesn't cancel within the time the WorkerTimeout parameter given (Milliseconds). Will dispose the worker.
            Using the name of the worker given, to get the worker from the collection.
            If no WorkerTimeout parameter given will use the default value for WORKERTIMEOUT const (Milliseconds).
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
            <param name="WorkerTimeout">Amount of time to wait after cancel before killing the worker.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.CancelAllWorkers(System.Int32)">
            <summary>
            Cancels all workers in the collection. If all workers don't cancel within the time the WorkerTimeout parameter given (Milliseconds). Will dispose the workers.
            If no WorkerTimeout parameter given will use the default value from WORKERTIMEOUT const (Milliseconds).
            </summary>
            <param name="WorkerTimeout">Amount of time to wait after cancel before killing the worker.</param>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.WorkerCount">
            <summary>
            Returns the total count of the workers in the collection.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.ActiveWorkerCount">
            <summary>
            Returns the count of workers that are still active.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.CancelWorkerAsync">
            <summary>
            Runs the CancelAsync function on the background worker.
            Using the default worker.
            </summary>
        </member>
        <member name="M:CMWME.C_Threading.BGWorkerControler.CancelWorkerAsync(System.String)">
            <summary>
            Runs the CancelAsync function on the background worker.
            Using the name of the worker given, to get the worker from the collection.
            </summary>
            <param name="Name">Name of the worker that is being sent to the background worker.</param>
        </member>
        <member name="T:CMWME.C_Windows.ActiveDirectory.ADContext">
            <summary>
            Active directory context, allows access to active directory through indirect connections.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.ActiveDirectory.ADContext.ValidateUser(System.String,System.String,System.String)">
            <summary>
            Validates that the user is a valid user and password is correct.
            </summary>
            <param name="userId">User id of user.</param>
            <param name="password">Password of password, this is sent as un-secure string. Please consider securing it.</param>
            <param name="domain">Domain of user.</param>
        </member>
        <member name="M:CMWME.C_Windows.ActiveDirectory.ADContext.ValidateUser(System.String,System.Byte[],System.String)">
            <summary>
            Validates that the user is a valid user and password is correct.
            </summary>
            <param name="userId">User id of user.</param>
            <param name="password">Password of password, this is sent as un-secure byte array. Please consider securing it.</param>
            <param name="domain">Domain of user.</param>
        </member>
        <member name="M:CMWME.C_Windows.ActiveDirectory.ADContext.ValidateUser(System.String,System.Security.SecureString,System.String)">
            <summary>
            Validates that the user is a valid user and password is correct.
            </summary>
            <param name="userId">User id of user.</param>
            <param name="password">Secure password of password.</param>
            <param name="domain">Domain of user.</param>
        </member>
        <member name="T:CMWME.C_Windows.RebootManager">
            <summary>
            Manages windows reboots. This class can check if a reboot is needed and reboot the pc.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.IsRebootNeeded">
            <summary>
            Runs IfPendingFileRenameSet, IsWindowsUpdateRebootSet, and IsComponentBasedRebootSet and returns true if
            any one of them returns true.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.IsPendingFileRenameSet">
            <summary>
            Checks if a PendingFileRenameOperations value is set in the Session Manager key and returns true if set. 
            Other wise returns false.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.IsWindowsUpdateRebootSet">
            <summary>
            checks if there is a RebootPending key in the WindowsUpdate\Auto Update key. If there is returns true.
            else returns false.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.IsComponentBasedRebootSet">
            <summary>
            Checks if there is a RebootPending key in the Component Based Servicing key and returns true if set. 
            Other wise returns false.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.RebootPCForceIfHung(CMWME.C_Windows.ShutdownReason,System.Int32)">
            <summary>
            Sends reboot command to PC. 
            </summary>
            <param name="reason">Reason why shutdown was initated. ShutdownReason enumeration within the CMWME.C_Windows namespace. </param>
            <param name="timeout">Amount of time to delay the shutdown in seconds. Defaulted to 10. If a value of 0 given then attempts to do an imediate shutdown.</param>
            <exception cref="T:CMWME.RebootFailedException">Exception thrown if reboot fails.</exception>
            <exception cref="T:CMWME.NoRebootPermissionsException">Exception thrown if fails to enable shutdown privileges.</exception>
        </member>
        <member name="T:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows">
            <summary>
            Used in ExitWindowsEx as the shutdown type.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.LogOff">
             <summary>
             Shuts down all processes running in the logon session of the process that called the ExitWindowsEx function. 
             Then it logs the user off.
            
            This flag can be used only by processes running in an interactive user's logon session.
             </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.ShutDown">
             <summary>
             Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, 
             and all running processes have stopped.
            <para />
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
            <para/>
            Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify 
            EWX_POWEROFF to do this.
            <para/>
            Windows XP with SP1:  If the system supports the power-off feature, specifying this flag turns off the power.
             </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.Reboot">
             <summary>
             Shuts down the system and then restarts the system.
            <para/>
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
             </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.PowerOff">
             <summary>
             Shuts down the system and turns off the power. The system must support the power-off feature.
            <para/>
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
             </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.RestartApps">
            <summary>
            Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the 
            RegisterApplicationRestart function. These application receive the WM_QUERYENDSESSION message with lParam set to the 
            ENDSESSION_CLOSEAPP value. For more information, see Guidelines for Applications.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.Force">
            <summary>
            This flag has no effect if terminal services is enabled. Otherwise, the system does not send the WM_QUERYENDSESSION message. 
            This can cause applications to lose data. Therefore, you should only use this flag in an emergency.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows.ForceIfHung">
            <summary>
            Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message within the timeout interval. 
            For more information, see the Remarks.
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags">
            <summary>
            Used in the function InitiateShutdown for the parameter dwShutdownFlags, to let the function know how to shutdown the pc.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_FORCE_OTHERS">
            <summary>
            All sessions are forcefully logged off. If this flag is not set and users other than the current user are 
            logged on to the computer specified by the lpMachineName parameter, this function fails with a return value 
            of ERROR_SHUTDOWN_USERS_LOGGED_ON.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_FORCE_SELF">
            <summary>
            Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session 
            is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_GRACE_OVERRIDE">
            <summary>
            Overrides the grace period so that the computer is shut down immediately.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_HYBRID">
             <summary>
             Beginning with InitiateShutdown running on Windows 8, you must include the SHUTDOWN_HYBRID flag with one or more of 
             the flags in this table to specify options for the shutdown.
            <para/>
             Beginning with Windows 8, InitiateShutdown always initiate a full system shutdown if the SHUTDOWN_HYBRID flag is absent.
             </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_INSTALL_UPDATES">
            <summary>
            The computer installs any updates before starting the shutdown.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_NOREBOOT">
            <summary>
            The computer is shut down but is not powered down or rebooted.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_POWEROFF">
            <summary>
            The computer is shut down and powered down.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_RESTART">
            <summary>
            The computer is shut down and rebooted.
            </summary>
        </member>
        <member name="F:CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags.SHUTDOWN_RESTARTAPPS">
            <summary>
            The system is rebooted using the ExitWindowsEx function with the EWX_RESTARTAPPS flag. This restarts any applications that 
            have been registered for restart using the RegisterApplicationRestart function.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.NativeMethods.ExitWindowsEx(CMWME.C_Windows.RebootManager.NativeMethods.ExitWindows,CMWME.C_Windows.ShutdownReason)">
             <summary>
             Logs off the interactive user, shuts down the system, or shuts down and restarts the system. It sends the WM_QUERYENDSESSION 
             message to all applications to determine if they can be terminated.
             
             For more information see https://msdn.microsoft.com/en-us/library/windows/desktop/aa376868(v=vs.85).aspx
             </summary>
             <param name="uFlags">The shutdown type.</param>
             <param name="dwReason">
             The reason for initiating the shutdown. This parameter must be one of the system shutdown reason codes.
            
            If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code will not be set and therefore the default action is an undefined 
            shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how 
            the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can 
            delay shutdown. Therefore, do not use zero for this parameter.
            </param>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.NativeMethods.InitiateShutdown(System.String,System.String,System.UInt32,CMWME.C_Windows.RebootManager.NativeMethods.ShutdownFlags,CMWME.C_Windows.ShutdownReason)">
             <summary>
             Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.
             </summary>
             <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is NULL, the local computer is shut down.</param>
             <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
             <param name="dwGracePeriod">
             The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is 
             limited to MAX_SHUTDOWN_TIMEOUT.
            <para/>
            If the value of this parameter is greater than zero, and the dwShutdownFlags parameter specifies the flag SHUTDOWN_GRACE_OVERRIDE, the function fails and returns 
            the error code ERROR_BAD_ARGUMENTS.
             </param>
             <param name="dwShutdownFlags">One or more bit flags that specify options for the shutdown. The following values are defined.</param>
             <param name="dwReason">
             The reason for initiating the shutdown. This parameter must be one of the system shutdown reason codes. If this parameter is zero, the default is an undefined 
             shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, 
             an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.
             </param>
        </member>
        <member name="M:CMWME.C_Windows.RebootManager.NativeMethods.TokenAdjuster.EnablePrivilege(System.String,System.Boolean)">
            <summary>
            Sets appropriate permissions and returns true if was sucessful.
            </summary>
            <param name="lpszPrivilege">Privliage Name ie: SeShutdownPrivilege for shutdown privlage.</param>
            <param name="bEnablePrivilege">Whether or not to enable or disable the permission.</param>
        </member>
        <member name="T:CMWME.C_Windows.ShellExecute">
            <summary>
            Executes a process externally of the current process.
            </summary>
        </member>
        <member name="E:CMWME.C_Windows.ShellExecute.ShellOutputReceived">
            <summary>
            Event to receive output from the process.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.ExitCode">
            <summary>
            Exit code that the execution returns. By default is set to null.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.ProcessId">
            <summary>
            Process id for the process that started.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.WaitTimeout">
            <summary>
            Default wait timeout when waitForExit is true. Set to 0 if you don't want it to timeout.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.WriteWarningOnTimout">
            <summary>
            If timeout is hit then will be written to the logger as a warning.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.ThrowExceptionOnTimeout">
            <summary>
            If timeout is hit then exception will be thrown.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.FileName">
            <summary>
            Name of file given in the new of the ShellExecute.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.FileExt">
            <summary>
            Extension of the file given in the new of the ShellExecute.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.FileDir">
            <summary>
            Directory to the file given in the new of the ShellExecute.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.FullFilePath">
            <summary>
            /Full file path of the file given in the new of the ShellExecute.
            </summary>
        </member>
        <member name="P:CMWME.C_Windows.ShellExecute.ProcessName">
            <summary>
            Name of the process that is started by the ShellExecute.Start.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.ShellExecute.#ctor(System.String)">
            <summary>
            Initializes the ShellExecute class, with the filePath given. If the filePath isn't found 
            with System.IO.File, uses the Path environment variable to find the file. If file not found
            an exception is thrown.
            </summary>
            <param name="filePath">Full path to a file, can use files within the current path or path variable without the full path.</param>
        </member>
        <member name="M:CMWME.C_Windows.ShellExecute.Start(System.Boolean,System.Boolean,System.String[])">
            <summary>
            Starts a process of the file given in the new of ShellExecute. 
            </summary>
            <param name="showWindow">Whether or not to show the window of the process.</param>
            <param name="waitForExit">Whether or not to wait for the process to finish before exiting the function.</param>
            <param name="args">Arguments supplied to the process.</param>
        </member>
        <member name="M:CMWME.C_Windows.ShellExecute.GetShellOutput(System.Boolean)">
            <summary>
            Get's the output of the executable.
            </summary>
            <param name="raw">Whether or not to get a formated output or raw.</param>
        </member>
        <member name="T:CMWME.C_Windows.C_Win32">
             <summary>
               Static class to help Start a GUI/Console Windows Process as any user that is logged-in to an Interactive Terminal-Session (e.g. RDP).<para/>
               Console-type processes when created with a new console, don't always write to the redirected stdOutput and stdError.
               To fix this, the application executed should always detach from its current console (if any), and
               call AttachConsole(-1) to attach to the console of the parent process.
            
               <para/>
                 [DllImport("kernel32.dll")]
                 static extern bool FreeConsole();
            
                 [DllImport("kernel32.dll")]
                 static extern bool AttachConsole(uint dwProcessID);
               <para/>
             </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.getSessionUserToken(CMWME.C_Windows.C_Win32.SafeUserTokenHandle@,System.String)">
            <summary>
              Gets the user token from the currently active session. Application must be running within the context of the LocalSystem Account.
             </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.HasLoggedInUsers">
            <summary>
            Verifies user is logged in.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.IsProcessInActiveConsole">
            <summary>
            Gets the current process id then uses the process id to convert to session id. Then compares the session id to the active console session id.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.StartProcessAsCurrentUser(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Starts a Process as the last logged-in user that is currently active. If successful returns process id of process. If 
               fails to get process id or process fails to fully start process id will return -1.
            
               <para>
                 Example:
                 psexec -ids powershell.exe
                 Add-Type -Path .\src\ProcessExtensions.cs
                 [murrayju.ProcessExtensions]::StartProcessAsCurrentUser("C:\Windows\System32\cmd.exe", "cmd.exe /K echo running");
               </para>
             </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.StartProcessAsUser(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
             <summary>
               Starts a Process as any logged-in user with an active or disconnected session.
            
               <para>
                 Example:
                 psexec -ids powershell.exe
                 Add-Type -Path .\src\ProcessExtensions.cs
                 [murrayju.ProcessExtensions]::StartProcessAsUser("Mailin", "D:\RENE\XmlImport\ReneXmlImport.exe", "ReneXmlImport.exe D:\RENE\Data\Import\Adj_Selling_Price_3001.xml");
               </para>
             </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.CreatePipe(Microsoft.Win32.SafeHandles.SafeFileHandle@,Microsoft.Win32.SafeHandles.SafeFileHandle@,System.Boolean)">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs,64d2d72d3ee2e6f9
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.C_Win32.CreatePipeWithSecurityAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle@,Microsoft.Win32.SafeHandles.SafeFileHandle@,CMWME.C_Windows.C_Win32.NativeMethods.SECURITY_ATTRIBUTES,System.Int32)">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs,9136e8bd1abc4d01
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.C_Win32.NativeMethods">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/compmod/microsoft/win32/NativeMethods.cs
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.C_Win32.SafeNativeMethods">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/compmod/microsoft/win32/SafeNativeMethods.cs
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.C_Win32.UnsafeNativeMethods">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/compmod/microsoft/win32/UnsafeNativeMethods.cs
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.C_Win32.SafeUserTokenHandle">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/compmod/microsoft/win32/safehandles/SafeUserTokenHandle.cs
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.ExternDll">
            <summary>
              Implementation from: http://referencesource.microsoft.com/#System/misc/externdll.cs
            </summary>
        </member>
        <member name="T:CMWME.C_Windows.GroupPolicy.GroupPolicyLookup">
            <summary>
            WMI group policy lookup functions.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.GroupPolicy.GroupPolicyLookup.IsInOU(System.String)">
            <summary>
            Uses WME to check the local machine to see if in appropriate OU and returns true.
            </summary>
            <param name="ouName">OU to check.</param>
            <exception cref="T:CMWME.C_Windows.GroupPolicy.AccessDeniedException">Thrown when the application doens't have the appropriate admin access to get the data needed.</exception>
        </member>
        <member name="T:CMWME.C_Windows.GroupPolicy.AccessDeniedException">
            <summary>
            Denotes that the application was unable to access the group policy wmi.
            </summary>
        </member>
        <member name="M:CMWME.C_Windows.GroupPolicy.AccessDeniedException.#ctor(System.String)">
            <summary>
            Initializes AccessDeniedException with an error message.
            </summary>
            <param name="message">Error message for the exception</param>
        </member>
        <member name="M:CMWME.C_Windows.GroupPolicy.AccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes AccessDeniedException with an error message and inner exception.
            </summary>
            <param name="message">Error message for the exception</param>
            <param name="inner">Inner exception to add to the base excepion.</param>
        </member>
        <member name="T:CMWME.Linq.LinqExtenstions">
            <summary>
            Has custom built Linq Extenstions.
            </summary>
        </member>
        <member name="M:CMWME.Linq.LinqExtenstions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates each item running action on each item.
            </summary>
            <param name="itemArr">List of items to preform action on.</param>
            <param name="action">Action to preform on item.</param>
        </member>
        <member name="T:CMWME.LogLib.Audit">
            <summary>
            Audit class for the logs. List specific audit messages for the logs to output.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.Audit.#ctor">
            <summary>
            Constructor for the Audit class.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.Audit.Messages">
            <summary>
            Audit messages for the logs.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.Audit.AuditFoundTime">
            <summary>
            What time the audit was added.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.Audit.Count">
            <summary>
            Count of audit messages in the current class.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.Audit.AddMesage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a specific audit message to the class.
            </summary>
            <param name="msg">Message to add to the class.</param>
        </member>
        <member name="T:CMWME.LogLib.CustomAudit">
            <summary>
            Custom Audit Messages class. This class allows the user to input a custom audit messages with a specific name and store each one seporatly which is printed out in a seporate queue in the log.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.CustomAudit.#ctor">
            <summary>
            Constructor for the custom audit messages.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.CustomAudit.Name">
            <summary>
            Name of custom audit message queue.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.CustomAudit.Messages">
            <summary>
            Messages for the custom audit queue.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.CustomAudit.AuditFoundTime">
            <summary>
            Time the custom audit message was added.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.CustomAudit.Count">
            <summary>
            Count of the custom audit messages.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.CustomAuditCollection">
            <summary>
            Collection for the custom audit messages.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.CustomAuditCollection.Item(System.String)">
            <summary>
            indexer for getting a specific custom audit message with the specific name.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CMWME.LogLib.CustomAuditCollection.AddMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a message with the specific custom audit message.
            </summary>
            <param name="cName">Name of the custom audit message.</param>
            <param name="msgs">Messages to add to the custom audit.</param>
        </member>
        <member name="T:CMWME.LogLib.ILogsClass">
            <summary>
            Interface for the LogClass to limit what public Methods are available in the LogFx class.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogWriteType">
            <summary>
            Dictates what type of log messages is written. To change how or if the specific type of log writes it's
            log messages please update the settings.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogWriteType.Error">
            <summary>
            Logs are written as an error type.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogWriteType.Warning">
            <summary>
            Logs are written as a warning type.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogWriteType.Info">
            <summary>
            Logs are written as an info type.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogWriteType.Debug">
            <summary>
            Logs are written as a debug type.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogWriteType.Success">
            <summary>
            Logs are written as a success type.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogsState">
            <summary>
            Current state of the Logs in the Log Class.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsState.CLOSED">
            <summary>
            Logs are currently closed or not started, this is set during the close method of the logs.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsState.IDLE">
            <summary>
            Logs are currently idle awaiting more writes, set a write is done in the logs.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsState.BUSY">
            <summary>
            Logs are currently busy writing logs. Set at the beginning of any write.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogsClass">
            <summary>
            This class automates Log writing. Writes event logs, physical logs, email logs, and both console and debug writes.
            Depending on the arguments for the methods will write to different logs each time. This can be used as a stand alone
            object or utilize LogFx class to run the commands to create, write, audit and close/send the logs, the LogFx allows
            you to run the commands without having to store the LogClass object in a your own property, it stores it in it's own property 
            which allows it to be ran on demand from any point of your code.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass.APPLICATIONSOURCE">
            <summary>
            Default Event log source, if none given or if it fails as the source given. -- Read Only
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass.APPLICATIONLOG">
            <summary>
            Default Event log, if none given or if it fails as the source given. -- Read Only
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.Settings">
            <summary>
            Settings of the Logs to write. Change the properties of this in order to disable specific log writes or
            change colors, log types, defaults, etc. This property is initialized during load of the LogClass and only
            the properties can be changed of the object.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.Errors">
            <summary>
            List of Errors that have been added to the LogClass. Use AddError or UpdateLog with error flag to add to this object. --Read Only 
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._errors">
            <summary>
            Private store for list of Errors.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.LogsCreated">
            <summary>
            This is the initial parameter given in the LogFx.CreateLogs; which determines what logs to created and written.
            This cannot be changed, LogFx.CreateLogs will need ran again to change what logs created, or written to.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.LogsInfo">
            <summary>
            Contains each logs info of when it started, when it was closed, how long it ran and if the log had a failure. 
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._logsInfo">
            <summary>
            Private store for LogsInfo.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.EmailBody">
            <summary>
            Current Body of Email. This is built by updating the log and adding errors.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._emailLogWriter">
            <summary>
            Private EmailBody container, used to build the EmailBody.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.EmailSubject">
            <summary>
            Subject of the e-mail that will be sent. Set during the create log methods.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.EmailSendTo">
            <summary>
            Email address e-mail log is sent to. This property is set during the create log methods.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.EmailMessageType">
            <summary>
            The e-mail type that will be sent, set up during create log methods.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.PhysicalLogFullPath">
            <summary>
            Full path of the physical log file, set up during create log methods.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._physicalLogWriter">
            <summary>
            Private log file stream store, houses the stream used to write the physical log.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._eventLogWriter">
            <summary>
            Private event log store, houses the object that is used to write the event logs.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.CustomAuditLogs">
             <summary>
             Custom Audit Logs store, this will write an audit log to the logs with a custom name 
             attached to each set of messages or items added using the AddCustomAuditItems method. The messages
             or items added can be used to audit issues, concerns or just data that needs parsed later.
             This list have a count of each time that method and a print out of all the items that were added.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._customAuditLogs">
            <summary>
            Private CustomAuditLogs store.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.AuditLog">
            <summary>
            Generic Audit log store, will be used to write the generic audit log, good if you have something 
            generic you want to audit, otherwise use the custom audit logs to store more specific audits. Created
            by running AddAuditItem method.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._auditLog">
            <summary>
            internal store for the AuditLog
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.SuccessCount">
            <summary>
            Collects successful email count
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.ErrorCount">
            <summary>
            Returns the count of error logs given to LogClass.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.WarningCount">
            <summary>
            Count of how many warning type messages that are received during the logs.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogsClass.State">
            <summary>
            Current state of the LogClass. Whether the LogClass has just been created or new, awaiting writing,  currently writing 
            or currently closed and cannot write, if a write is attempted in this state LogClass will create a LogsInfo.Failure event for 
            each log type that was attempted to be written stating it's closed and cannot be written.-- Read only.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._state">
            <summary>
            Private store for the current log state.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._idleTimer">
            <summary>
            Timer to reset the log state back to idle.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.#ctor">
            <summary>
            Constructor to create log class, with default settings.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.#ctor(CMWME.LogLib.LogSettings)">
            <summary>
            Initializes LogClass. This class can be used to write to multiple types of logs at once.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreateLogs(System.Nullable{CMWME.LogLib.Logs},System.String,System.String,System.Nullable{CMWME.MailLib.EmailType},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Creates the Log Class with the values given. If no values given will use defaults, if matching 
            Logs flag is given. The Log Class can write entries to the Event Log, a Log File, E-Mail, Console 
            Output, and Debug Writes, depending on which Logs flags are given. The LogsToCreate will parameter 
            will determine what logs to be created, based on the Logs flags given.
            </summary>
            <param name="LogsToCreate">
            Defines the type of logs to create, if you want multiple types of logs separate the enumeration with a pipe,
            see example for more details. If you don't specify this parameter it will default to Debug, Console and Physical 
            log. Debug and Console logs are good for debugging purposes, and should be left in unless it causes any slowness or 
            exceptions, but could be removed if running in production. Default is set by Settings.logs_default_create which can
            changed for a global use of the application.
            Example: Logs.Debug | Logs.Console | Logs.Physical | Logs.Email
            </param>
            <param name="EmailSubject">
            The subject of the e-mail, if parameter is not set and the Email flag is given the email will be sent
            with a subject of the name of the application and " Log", this is set by the Setting.email_log_default_subject
            property. The default can be changed for a global use of the application.
            </param>
            <param name="EmailSendTo">
            Who to send the e-mail to, use semi colons if multiple recipients required. If parameter is not set and 
            the Logs.Email flag is given, the e-mail log will be sent to the e-mail address PCDiscovery@aep.com, set by
            the Settings.email_log_default_sendto, this default can be changed for global use of the application.
            </param>
            <param name="EmailType">
            The type Of e-mail to send HTML or Text . If parameter not set it will be defaulted to HTML if the 
            Email flag is given it will send out an HTML email.
            </param>
            <param name="PhysicalLogPath">
            Path of the physical log file. If parameter is not set it will be defaulted to c:\temp\CMWME_Logs\, this 
            is set by Settings.physical_log_default_filepath, default can also be modified for application wide 
            use.
            </param>
            <param name="PhysicalLogName">
            Name of physical log file. If parameter is not set it will be defaulted to the name of executable. The default 
            is set by Settings.physical_log_default_name, this can be changed for application wide settings.
            </param>
            <param name="PhysicalLogNamePostfix">
            Sets what the log file will be appended with, if not set it will be defaulted to the current date 
            in this format _yyyyMMdd_HHmmss see example for more information. The default is set by 
            Settings.physical_log_default_postfix which can be modified to adjust the application wide settings.
            
            Example: 
            If executable name is test.exe and no logName is set the log file name will be test.exe_yyyyMMdd_HHmmss.log
            where yyyy is the year, mm is the month, dd is the day, HH is the hour, mm is the minutes, and ss is the seconds.
            
            If postfixLog is _test123 and the executable is test.exe and logName is null the log file name will be 
            test.exe_test123.log. If it exists already it will overwrite it.
            </param>
            <param name="EventLogName">
            What Log the event will be written to. If none supplied it will be defaulted to the Application log, this 
            default can be modified by changing Settings.event_log_default_log for application wide settings.
            </param>
            <param name="EventLogSource">
            What log source the event will be written as. If none supplied it will be defaulted to the Application log, this 
            default can be modified by changing Settings.event_log_default_log for application wide settings.
            </param>
            <param name="PhysicalLogAppend">
            Whether or not the Physical Log will be appended if exists. Defaulted to false from the property of 
            Settings.physical_log_default_append.
            </param>
            <return>Returns true if all creates complete successfully, or false if any fail.</return>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeFailures(CMWME.LogLib._logFailures)">
            <summary>
            Checks each failure type if failed then writes the specific failure to the logs that haven't failed.
            </summary>
            <param name="logFailures">Class contains what failures have occurred.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeFailure(CMWME.LogLib.Logs)">
            <summary>
            Writes error from LogsInfo.Failure to the rest of the logs from the LogFailed given.
            </summary>
            <param name="logFailed">Log that failed.</param>
            <returns>False if log failed to write, other wise it returns true or null if nothing was written due to previous error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._createPhysicalLogPath(System.String,System.Boolean)">
            <summary>
            Verifies Log Path given exists and that a file doesn't already exist, if file exists and Append is false 
            will find a version of the file name with [n] that doesn't exist.
            </summary>
            <param name="FullLogPath">Log path, including log name, of the file to create.</param>
            <param name="Append">If appending to the log VS creating a new log each time.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._setIdle">
            <summary>
            Checks to see if idle timer set, if so stops idle timer and starts it again.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._startLog(CMWME.LogLib.Logs,System.Boolean,System.Boolean)">
            <summary>
            Sets up log info for log and sets log state to busy.
            </summary>
            <param name="logToStart">Log to start.</param>
            <param name="create">Whether or not it is creating the log at the time.</param>
            <param name="end">Whether or not it is ending the log at the time.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._setLogFailure(CMWME.LogLib.Logs,System.String,System.Int32,System.Exception,System.Object[])">
            <summary>
            Set's the failure property for for the log given in the LogsInfo property.
            </summary>
            <param name="logToSet">Log to update the failure property for.</param>
            <param name="failureMessage">Message to create the failure with.</param>
            <param name="errorCode">Error code to create the failure with.</param>
            <param name="exception">Exception to create the failure with.</param>
            <param name="stringReplaces">Any replace values for the failure message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreatePhysicalLog(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates a Physical Log in the given path on LogPath and log name of LogName, and writes initialize information. If the path in LogPath not
            exist it will create the location.
            </summary>
            <param name="LogPath">Path to write the physical log to. If none supplied will use the default given in Settings.physical_log_default_filepath property.</param>
            <param name="LogName">Log name to give the physical log. If none supplied will use the default given in Settings.physical_log_default_filepath property.</param>
            <param name="NamePostfix">post fix to give the log name. If none supplied will use the default given in Settings.physical_log_default_postfix property.</param>
            <param name="Append">Whether or not to append to the log if exists.</param>
            <returns>Returns true if the log was created, false if it failed to create log.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreateEventLog(System.String,System.String)">
            <summary>
            Opens/Creates the event log, and writes initialize information to the event log. If the LogSource 
            does not exist, the logs will be written as the generic Application source.
            </summary>
            <param name="LogName">Event log to write to.</param>
            <param name="LogSource">Event Source to be written as.</param>
            <returns>Returns true if the log was created, false if it failed to create log.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreateEmailLog(System.String,System.String,System.Nullable{CMWME.MailLib.EmailType})">
            <summary>
            Sets up the Email Log for Sending.
            </summary>
            <param name="Subject">EmailSubject to send the e-mail with.</param>
            <param name="SendTo">Who to send the e-mail to, if not provided will use default in Settings.email_log_default_sendto.</param>
            <param name="EmailType">What type of email to send as, if not provided will default to Settings.email_log_default_type.</param>
            <returns>Returns true if the log was created, false if it failed to create log.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreateConsoleLog">
            <summary>
            Sets up Console Background and Fore color.
            </summary>
            <returns>Returns true if the log was created, false if it failed to create log.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CreateDebugLog">
            <summary>
            Writes initial logger started string to Debug window.
            </summary>
            <returns>Returns true if the log was created, false if it failed to create log.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AppendSubject(System.String)">
            <summary>
            Adds append to subject, replacing any previous appends.
            </summary>
            <param name="Subject">Value to append to the subject.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(CMWME.C_Exceptions.C_Exception)">
            <summary>
            Adds an Error message to the logs. Writes to logs created during create.
            </summary>
            <param name="Error">Error exception to add to the error messages.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(System.Exception,System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs. Writes to logs created during create.
            </summary>
            <param name="Error">Error exception to add to the error messages.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(System.String,System.Nullable{System.Int32},System.Exception,System.Object[])">
            <summary>
            Adds an Error message to the logs. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">ErrorMessage to add to the error messages.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <param name="innerException">Inner exception to add to the ErrorMessage given.</param>
            <param name="args">Arguments to String.Format into the ErrorMessage.</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(CMWME.LogLib.Logs,System.Exception,System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs.
            </summary>
            <param name="Error">Error exception to add to the error messages.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <param name="LogsToWrite">Logs to write to.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(System.String,System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(CMWME.LogLib.Logs,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <param name="LogsToWrite">Logs to write to.</param>
             <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddError(CMWME.LogLib.Logs,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32})">
            <summary>
            Adds an Error message to the logs.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <param name="LogsToWrite">Logs to write to.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.String,System.Object[])">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="args">Any replace strings needed to insert into the Message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.String,CMWME.LogLib.LogWriteType,System.Object[])">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Type of log to update.</param>
            <param name="args">Any replace strings needed to insert into the Message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.String,CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.String)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(CMWME.LogLib.Logs,System.String,CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsToWrite">Logs to write to.</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.UpdateLogs(CMWME.LogLib.Logs,System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsToWrite">Logs to write to.</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddAuditItems(System.String)">
            <summary>
            Adds an AuditItems to the collection, also increments AuditItems count by one.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddAuditItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds an AuditItems to the collection, also increments AuditItems count by one.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddCustomAuditItems(System.String,System.String)">
            <summary>
            Adds a CustomAuditItem to collection, increments the AuditItems count for the specific CustomAuditItemType
            also increments CustomAuditItem count. Good for multiple items that you want to audit in your
            code.
            </summary>
            <param name="AuditItem">AuditItems to add to the AuditItems collection of the specific CustomAuditItemType.</param>
            <param name="CustomAuditItemType">
            Name to give the AuditItems collection given. If already exists adds to the existing
            collection for the specific CustomAuditItemType.
            </param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AddCustomAuditItems(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Adds a CustomAuditItem to collection, increments the AuditItems count for the specific CustomAuditItemType
            also increments CustomAuditItem count. Good for multiple items that you want to audit in your
            code.
            </summary>
            <param name="AuditItem">AuditItems to add to the AuditItems collection of the specific CustomAuditItemType.</param>
            <param name="CustomAuditItemType">
            Name to give the AuditItems collection given. If already exists adds to the existing
            collection for the specific CustomAuditItemType.
            </param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.BreakLogs">
            <summary>
            Writes a horizontal break to the logs, which can be modified by Settings.logs_horizontal_break. This is not applied to the event log, 
            due to the nature of event log writes.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.BreakLogs(CMWME.LogLib.Logs)">
            <summary>
            Writes a horizontal break to the logs, which can be modified by Settings.logs_horizontal_break. This is not applied to the event log, 
            due to the nature of event log writes.
            </summary>
            <param name="LogsToBreak">Logs to write the break to.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.BreakLog(CMWME.LogLib.Logs)">
            <summary>
            Writes a horizontal break to the specific log given. Expecting a single log type if need to break more than one log use BreakLogs() method.
            </summary>
            <param name="LogToBreak">Log to break</param>
            <returns>False if fails to write the horizontal break, null if a failure has already occurred and nothing is done, check LogInfo.Failure property for more details of failure.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._breakPhysicalLog">
            <summary>
            Writes a horizontal break to the physical log, the horizontal break can be modified by changing, Settings.logs_horizontal_break.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkPhysicalLog">
            <summary>
            Checks the major components of the physical log and makes sure they are set up.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkEmailLog">
            <summary>
            Checks major components of the e-mail to make sure the e-mail is set up.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkConsoleLog(System.Nullable{System.ConsoleColor})">
            <summary>
            checks the console for current color if not set to the right color, changes it.
            </summary>
            <param name="color">Color to change the foreground to.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._breakEmailLog">
            <summary>
            Writes a horizontal break to the email log, the horizontal break can be modified by changing, Settings.logs_horizontal_break.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._breakConsoleLog">
            <summary>
            Writes a horizontal break to the console log, the horizontal break can be modified by changing, Settings.logs_horizontal_break.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._breakDebugLog">
            <summary>
            Writes a horizontal break to the debug log, the horizontal break can be modified by changing, Settings.logs_horizontal_break.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._generateErrorCode(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates an error code based on messages given and adds a message to the list of messages. If a current error code is given will return that instead.
            </summary>
            <param name="ErrorCode">Current Error Code.</param>
            <param name="Messages">Messages to convert.</param>
            <returns>New error code.</returns>
        </member>
        <member name="F:CMWME.LogLib.LogsClass._syncObject">
            <summary>
            Object to stop processing while other writes process.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeLogs(CMWME.LogLib.Logs,System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType,System.Nullable{System.Int32})">
            <summary>
            Writes messages to logs given
            </summary>
            <param name="LogsToWrite">Logs to write.</param>
            <param name="Messages">Message To Add</param>
            <param name="LogsType">Log message type to write.</param>
            <param name="ErrorCode">Error code to write to the error log.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.WriteLog(CMWME.LogLib.Logs,System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType,System.Nullable{System.Int32})">
            <summary>
            Writes to the log given. If LogFx.CreateLog not for the specific log not a failure will occur.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <param name="Messages">Messages to write.</param>
            <param name="LogsType">Type of log write to write.</param>
            <param name="ErrorCode">Error code to write to the error log.</param>
            <returns>
            True if no failure, false if it fails, or null if a failure has already occurred. Check LogsInfo.Failure to see why it failed.
            </returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writePhysicalLog(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes to the physical log file at the path given on creation. If LogFx.CreateLogs or CreatePhysicalLog not
            ran it would fail to run.
            </summary>
            <param name="Messages">Messages to write.</param>
            <param name="LogsType">Log type to write.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeEmailLog(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes to the email log, set up by LogFx.CreateLogs, if not ran first
            will error. 
            </summary>
            <param name="Messages">Messages to add to the log.</param>
            <param name="LogsType">Log type to write based on the settings.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeEventLog(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType,System.Nullable{System.Int32})">
            <summary>
            Writes to the event log, set up using LogFx.CreateLogs or CreateEventLog, if not 
            ran first, will error.
            </summary>
            <param name="Messages">Messages to write to the event log.</param>
            <param name="LogsType">Log type to write based on the settings.</param>
            <param name="ErrorCode">
            Code to write to the event log. If none will create one based on the value of 
            the messages.
            </param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkEventLog">
            <summary>
            Checks Event Log to see if it's set up properly.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkLogs">
            <summary>
            Checks all logs to see if the current state is not closed.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeConsoleLog(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes to the console output.
            </summary>
            <param name="Messages">Messages to write to the console.</param>
            <param name="LogsType">Log type to write based on the settings.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._writeDebugLog(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Write to the debug console output.
            </summary>
            <param name="Messages">Messages to write to the debug console.</param>
            <param name="LogsType">Log type to write, based on the settings.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._parseMessages(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType,System.Boolean)">
            <summary>
            Parses Messages given splits each message by newLine or \r\n and prep-ends each found message with 
            the prefix given by Settings.logs_line_prefix.
            </summary>
            <param name="Messages">Messages to parse.</param>
            <param name="logType">Log type to write, based on the settings.</param>
            <param name="writePrefix">If true gets the line prefix for the log type given.</param>
            <returns>Returns the parsed message.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLinePrefix(CMWME.LogLib.LogWriteType)">
            <summary>
            Returns the Line Prefix defined by Settings.logs_line_prefix.
            </summary>
            <returns>Returns the Line Prefix defined by Settings.logs_line_prefix.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CloseLogs(System.Boolean)">
            <summary>
            Ends log file with a times stamp and closes it.
            </summary>
            <param name="SendEmail">If email is not desired, set to false.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.CloseLogs(System.Boolean,System.String)">
            <summary>
            Ends log file with a times stamp and closes it.
            </summary>
            <param name="SendEmail">If email is not desired, set to false.</param>
            <param name="AttachFile">If not null, when email is sent will attach file given if exists.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._clearData(System.Boolean)">
            <summary>
            Resets all the variables for the LogClass.
            </summary>
            <param name="SendEmail">Whether or not to send the email off, used during close of the log.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._sendEmail">
            <summary>
            
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closeLog(CMWME.LogLib.Logs)">
            <summary>
            /Closes specific log by writing final close statement.
            </summary>
            <param name="LogToClose">Log to close.</param>
            <returns>True if everything was written, false if failed or null if log previously failed.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closeDebugLog">
            <summary>
            Writes final closing data to Debug log.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closeConsoleLog">
            <summary>
            Writes final closing data to Console Log.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closeEmailLog(System.Boolean)">
            <summary>
            Updates body with closing log data and wraps final tags to the body.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._setFinalEmailBody(System.String)">
            <summary>
            Clears the EmailBody and writes a new body with the beginning and ending email tags.
            </summary>
            <param name="body">Body to write.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogStartTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the log start tag.
            </summary>
            <param name="LogsToWrite">Log type to get the start tag.</param>
            <returns>The log start tag.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogEndTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the log end tag.
            </summary>
            <param name="LogsToWrite">Log type to get the end tag.</param>
            <returns>The log end tag.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closePhysicalLog">
            <summary>
            Writes the final log data to Physical log.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._closeEventLog">
            <summary>
            Writes closing values to the Event log.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getHtmlColor(CMWME.LogLib.LogWriteType)">
            <summary>
            Checks the LogWriteType given and returns the e-mail html Color for the appropriate type based on 
            LogSettings of the LogClass. If the LogSetting for the type is null will return null.
            </summary>
            <param name="writeType">LogWriteType used to determine the appropriate type in the settings.</param>
            <returns>string with the html hex color.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkIfWrite(CMWME.LogLib.Logs,CMWME.LogLib.LogWriteType)">
            <summary>
            Checks what type of log is being written and the type of log to be written and if the settings value 
            that matches the log and type is not null or false returns true otherwise it returns false.
            </summary>
            <param name="LogToWrite">
            Type of Log to be written, expects a single log type, if any other type given will throw an error.
            </param>
            <param name="writeType">Type of log to be written.</param>
            <returns>True or false depending if the log and the type is to be written.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getConsoleColor(CMWME.LogLib.LogWriteType)">
            <summary>
            Checks the LogWriteType given and returns the ConsoleColor for the appropriate type based on 
            LogSettings of the LogClass. If the LogSetting for the type is null will return null.
            </summary>
            <param name="writeType">LogWriteType used to determine the appropriate type in the settings.</param>
            <returns>ConsoleColor to use for console writes.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogOutputBeginBreak(CMWME.LogLib.Logs)">
            <summary>
            Gets the begin log output break for line feed type of logs i.e. email, and physical.
            </summary>
            <param name="LogToWrite">Log Type to get the log output break for.</param>
            <returns>The begin log output break for line feed type of logs.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogOutputEndBreak(CMWME.LogLib.Logs)">
            <summary>
            Gets the end log output break for line feed type of logs i.e. email, and physical.
            </summary>
            <param name="LogToWrite">Log Type to get the log output break for.</param>
            <returns>The end log output break for line feed type of logs.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getPhysicalLogCreatedStr">
            <summary>
            Get's the string value of the created date and title dictated by the Settings.physical_log_property_title_created.
            </summary>
            <returns>the string value of the created date.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogStartedStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the string of when the specific log was started. Property title will be set by the property 
            Settings.logs_property_title_started.
            </summary>
            <param name="LogToWrite">Log to get the CreatedTime from.</param>
            <returns>The string of when the specific log was started.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogAssemblyStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the logger's assembly information and title dictated by the Settings.logs_property_title_assembly_name 
            and Settings.logs_property_title_version.
            </summary>
            <param name="LogToWrite">Log to write.</param>
            <returns>The string value of the logger's assembly information.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getProgramAssemblyStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the program's assembly information and title dictated by the Settings.logs_property_title_program_assembly_name
            and Settings.logs_property_title_version.
            </summary>
            <param name="LogToWrite">Log to write.</param>
            <returns>The string value of the program's assembly information.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getTitleVersion">
            <summary>
            Gets the title for any version property.
            </summary>
            <returns>The title for any version property.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCommandLineStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the Command Line information and title dictated by the Settings.logs_property_title_command_line 
            and Settings.logs_property_title_command_args.
            </summary>
            <param name="LogToWrite">Log to write the command line string to.</param>
            <returns> The string value of the Command Line information. </returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCredentialsStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the executing credential information and title dictated by the Settings.logs_property_title_credentials.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>the string value of the executing credential information.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getExecutingModeStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the executing mode information and title dictated by the Settings.logs_property_title_mode.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>the string value of the executing mode information.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getServerStr(CMWME.LogLib.Logs)">
            <summary>
            Get's the string value of the executing server or machine information and title dictated by the Settings.logs_property_title_server.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>the string value of the executing server or machine information.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCreateLogStr(CMWME.LogLib.Logs)">
            <summary>
            Returns a string of when the log was created and general information about the program that started it.
            </summary>
            <param name="LogToWrite">Log type to get create time.</param>
            <returns>Returns a string of when the log was created and general information about the program that started it.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCloseLogStr(CMWME.LogLib.Logs)">
            <summary>
            Returns a string of when the log was closed, success count and run time.
            </summary>
            <param name="LogToWrite">Log type to get the info for.</param>
            <returns>Returns a string of when the log was closed, success count and run time.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getErrorCountStr(CMWME.LogLib.Logs)">
            <summary>
            Gets string of the property for the error count, the amount of times an error write type is given. 
            Property title is determined by the property Settings.logs_property_title_error_count.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>String of the property for the error count.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getWarningCountStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the string of the property for the Warning count. This represents the amount of warning write types given.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>String of the property for the Warning count.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogRunTimeStr(CMWME.LogLib.Logs)">
            <summary>
            Returns the Run Time property string of the specific log, title of this property string is set in Settings.Logs_property_title_runtime.
            </summary>
            <param name="LogToWrite">Log type to get the info for.</param>
            <returns>Returns the Run Time property string.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogEndedStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the log ended property string with the value of when the specific log was closed, value of property title set 
            by Settings.logs_property_title_ended. 
            </summary>
            <param name="LogToWrite">Log to get the value from.</param>
            <returns>The log ended property string with the value of when the log was closed.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getSuccessCountStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the success count property string, value of the property title is set in Settings.logs_property_title_success_count.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>The success count property string.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getAuditCountStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the Audit count property string, value of the property title is set in Settings.logs_property_title_audit.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>The Audit count property string.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCustomAuditCountStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the CustomAudit count property string, each string is prefixed with the name of the CustomAudit property. Value of
            the title of each CustomAudit count is Append with the value in Settings.logs_property_title_customaudit.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>The CustomAudit count property string.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._checkForHtml(CMWME.LogLib.Logs)">
            <summary>
            Checks if current log type is html.
            </summary>
            <param name="LogToWrite">Log to check.</param>
            <returns>True if html type otherwise it returns false.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getAuditHeadTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the Audit head tag for any audit types.
            </summary>
            <param name="LogToWrite">Log type to get the tag for.</param>
            <returns>The Audit head tag.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getAuditEndTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the Audit end tag for any audit types.
            </summary>
            <param name="LogToWrite">Log type to get the tag for.</param>
            <returns>The Audit end tag.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getCustomAuditOutputStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the output of the CustomAudit items entered in the LogClass. Each CustomAudit type starts and ends with a break defined
            by the property of Settings.logs_begin_customaudit_output and Settings.logs_end_customaudit_output. Each line of the output
            is prefixed with the DateTime entered in the LogClass and the value of Settings.logs_line_prefix.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>The output of the CustomAudits entered in the LogClass.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getAuditOutputStr(CMWME.LogLib.Logs)">
            <summary>
            Gets the output of the Generic Audit items entered in the LogClass. The output will start and end with the values defined in
            Settings.logs_begin_audit_output and Settings.logs_end_audit_output. Each line of the output will be prefixed with the DateTime
            entered in the LogClass and the value of Settings.logs_line_prefix.
            </summary>
            <param name="LogToWrite">Logs to write.</param>
            <returns>The output of the Generic Audit items entered in the LogClass.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getFinalEmailSubject">
            <summary>
            Gets the final subject for the e-mail. If any failures will prefix the subject given with value in the property
            Settings.email_subject_failed_prefix else it will prefix the subject with the property Settings.email_subject_success_prefix.
            If there are any warnings or audits that were written, the values in the following properties will be inserted after the prefix, 
            Settings.email_subject_warning_occurred and Subject.email_subject_audit_occurred. After the following property will be inserted, 
            Settings.email_subject_prefix_separator then the Subject given will be inserted.
            </summary>
            <returns>The final subject for the e-mail.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getEmailOutput">
            <summary>
            Gets the output body for the e-mail.
            </summary>
            <returns>The output body for the e-mail.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogOutputBeginTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the beginning tag for the log output.
            </summary>
            <param name="LogsToWrite">Log type to get the end tag for.</param>
            <returns>The beginning tag for the log output.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLogOutputEndTag(CMWME.LogLib.Logs)">
            <summary>
            Gets the ending tag for the log output.
            </summary>
            <param name="LogsToWrite">Log type to get the end tag for.</param>
            <returns>The ending tag for the log output.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getLineBreak(CMWME.LogLib.Logs)">
            <summary>
            Checks email type and returns the type of line break that is needed for email writes.
            </summary>
            <returns>String representing a line break in emails.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getPropertyTitleHeadTag(CMWME.LogLib.Logs)">
            <summary>
            Gets beginning tag for property titles.
            </summary>
            <param name="LogToWrite">Type of log to get the beginning tag for.</param>
            <returns>Beginning tag for email property titles.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass._getPropertyTitleEndTag(CMWME.LogLib.Logs)">
            <summary>
            Gets ending tag for property titles.
            </summary>
            <param name="LogToWrite">Type of log to get the ending tag for.</param>
            <returns>Ending tag for email property titles.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.AuditOccurred">
            <summary>
            Checks both AuditLog and CustomAuditLogs for any records, if there are any it returns true
            else it returns false.
            </summary>
            <returns>
            Checks both AuditLog and CustomAuditLogs for any records, if there are any it returns true
            else it returns false.
            </returns>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.ChangeEmailSendTo(System.String)">
            <summary>
            Changes the e-mail address to send the email log to.
            </summary>
            <param name="EmailSendTo">E-mail address to change the email log to.</param>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.Finalize">
            <summary>
            Runs Dispose(false);
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.Dispose">
            <summary>
            Runs Dispose(true) and suppreasses any finalize runs.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogsClass.Dispose(System.Boolean)">
            <summary>
            Closes and disposes all resources of the log class.
            </summary>
            <param name="Disposing">If true closes and clears anything .net, always closes any COM resorces.</param>
        </member>
        <member name="T:CMWME.LogLib.LogException">
            <summary>
            Used to track errors given to the log writer.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogException.Messages">
            <summary>
            Message to give the log exception.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Message">Message to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Message">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Message">Message to add.</param>
            <param name="Inner">Inner exception to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.String,System.Int32,System.Exception,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Message">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
            <param name="Inner">Inner exception to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Exception)">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="ex">Exception to copy to the new exception.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Messages">Message to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Exception,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Messages">Message to add.</param>
            <param name="Inner">Inner exception to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Message">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Messages">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Messages">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Exception,System.Object[])">
            <summary>
            Constructor for the LogException.
            </summary>
            <param name="Messages">Message to add.</param>
            <param name="ErrorCode">Error code to give the log exception.</param>
            <param name="Inner">Inner exception to add.</param>
            <param name="Args">Strings to replace in the message.</param>
        </member>
        <member name="M:CMWME.LogLib.LogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the Exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:CMWME.LogLib.Logs">
            <summary>
            On creation of the logs give one or multiple values of this enumeration in order to determine what 
            logs will be written.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.Debug">
            <summary>
            Writes to the debug console.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.Console">
            <summary>
            Writes to the application console.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.Physical">
            <summary>
            Writes to a physical log on the hard drive.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.Event">
            <summary>
            Writes to windows event logs.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.Email">
            <summary>
            Writes to an email to be sent out as a log.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.Logs.None">
            <summary>
            Set when  load, if this is ever given as another type will error out.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogSettingsProperty">
            <summary>
            Log Settings Properties to change in the log settings.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_success_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is success, else it will not 
            write to physical log. Default is true.
            <para />
            Sets LogSettings Property of:<para />
            public bool physical_log_success_write { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_debug_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is debug, else it will not 
            write to physical log. Default is false no log writes will be done.
            <para />
            Sets LogSettings Property of:<para />
            public bool physical_log_debug_write { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_info_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is info, else it will not 
            write to physical log. Default is true.
            <para />
            Sets LogSettings Property of:<para />
            public bool physical_log_info_write { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_warning_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is debug, else it will not 
            write to physical log. Default is true.
            <para />
            Sets LogSettings Property of:<para />
            public bool physical_log_warning_write { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_error_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is error, else it will not 
            write to physical log. Default is true.
            <para />
            Sets LogSettings Property of:<para />
            public bool physical_log_error_write { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_success_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is success and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Info Type.
            <para />
            Sets LogSettings Property of:<para />
            public EventLogType? event_log_success_type { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_debug_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is debug and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is null, no log writes will be done.
            <para />
            Sets LogSettings Property of:<para />
            public EventLogType? event_log_debug_type { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_info_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is info and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Info Type.
            <para />
            Sets LogSettings Property of:<para />
            public EventLogType? event_log_info_type { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_warning_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is warning and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Warning Type.
            <para />
            Sets LogSettings Property of:<para />
            public EventLogType? event_log_warning_type { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_error_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is error and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Error Type.
            <para />
            Sets LogSettings Property of:<para />
            public EventLogType? event_log_error_type { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_success_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is success and will write 
            email in brush color given, else it will not write to email log. Default is DogerBlue.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_success_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_debug_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is debug and will write 
            email in brush color given, else it will not write to email log. Default is null, no email write.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_debug_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_info_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is info and will write 
            email in brush color given, else it will not write to email log. Default is null, no email write.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_info_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_warning_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is warning and will write 
            email in brush color given, else it will not write to email log. Default is Gold.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_warning_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_error_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is error and will write 
            email in brush color given, else it will not write to email log. Default is Firebrick.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_error_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_background_color">
            <summary>
            Will set the background color of the email to the brush color given. If none supplied or if null will 
            be white.
            <para />
            Sets LogSettings Property of:<para />
            public Color? html_log_background_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_success_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is success and will write
            to the console with the specified color, default is Cyan.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor? console_log_success_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_debug_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is debug and will write
            to the console with the specified color, default is null.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor? console_log_debug_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_info_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is info and will write
            to the console with the specified color, default is White.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor? console_log_info_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_warning_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is info and will write
            to the console with the specified color, default is White.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor? console_log_warning_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_error_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is error and will write
            to the console with the specified color, default is Red.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor? console_log_error_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.console_log_background_color">
            <summary>
            Color the background of the Console Output will be, the default is DarkBlue.
            <para />
            Sets LogSettings Property of:<para />
            public ConsoleColor console_log_background_color { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_extension">
            <summary>
            Physical Log extension required when creating a physical log, default is ".log"
            <para />
            Sets LogSettings Property of:<para />
            public string physical_log_extension { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_text_linebreak">
            <summary>
            Line break that is used in any text based logs. Default is CRLF or "\r\n".
            <para />
            Sets LogSettings Property of:<para />
            public string logs_text_linebreak { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_append_breaks">
            <summary>
            Amount of line breaks between logs when appending to a physical log. Default is 3.
            <para />
            Sets LogSettings Property of:<para />
            public int physical_log_append_breaks { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_date_format">
            <summary>
            The format of the date string that is used each time a date is inserted, default is "hh:mm:ss tt MM/dd/yyyy"
            <para />
            Sets LogSettings Property of:<para />
            public string logs_date_format { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_property_title_created">
            <summary>
            Property title of physical log created inserted on creation of the physical log, default is "LogFile Created".
            <para />
            Sets LogSettings Property of:<para />
            public string physical_log_property_title_created { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_delimiter">
            <summary>
            Separates each property inserted into the log by the value, default is ": ".
            <para />
            Sets LogSettings Property of:<para />
            public string logs_property_title_delimiter { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_property_title_started">
            <summary>
            Property title of physical log starting after appending to an existing physical log, default is "Log Started".
            <para />
            Sets LogSettings Property of:<para />
            public string physical_log_property_title_started { get; set; }
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_assembly_name">
            <summary>
            Property title of the DLL assembly name inserted into the log, default is "Log Class Assembly".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_assembly_name { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_version">
            <summary>
            Property title of any versions inserted through out the log, default is "Version".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_version { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_program_assembly_name">
            <summary>
            Property title of the program assembly name that's calling the DLL inserted into the log, default is "Program Assembly".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_program_assembly_name { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_command_line">
            <summary>
            Property title of the command line call for the program assembly inserted into the log, default is "Command Line".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_command_line { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_command_args">
            <summary>
            Property title of the command line arguments for the program assembly inserted into the log, default is "Command Arguments".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_command_args { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_credentials">
            <summary>
            Property title of the credentials that are used to the execute the program inserted into the log, default is "Executing Credentials".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_credentials { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_mode">
            <summary>
            Property title of the operating or executing mode that the program is running in, dictated by LogFx.Debug and LogFx.Production properties, 
            default is "Executing Mode".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_mode { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_server">
            <summary>
            Property title of the machine or server that is executing the program, inserted into the log, default is "Executing Server".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_server { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.log_begin_output">
            <summary>
            String value that is inserted before the actual log writes, 
            default is "******************************Log*Output******************************".
            <para /> Sets LogSettings Property of:<para /> public string log_begin_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_horizontal_break">
            <summary>
            Visual break in the logs, default is "*-------------------------------------------------------------*"
            <para /> Sets LogSettings Property of:<para /> public string logs_horizontal_break { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_linebreak">
            <summary>
            Html email log line break, default is "&lt;br /&gt;"
            <para /> Sets LogSettings Property of:<para /> public string html_log_linebreak { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_default_filepath">
            <summary>
            Default value for the file path of the physical log, defaulted to "c:\temp\CMWME_Logs\"
            <para /> Sets LogSettings Property of:<para /> public string physical_log_default_filepath { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_log_default_sendto">
            <summary>
            Default value for the EmailSendTo of the email log, defaulted to "PCDiscovery@aep.com"
            <para /> Sets LogSettings Property of:<para /> public string email_log_default_sendto { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_log_default_type">
            <summary>
            Default value for the EmailType of the email log, defaulted to "EmailType.html".
            <para /> Sets LogSettings Property of:<para /> public EmailType email_log_default_type { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_default_create">
            <summary>
            Default value for logs to create, defaulted to "Logs.Debug | Logs.Console | Logs.Physical"
            <para /> Sets LogSettings Property of:<para /> public Logs logs_default_create { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_default_log">
            <summary>
            Default value for the event log that is written if none given.
            <para /> Sets LogSettings Property of:<para /> public string event_log_default_log { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_log_default_subject">
            <summary>
            Default value for the email log, default to application name plus " Log".
            <para /> Sets LogSettings Property of:<para /> public string email_log_default_subject { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_default_source">
            <summary>
            Default value for the event log source that is used if none given.
            <para /> Sets LogSettings Property of:<para /> public string event_log_default_source { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_default_postfix">
            <summary>
            Default postfix to the physical log file's name, this will append the log file 
            with the value set. By default the value is the current DateTime value with the
            format of _yyyyMMdd_HHmmss. 
            <para /> Sets LogSettings Property of:<para /> public string physical_log_default_postfix { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_default_name">
            <summary>
            Default log name for the physical log. Default is the compiled program's name. 
            <para /> Sets LogSettings Property of:<para /> public string physical_log_default_name { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_default_append">
            <summary>
            Default value that will determine whether or not the physical log will be appended if 
            the log path and name exists already. Default value is false.
            <para /> Sets LogSettings Property of:<para /> public bool physical_log_default_append { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_idle_timer">
            <summary>
            Amount of time in milliseconds after any write that the LogClass waits to mark the logs state as idle. 
            This is mainly used when running the update or add calls async. The update or add calls 
            will wait to write until the logs state is idle. Default value is 200 milliseconds.
            <para /> Sets LogSettings Property of:<para /> public double logs_idle_timer { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_idle_wait_timeout">
            <summary>
            Amount of time in milliseconds that LogFx will wait for the LogClass.State to be set to
            idle before it continues anyways. Default value is 1000 milliseconds.
            <para /> Sets LogSettings Property of:<para /> public double logs_idle_wait_timeout { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_begin_error_break">
            <summary>
            String that is used in logs to break up the text before an error is written. Default value 
            is "*************************BEGIN*ERROR******************************"
            <para /> Sets LogSettings Property of:<para /> public string logs_begin_error_break { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_end_error_break">
            <summary>
            String that is used in logs to break up the text after an error is written. Default value
            is "*****************************END*ERROR****************************"
            <para /> Sets LogSettings Property of:<para /> public string logs_end_error_break { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_line_prefix">
            <summary>
            Prefix of every line written in the logs. Default value is "DateTime      ---->     " and 
            DateTime is written in the format given in setting logs_date_format, cannot change the DateTime
            added at the beginning just the format of the DateTime. Changing this changes everything after 
            the DateTime
            <para /> Sets LogSettings Property of:<para /> public string logs_line_prefix { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_error_sourcecreation">
            <summary>
            Error message that occur if the Event Log source fails to create. The value {ProgramSource} will be replaced with the source name that was attempted to be created.
            By default the value is "\r\n\r\n*** Error Occurred: Application was not ran elevated event log was created in the "Application" source instead of "{ProgramSource}" source. ***\r\n"
            If value is null, and an error occurs during creation then event log will not be an error type.
            <para /> Sets LogSettings Property of:<para /> public string event_log_error_sourcecreation { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_success_count">
            <summary>
            Property title of the how many success write types that were given, 
            default is "Success Count".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_success_count { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_ended">
            <summary>
            Property title of what time the log ended, default is "End Time".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_ended { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_runtime">
            <summary>
            Property title of how much time it took between created/started and
            Closed/Ended, default is "Run Time".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_runtime { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_timespan_format">
            <summary>
            TimeSpan format for any TimeSpan properties written to the log
            for example RunTime is a TimeSpan property. The default value
            of this property is "hh\:mm\:ss".
            <para /> Sets LogSettings Property of:<para /> public string logs_timespan_format { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.log_end_output">
            <summary>
            Page break on the log for when the log output ends. The default 
            value is "****************************End*Log*Output****************************"
            <para /> Sets LogSettings Property of:<para /> public string log_end_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_customaudit">
            <summary>
            Property title for the CustomAudit count property output. Default is the name of the 
            CustomAudit item and then "Count". The only thing that can be changed is the
            sub title "Count" which is the value of the property.
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_customaudit { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_audit">
            <summary>
            Property title for the Generic Audit count property output. Default value is
            "Audit Count".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_audit { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_begin_customaudit_output">
            <summary>
            Page break on logs for when the CustomAudit output begins. Default value is 
            "******************************Begin*{0}*Audit*Items*****************************".
            This property must contain "{0}" some where in the value, this is where the name of
            the custom audit type will be inserted. If this value is omitted an exception will 
            occur.
            <para /> Sets LogSettings Property of:<para /> public string logs_begin_customaudit_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_end_customaudit_output">
            <summary>
            Page break on logs for when the CustomAudit output ends. Default value is 
            "******************************End*{0}*Audit*Items*****************************".
            This property must contain "{0}" some where in the value, this is where the name of
            the custom audit type will be inserted. If this value is omitted an exception will 
            occur.
            <para /> Sets LogSettings Property of:<para /> public string logs_end_customaudit_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_begin_audit_output">
            <summary>
            Page break on logs for when the Audit output begins. Default value is
            "******************************Begin*Audit*Items*****************************".
            <para /> Sets LogSettings Property of:<para /> public string logs_begin_audit_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_end_audit_output">
            <summary>
            Page break on logs for when the Audit output ends. Default value is 
            "*******************************End*Audit*Items******************************"
            <para /> Sets LogSettings Property of:<para /> public string logs_end_audit_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_format_property_title">
            <summary>
            CSS format for the property titles. Default is "font-weight:bold; font-size:12pt;".
            <para /> Sets LogSettings Property of:<para /> public string html_log_format_property_title { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_format_body">
            <summary>
            CSS format for the body of the html body. Default is 
            "font-family:Consolas,Courier;font-size:10pt;".
            <para /> Sets LogSettings Property of:<para /> public string html_log_format_body { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_subject_failed_prefix">
            <summary>
            Prefix to email subject if failure occurs. Default is "Failed".
            <para /> Sets LogSettings Property of:<para /> public string email_subject_failed_prefix { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_subject_prefix_separator">
            <summary>
            Separator between prefix and subject given for email. Default is " - ".
            <para /> Sets LogSettings Property of:<para /> public string email_subject_prefix_separator { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_subject_success_prefix">
            <summary>
            Prefix to email subject if no failure occurs. Default is "Success"
            <para /> Sets LogSettings Property of:<para /> public string email_subject_success_prefix { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_subject_audit_occurred">
            <summary>
            Value inserted before prefix separator into e-mail subject if audit 
            occurred. Default is "w\Audit".
            <para /> Sets LogSettings Property of:<para /> public string email_subject_audit_occurred { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.email_subject_warning_occurred">
            <summary>
            Value inserted into e-mail subject before prefix separator if warning message 
            occurred. Default is "w\Warnings".
            <para /> Sets LogSettings Property of:<para /> public string email_subject_warning_occurred { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_started">
            <summary>
            Property title of the Start Time for the log. Default value is "Start Time".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_started { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_error_count">
            <summary>
            Property title of the error count for the log writes. Default is "Error Count".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_error_count { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_property_title_warning_count">
            <summary>
            Property title of the warning count for the log writes. Default is "Warning Count".
            <para /> Sets LogSettings Property of:<para /> public string logs_property_title_warning_count { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_format_output">
            <summary>
            Gets the CSS format for the log output, default is nothing.
            <para /> Sets LogSettings Property of:<para /> public string html_log_format_output { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.html_log_format_audit">
            <summary>
            Gets the CSS format for the log any audit output, default is nothing.
            <para /> Sets LogSettings Property of:<para /> public string html_log_format_audit { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.logs_default_emailsubject_delimeter">
            <summary>
            Value that goes between EmailSubject and AppendSubject if set. Default is " - ".
            <para /> Sets LogSettings Property of:<para /> public string logs_default_emailsubject_delimeter { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.write_log_type">
            <summary>
            Writes the log type after the date in the log. Defaulted to true.
            <para /> Sets LogSettings Property of:<para /> public bool write_log_type { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.log_default_write_type">
            <summary>
            Default log write type, when no type is given. Defaulted to debug type.
            <para /> Sets LogSettings Property of:<para /> public LogWriteType log_default_write_type { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_header_close">
            <summary>
            Header for event log on close. Default value: ####### Event Log for {ProgramName} Ended ######\r\n
            This is only written if the event log source is written to Application log source.
            <para /> Sets LogSettings Property of:<para /> public string event_log_header_close { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_header_creation">
            <summary>
            Header for event log on creation. Default value: ####### Event Log for {ProgramName} Started #######\r\n.
            This is only written if the event log source is written to Application log source.
            <para /> Sets LogSettings Property of:<para /> public string event_log_header_creation { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_header_write">
            <summary>
            Header for event log during a write. Default value: ####### Event Log Written for {ProgramName} ######\r\n
            This is only written if the event log source is written to Application log source.
            <para /> Sets LogSettings Property of:<para /> public string event_log_header_write { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_eventId_close">
            <summary>
            EventId that is set during close of log. Default value is 1309.
            <para /> Sets LogSettings Property of:<para /> public int event_log_eventId_close { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.event_log_eventId_creation">
            <summary>
            EventId that is set during creation of log. Default value is 1308
            <para /> Sets LogSettings Property of:<para /> public int event_log_eventId_creation { get; set; } </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettingsProperty.physical_log_cleanup_limit">
            <summary>
            The amount of logs to keep when running log cleanup after creating logs.
            Set this to 0 or below to disable. This is defaulted to 100.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogFx">
            <summary>
            Creates Log Class, Updates Log, and Closes/Sends Log
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.Log">
            <summary>
            Log Class That Contains The Definitions of The Log and Processes
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.LogState">
            <summary>
            Returns the current state of the Log Class.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.DebugMode">
            <summary>
            This Property is if Program is in Debug Mode, If this property has been set
            it will returned the set value otherwise it returns true if the debugger is attached
            if it is not returns false.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.ErrorCode">
            <summary>
            Error Code that was first given when an error occurs.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.ProdMode">
            <summary>
            This Property is if Program is in Prod Mode, read-only. Returns the opposite of DebugMode.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.SuccessCount">
            <summary>
            Returns the count of success logs given to LogClass.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.ErrorCount">
            <summary>
            Returns the count of error logs given to LogClass.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.WarningCount">
            <summary>
            Count of how many warning type messages that are received during the logs.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogFx.ErrorIfNoLog">
            <summary>
            If true the log methods will throw an error if no logs exist, else it will ignore. By default this is false.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogFx._errorNoLog">
            <summary>
            Private store for ErrorIfNoLog.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddAuditItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds an AuditItems to the collection, also increments AuditItems count by one.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddAuditItems(System.String)">
            <summary>
            Adds an AuditItems to the collection, also increments AuditItems count by one.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddCustomAuditItems(System.String,System.String,System.Object[])">
            <summary>
            Adds a CustomAuditItem to collection, increments the AuditItems count for the specific CustomAuditItemType
            also increments CustomAuditItem count. Good for multiple items that you want to audit in your
            code.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection of the specific CustomAuditItemType.</param>
            <param name="CustomAuditItemType">
            Name to give the AuditItems collection given. If already exists adds to the existing
            collection for the specific CustomAuditItemType.
            </param>
            <param name="args">list of arguments to replace in AuditItems string</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddCustomAuditItems(System.String,System.String)">
            <summary>
            Adds a CustomAuditItem to collection, increments the AuditItems count for the specific CustomAuditItemType
            also increments CustomAuditItem count. Good for multiple items that you want to audit in your
            code.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection of the specific CustomAuditItemType.</param>
            <param name="CustomAuditItemType">
            Name to give the AuditItems collection given. If already exists adds to the existing
            collection for the specific CustomAuditItemType.
            </param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddCustomAuditItems(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Adds a CustomAuditItem to collection, increments the AuditItems count for the specific CustomAuditItemType
            also increments CustomAuditItem count. Good for multiple items that you want to audit in your
            code.
            </summary>
            <param name="AuditItems">AuditItems to add to the AuditItems collection of the specific CustomAuditItemType.</param>
            <param name="CustomAuditItemType">
            Name to give the AuditItems collection given. If already exists adds to the existing
            collection for the specific CustomAuditItemType.
            </param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddError(System.String,System.Nullable{System.Int32},System.Exception,System.Object[])">
            <summary>
            Adds a Error message to the logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <param name="innerException">Inner exception that occurred for ErrorMessage</param>
            <param name="args">Replace strings for ErrorMessage will replace {0}-{n} based on position of parameter.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddError(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32})">
            <summary>
            Adds a Error message to the logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddError(System.Exception,System.Nullable{System.Int32})">
            <summary>
            Adds a Error message to the logs. Writes to logs created during create.
            </summary>
            <param name="Error">Error exception to add to the error messages.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AddError(System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a Error message to the logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="ErrorMessage">Error message to add.</param>
            <param name="ErrorCode">Error code for the message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.BreakLogs">
            <summary>
            Writes a horizontal break to the logs, which can be modified by Settings.logs_horizontal_break. This is not applied to the event log, 
            due to the nature of event log writes.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogFx.CloseLogs(System.Boolean)">
            <summary>
            Ends log file with a times stamp and closes it.
            </summary>
            <param name="SendEmail">If email is not desired, set to false.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.CloseLogs(System.Boolean,System.String)">
            <summary>
            Ends log file with a times stamp and closes it.
            </summary>
            <param name="SendEmail">If email is not desired, set to false.</param>
            <param name="AttachFile">If not null, when email is sent will attach file given if exists.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.CreateLogs(System.Nullable{CMWME.LogLib.Logs},System.String,System.String,System.Nullable{CMWME.MailLib.EmailType},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Creates the Log Class with the values given. If no values given will use defaults, if matching 
            Logs flag is given. The Log Class can write entries to the Event Log, a Log File, E-Mail, Console 
            Output, and Debug Writes, depending on which Logs flags are given. The LogsToCreate will parameter 
            will determine what logs to be created, based on the Logs flags given.
            </summary>
            <param name="LogsToCreate">
            Defines the type of logs to create, if you want multiple types of logs separate the enumeration with a pipe,
            see example for more details. If you don't specify this parameter it will default to Debug, Console and Physical 
            log. Debug and Console logs are good for debugging purposes, and should be left in unless it causes any slowness or 
            exceptions, but could be removed if running in production. Default is set by Settings.logs_default_create which can
            changed for a global use of the application.
            Example: Logs.Debug | Logs.Console | Logs.Physical | Logs.Email
            </param>
            <param name="EmailSubject">
            The subject of the e-mail, if parameter is not set and the Email flag is given the email will be sent
            with a subject of the name of the application and " Log", this is set by the Setting.email_log_default_subject
            property. The default can be changed for a global use of the application.
            </param>
            <param name="EmailSendTo">
            Who to send the e-mail to, use semi colons if multiple recipients required. If parameter is not set and 
            the Logs.Email flag is given, the e-mail log will be sent to the e-mail address PCDiscovery@aep.com, set by
            the Settings.email_log_default_sendto, this default can be changed for global use of the application.
            </param>
            <param name="EmailType">
            The type Of e-mail to send HTML or Text . If parameter not set it will be defaulted to HTML if the 
            Email flag is given it will send out an HTML email.
            </param>
            <param name="PhysicalLogPath">
            Path of the physical log file. If parameter is not set it will be defaulted to c:\temp\CMWME_Logs\, this 
            is set by Settings.physical_log_default_filepath, default can also be modified for application wide 
            use.
            </param>
            <param name="PhysicalLogName">
            Name of physical log file. If parameter is not set it will be defaulted to the name of executable. The default 
            is set by Settings.physical_log_default_name, this can be changed for application wide settings.
            </param>
            <param name="PhysicalLogNamePostfix">
            Sets what the log file will be appended with, if not set it will be defaulted to the current date 
            in this format _yyyyMMdd_HHmmss see example for more information. The default is set by 
            Settings.physical_log_default_postfix which can be modified to adjust the application wide settings.
            
            Example: 
            If executable name is test.exe and no logName is set the log file name will be test.exe_yyyyMMdd_HHmmss.log
            where yyyy is the year, mm is the month, dd is the day, HH is the hour, mm is the minutes, and ss is the seconds.
            
            If postfixLog is _test123 and the executable is test.exe and logName is null the log file name will be 
            test.exe_test123.log. If it exists already it will overwrite it.
            </param>
            <param name="EventLogName">
            What Log the event will be written to. If none supplied it will be defaulted to the Application log, this 
            default can be modified by changing Settings.event_log_default_log for application wide settings.
            </param>
            <param name="EventLogSource">
            What log source the event will be written as. If none supplied it will be defaulted to the Application log, this 
            default can be modified by changing Settings.event_log_default_log for application wide settings.
            </param>
            <param name="PhysicalLogAppend">
            Whether or not the Physical Log will be appended if exists. Defaulted to false from the property of 
            Settings.physical_log_default_append.
            </param>
            <return>Returns true if all creates complete successfully, or false if any fail.</return>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.String,CMWME.LogLib.LogWriteType,System.Object[])">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Log type the message is to write.</param>
            <param name="args">Any replace strings needed to insert into the Message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.String,System.Object[])">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="args">Any replace strings needed to insert into the Message.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.String)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create. Defaults LogWriteType to Settings.log_default_write_type.
            </summary>
            <param name="Message">Message To Add</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create. Defaults LogWriteType to Settings.log_default_write_type.
            </summary>
            <param name="Messages">Message To Add</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.String,CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.UpdateLogs(System.Collections.Generic.IEnumerable{System.String},CMWME.LogLib.LogWriteType)">
            <summary>
            Writes message to logs. Writes to logs created during create. Writes to logs created during create.
            </summary>
            <param name="Message">Message To Add</param>
            <param name="LogsType">Log type the message is to write.</param>
            <returns>Returns true if log writes, false if fails, or null if no logs were written due to error.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogFx.AppendSubject(System.String)">
            <summary>
            Adds append to subject, replacing any previous appends.
            </summary>
            <param name="Subject">Value to append to the subject.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.ChangeEmailSendTo(System.String)">
            <summary>
            Changes the e-mail address to send the email log to.
            </summary>
            <param name="EmailSendTo">E-mail address to change the email log to.</param>
        </member>
        <member name="M:CMWME.LogLib.LogFx.SetLogSetting(CMWME.LogLib.LogSettingsProperty,System.Object)">
            <summary>
            Sets the Log Setting property to the value given.
            </summary>
            <param name="prop">Property to set.</param>
            <param name="value">Value to set the property to.</param>
        </member>
        <member name="T:CMWME.LogLib.LogInfo">
            <summary>
            Log failure and the exception that was thrown.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfo.LogType">
            <summary>
            Log that failed.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfo.CreatedTime">
            <summary>
            DateTime when log was created. 
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfo.ClosedTime">
            <summary>
            DateTime when log was closed.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfo.RunTime">
            <summary>
            Subtracts the Created Time from the Closed time to get the amount of time took to run.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfo.Failure">
            <summary>
            Exception that was thrown.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogInfo.#ctor(CMWME.LogLib.Logs)">
            <summary>
            Used during create of log, stores the created, closed and run times and if any failures occurred during any log writes.
            </summary>
            <param name="logType">Log that failed, expecting a single log type.</param>
        </member>
        <member name="T:CMWME.LogLib.LogInfoCollection">
            <summary>
            Collection of LogInfo
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogInfoCollection.Item(CMWME.LogLib.Logs)">
            <summary>
            Gets the specific error LogInfo for the specific log given, if doesn't exist null. If Setting will find the specific 
            log type given and override it if doesn't exist will add it to the collection.
            </summary>
            <param name="log">Specific log to get the LoggingFailure for.</param>
            <returns>LoggingFailure for the specific log requested if none found returns empty LoggingFailure.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogInfoCollection.HasError(CMWME.LogLib.Logs)">
            <summary>
            Checks if specific log has had an exception thrown, if so returns true, else returns false.
            </summary>
            <param name="log">specific log to check</param>
            <returns>Returns true if specific log has an exception thrown, else returns false.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogInfoCollection.LogCreated(CMWME.LogLib.Logs)">
            <summary>
            Checks if log has been created. If it has returns the date time created else returns null.
            </summary>
            <param name="log">Log to check.</param>
            <returns>If log has been created returns the date time created else returns null.</returns>
        </member>
        <member name="M:CMWME.LogLib.LogInfoCollection.HasLog(CMWME.LogLib.Logs)">
            <summary>
            Checks if a specific log has been created, if it has returns true. If the log has not been created returns false.
            </summary>
            <param name="logs">Logs to check.</param>
        </member>
        <member name="T:CMWME.LogLib.EventLogType">
            <summary>
            What type of Event Log Type will be displayed for the LogWriteType.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.EventLogType.Error">
            <summary>
            An Error Event Log entry will be created.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.EventLogType.Warning">
            <summary>
            A Warning Event Log entry will be created.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.EventLogType.Info">
            <summary>
            An Info Event Log entry will be created.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.EventLogType.Success">
            <summary>
            An Success Event log entry will be created.
            </summary>
        </member>
        <member name="T:CMWME.LogLib.LogSettings">
            <summary>
            This object is initiated inside the LogClass, and will be stored inside of a property
            of the LogClass so you can modify the properties of the class.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_success_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is success, else it will not 
            write to physical log. Default is true.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_debug_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is debug, else it will not 
            write to physical log. Default is false no log writes will be done.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_info_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is info, else it will not 
            write to physical log. Default is true.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_warning_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is debug, else it will not 
            write to physical log. Default is true.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_error_write">
            <summary>
            If true Log Class will write to the physical log when LogWriteType is error, else it will not 
            write to physical log. Default is true.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_success_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is success and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Info Type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_debug_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is debug and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is null, no log writes will be done.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_info_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is info and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Info Type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_warning_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is warning and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Warning Type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_error_type">
            <summary>
            If not null Log Class will write to the event log when LogWriteType is error and based on the 
            EventLogType it will write the appropriate type of log, else it will not write to event log.
            Default is Error Type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_success_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is success and will write 
            email in brush color given, else it will not write to email log. Default is DogerBlue.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_debug_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is debug and will write 
            email in brush color given, else it will not write to email log. Default is null, no email write.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_info_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is info and will write 
            email in brush color given, else it will not write to email log. Default is null, no email write.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_warning_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is warning and will write 
            email in brush color given, else it will not write to email log. Default is Gold.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_error_color">
            <summary>
            If not null Log Class will write to the email log when LogWriteType is error and will write 
            email in brush color given, else it will not write to email log. Default is Firebrick.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_background_color">
            <summary>
            Will set the background color of the email to the brush color given. If none supplied or if null will 
            be white.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_success_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is success and will write
            to the console with the specified color, default is Cyan.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_debug_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is debug and will write
            to the console with the specified color, default is null.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_info_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is info and will write
            to the console with the specified color, default is White.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_warning_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is info and will write
            to the console with the specified color, default is White.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_error_color">
            <summary>
            If not null Log Class will write to the console log when LogWriteType is error and will write
            to the console with the specified color, default is Red.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.console_log_background_color">
            <summary>
            Color the background of the Console Output will be, the default is DarkBlue.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_extension">
            <summary>
            Physical Log extension required when creating a physical log, default is ".log"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_text_linebreak">
            <summary>
            Line break that is used in any text based logs. Default is ctrlf or "\r\n".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_append_breaks">
            <summary>
            Amount of line breaks between logs when appending to a physical log. Default is 3.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_date_format">
            <summary>
            The format of the date string that is used each time a date is inserted, default is "hh:mm:ss tt MM/dd/yyyy"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_property_title_created">
            <summary>
            Property title of physical log created inserted on creation of the physical log, default is "LogFile Created".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_delimiter">
            <summary>
            Separates each property inserted into the log by the value, default is ": ".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_property_title_started">
            <summary>
            Property title of physical log starting after appending to an existing physical log, default is "Log Started".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_assembly_name">
            <summary>
            Property title of the DLL assembly name inserted into the log, default is "Log Class Assembly".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_assembly_path">
            <summary>
            Property title of the DLL assembly name inserted into the log, default is "Log Class Path".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_version">
            <summary>
            Property title of any versions inserted through out the log, default is "Version".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_program_assembly_name">
            <summary>
            Property title of the program assembly name that's calling the DLL inserted into the log, default is "Program Assembly".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_command_line">
            <summary>
            Property title of the command line call for the program assembly inserted into the log, default is "Command Line".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_command_args">
            <summary>
            Property title of the command line arguments for the program assembly inserted into the log, default is "Command Arguments".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_credentials">
            <summary>
            Property title of the credentials that are used to the execute the program inserted into the log, default is "Executing Credentials".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_mode">
            <summary>
            Property title of the operating or executing mode that the program is running in, dictated by LogFx.Debug and LogFx.Production properties, 
            default is "Executing Mode".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_server">
            <summary>
            Property title of the machine or server that is executing the program, inserted into the log, default is "Executing Server".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.log_begin_output">
            <summary>
            String value that is inserted before the actual log writes, 
            default is "******************************Log*Output******************************".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_horizontal_break">
            <summary>
            Visual break in the logs, default is "*-------------------------------------------------------------*"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_linebreak">
            <summary>
            Html email log line break, default is "&lt;br /&gt;"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_default_filepath">
            <summary>
            Default value for the file path of the physical log, defaulted to "c:\temp\CMWME_Logs\"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_log_default_sendto">
            <summary>
            Default value for the EmailSendTo of the email log, defaulted to "pcdiscovery@aep.com"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_log_default_type">
            <summary>
            Default value for the EmailType of the email log, defaulted to "EmailType.html".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_default_create">
            <summary>
            Default value for logs to create, defaulted to "Logs.Debug | Logs.Console | Logs.Physical"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_default_log">
            <summary>
            Default value for the event log that is written if none given.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_log_default_subject">
            <summary>
            Default value for the email log, default to application name plus " Log".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_default_source">
            <summary>
            Default value for the event log source that is used if none given.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_default_postfix">
            <summary>
            Default postfix to the physical log file's name, this will append the log file 
            with the value set. By default the value is the current datetime value with the
            format of _yyyyMMdd_HHmmss. 
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_default_name">
            <summary>
            Default log name for the physical log. Default is the compiled program's name. 
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_default_append">
            <summary>
            Default value that will determine whether or not the physical log will be appended if 
            the log path and name exists already. Default value is false.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_idle_timer">
            <summary>
            Amount of time in milliseconds after any write that the LogClass waits to mark the logs state as idle. 
            This is mainly used when runing the update or add calls async. The update or add calls 
            will wait to write until the logs state is idle. Default value is 200 milliseconds.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_idle_wait_timeout">
            <summary>
            Amount of time in milliseconds that LogFx will wait for the LogClass.State to be set to
            idle before it continues anyways. Default value is 1000 milliseconds.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_begin_error_break">
            <summary>
            String that is used in logs to break up the text before an error is written. Default value 
            is "*************************BEGIN*ERROR******************************"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_end_error_break">
            <summary>
            String that is used in logs to break up the text after an error is written. Default value
            is "*****************************END*ERROR****************************"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_line_prefix">
            <summary>
            Prefix of every line written in the logs. Default value is "DateTime      ---->     " and 
            DateTime is written in the format given in setting logs_date_format, cannot change the DateTime
            added at the beginning just the format of the DateTime. Changing this changes everything after 
            the DateTime
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_error_sourcecreation">
            <summary>
            Error message that occur if the Event Log source fails to create. The value {ProgramSource} will be replaced with the source name that was attempted to be created.
            By default the value is "\r\n\r\n*** Error Occurred: Application was not ran elevated event log was created in the "Application" source instead of "{ProgramSource}" source. ***\r\n"
            If value is null, and an error occurs during creation then event log will not be an error type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.physical_log_cleanup_limit">
            <summary>
            The amount of logs to keep when running log cleanup after creating logs.
            Set this to 0 or below to disable. This is defaulted to 100.
            </summary>
        </member>
        <member name="M:CMWME.LogLib.LogSettings.#ctor">
            <summary>
            Internal Constructor that will set up the defaults for the LogSettings. 
            This object is initiated inside the LogClass, and will be stored inside of a property
            of the LogClass so you can modify the properties of the class.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_success_count">
            <summary>
            Property title of the how many success write types that were given, 
            default is "Success Count".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_ended">
            <summary>
            Property title of what time the log ended, default is "End Time".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_runtime">
            <summary>
            Property title of how much time it took between created/started and
            Closed/Ended, default is "Run Time".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_timespan_format">
            <summary>
            TimeSpan format for any TimeSpan properties written to the log
            for example RunTime is a TimeSpan property. The default value
            of this property is "hh\:mm\:ss".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.log_end_output">
            <summary>
            Page break on the log for when the log output ends. The default 
            value is "****************************End*Log*Output****************************"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_customaudit">
            <summary>
            Property title for the CustomAudit count property output. Default is the name of the 
            CustomAudit item and then "Count". The only thing that can be changed is the
            sub title "Count" which is the value of the property.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_audit">
            <summary>
            Property title for the Generic Audit count property output. Default value is
            "Audit Count".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_begin_customaudit_output">
            <summary>
            Page break on logs for when the CustomAudit output begins. Default value is 
            "******************************Begin*{0}*Audit*Items*****************************".
            This property must contain "{0}" some where in the value, this is where the name of
            the custom audit type will be inserted. If this value is omitted an exception will 
            occur.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettings._logs_begin_customaudit_output">
            <summary>
            private store for logs_begin_customaudit_output.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_end_customaudit_output">
            <summary>
            Page break on logs for when the CustomAudit output ends. Default value is 
            "******************************End*{0}*Audit*Items*****************************".
            This property must contain "{0}" some where in the value, this is where the name of
            the custom audit type will be inserted. If this value is omitted an exception will 
            occur.
            </summary>
        </member>
        <member name="F:CMWME.LogLib.LogSettings._logs_end_customaudit_output">
            <summary>
            private store for logs_end_customaudit_output.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_begin_audit_output">
            <summary>
            Page break on logs for when the Audit output begins. Default value is
            "******************************Begin*Audit*Items*****************************".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_end_audit_output">
            <summary>
            Page break on logs for when the Audit output ends. Default value is 
            "*******************************End*Audit*Items******************************"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_format_property_title">
            <summary>
            CSS format for the property titles. Default is "font-weight:bold; font-size:12pt;".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_format_body">
            <summary>
            CSS format for the body of the html body. Default is 
            "font-family:Consolas,Courier;font-size:10pt;".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_subject_failed_prefix">
            <summary>
            Prefix to email subject if failure occurs. Default is "Failed".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_subject_prefix_separator">
            <summary>
            Separator between prefix and subject given for email. Default is " - ".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_subject_success_prefix">
            <summary>
            Prefix to email subject if no failure occurs. Default is "Success"
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_subject_audit_occurred">
            <summary>
            Value inserted before prefix separator into e-mail subject if audit 
            occurred. Default is "w\Audit".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.email_subject_warning_occurred">
            <summary>
            Value inserted into e-mail subject before prefix separator if warning message 
            occurred. Default is "w\Warnings".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_started">
            <summary>
            Property title of the Start Time for the log. Default value is "Start Time".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_error_count">
            <summary>
            Property title of the error count for the log writes. Default is "Error Count".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_property_title_warning_count">
            <summary>
            Property title of the warning count for the log writes. Default is "Warning Count".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_format_output">
            <summary>
            Gets the CSS format for the log output, default is nothing.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.html_log_format_audit">
            <summary>
            Gets the CSS format for the log any audit output, default is nothing.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.logs_default_emailsubject_delimeter">
            <summary>
            Value that goes between EmailSubject and AppendSubject if set. Default is " - ".
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.write_log_type">
            <summary>
            Writes the log type after the date in the log. Defaulted to true.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.log_default_write_type">
            <summary>
            Default log write type, when no type is given. Defaulted to debug type.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_header_close">
            <summary>
            Header for event log on close. Default value: ####### Event Log for {ProgramName} Ended ######\r\n
            This is only written if the event log source is written to Application log source.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_header_creation">
            <summary>
            Header for event log on creation. Default value: ####### Event Log for {ProgramName} Started #######\r\n.
            This is only written if the event log source is written to Application log source.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_header_write">
            <summary>
            Header for event log during a write. Default value: ####### Event Log Written for {ProgramName} ######\r\n
            This is only written if the event log source is written to Application log source.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_eventId_close">
            <summary>
            EventId that is set during close of log. Default value is 1309.
            </summary>
        </member>
        <member name="P:CMWME.LogLib.LogSettings.event_log_eventId_creation">
            <summary>
            EventId that is set during creation of log. Default value is 1308
            </summary>
        </member>
        <member name="T:CMWME.LogLib._logFailures">
            <summary>
            Used to store during any method whether or not an error occurred during that specific run.
            </summary>
        </member>
        <member name="P:CMWME.LogLib._logFailures.physicalLog">
            <summary>
            If true then an error occurred during log write for physical log. If null
            log did not run. If false then log has ran with no error.
            </summary>
        </member>
        <member name="P:CMWME.LogLib._logFailures.eventLog">
            <summary>
            If true then an error occurred during the log write for the event log. If
            null then log did not run. If false then log has ran with no error.
            </summary>
        </member>
        <member name="P:CMWME.LogLib._logFailures.emailLog">
            <summary>
            If true then an error occurred during the log write for the email log. If 
            null then the log did not run. If false then log has ran with no error.
            </summary>
        </member>
        <member name="P:CMWME.LogLib._logFailures.consoleLog">
            <summary>
            If true then an error occurred during the log write for the console log. If 
            null then the log did not run. If false then log has ran with no error.
            </summary>
        </member>
        <member name="P:CMWME.LogLib._logFailures.debugLog">
            <summary>
            If true then an error occurred during the log write for the debug log. If 
            null then the log did not run. If false then log has ran with no error.
            </summary>
        </member>
        <member name="M:CMWME.LogLib._logFailures.totalFailure(CMWME.LogLib.Logs)">
            <summary>
            Checks for failures for all the logs. If returns true if a total failure has occurred else
            will return false.
            </summary>
            <param name="LogsWriting">Current logs that are being written.</param>
            <returns>true if all logs being written have failed, else it returns false.</returns>
        </member>
        <member name="M:CMWME.LogLib._logFailures.checkFailures(CMWME.LogLib.Logs)">
            <summary>
            Checks for a failure for the specific log. If returns true then the log given has
            failed, if returns false then that log did not fail, if returns null then the log did
            not run.
            </summary>
            <param name="LogsWriting">Log to check.</param>
            <returns>
            Returns true then the log given has failed, returns false then that log did not fail, 
            returns null then the log did not run.
            </returns>
        </member>
        <member name="M:CMWME.LogLib._logFailures.checkFailures">
            <summary>
            Checks all logs for a failure if no logs failed returns false else returns true.
            </summary>
            <returns>If no logs failed returns false else returns true.</returns>
        </member>
        <member name="M:CMWME.LogLib._logFailures.updateFailures(CMWME.LogLib._logFailures)">
            <summary>
            Adds new failures to the current log failures of the class.
            </summary>
            <param name="failures">Failures set to added to the current log failures.</param>
        </member>
        <member name="T:CMWME.MailLib.EmailType">
            <summary>
            Message types to set cdoMsgTypeVal to.
            <para>html - sets cdo Message type to html.</para>
            <para>text - sets cdo Message type to text.</para>
            </summary>
        </member>
        <member name="F:CMWME.MailLib.EmailType.text">
            <summary>
            Email Type Text
            </summary>
        </member>
        <member name="F:CMWME.MailLib.EmailType.html">
            <summary>
            Email Type is HTML
            </summary>
        </member>
        <member name="T:CMWME.MailLib.MailClass">
            <summary>
            Mail Class has Code Created to Send Mail Messages
            </summary>
        </member>
        <member name="M:CMWME.MailLib.MailClass.SendMail(System.String,System.String,System.String,System.String,CMWME.MailLib.EmailType,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            CDO Script to send the email
            </summary>
            <param name="subject">EmailSubject of email</param>
            <param name="body">Body of email</param>
            <param name="sendToAddress">Who the email is being sent to</param>
            <param name="fromAddress">Who the email is being sent from</param>
            <param name="type">If the body is html or text Email Type</param>
            <param name="Important"></param>
            <param name="RecivedRecipt"></param>
            <param name="readRecipt"></param>
            <param name="attachment"></param>
            <param name="embedImage"></param>
        </member>
        <member name="T:CMWME.PrinterLib.Printer">
            <summary>
            Stores printer information gathered from json file and WMI queries.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.PrinterName">
            <summary>
            Printer display name.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.PrinterAddress">
            <summary>
            Email address that is used to match email to printer.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.Offline">
            <summary>
            Whether or not printer is offline.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.PrinterStatus">
            <summary>
            Printer's status retrieved from WMI.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.Availability">
            <summary>
            Printer's availability retrieved from WMI.
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.Printer.QueueLen">
            <summary>
            Current length of the printer's queue.
            </summary>
        </member>
        <member name="M:CMWME.PrinterLib.Printer.setAvailabilityState(System.String)">
            <summary>
            Converts Availability status code to string that describes the availability of the printer.
            </summary>
            <param name="code">Availability status code.</param>
        </member>
        <member name="M:CMWME.PrinterLib.Printer.setPrinterStatus(System.String)">
            <summary>
            Converts printer status code to string that describes the status of the printer.
            </summary>
            <param name="status">printer status code.</param>
        </member>
        <member name="M:CMWME.PrinterLib.Printer.GetPrinterStateData">
            <summary>
            Returns a string that represents the current state of the printer. String includes all the following: Printer Status, Printer Availability, and printer queue length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMWME.PrinterLib.Printer.CheckPrinterJobStatus(System.String)">
            <summary>
            Checks the PrinterJobStatus given to see if it matches one of the codes in PrinterJobStatusIgnore 
            field. If it matches it returns true else it returns false.
            </summary>
            <param name="PrinterJobStatus">Printer Job Status to find or match.</param>
        </member>
        <member name="T:CMWME.PrinterLib.PrinterCollection">
            <summary>
            Class that stores a List of printers used in the print spooler. 
            </summary>
        </member>
        <member name="P:CMWME.PrinterLib.PrinterCollection.Item(System.String)">
            <summary>
            Indexer that returns the printer by given printer name.
            </summary>
            <param name="PrinterName">Printer name to use to find the printer requested.</param>
        </member>
        <member name="M:CMWME.PrinterLib.PrintJob.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Printer method that handles the actual printing of the string/body of email.
            </summary>
            <param name="sender">Print object.</param>
            <param name="e">Arguments of printer object.,</param>
        </member>
        <member name="T:CMWME.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.Button_delete_icon_x72">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.CMWME">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.FlatMsgBx">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:CMWME.Properties.Resources.MsgBx">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:CMWME.Service.ServiceState">
            <summary>
            Enumeration of the Service state that is used to set the current state of the service.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_STOPPED">
            <summary>
            Changes the service status to a stopped state.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_START_PENDING">
            <summary>
            Changes the service status to Start Pending status.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_STOP_PENDING">
            <summary>
            Changes the service status to stop pending.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_RUNNING">
            <summary>
            changes the service status to running.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_CONTINUE_PENDING">
            <summary>
            Changes the service status to continue pending.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_PAUSE_PENDING">
            <summary>
            Changes the service status to pause pending.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceState.SERVICE_PAUSED">
            <summary>
            changes the service status to paused.
            </summary>
        </member>
        <member name="T:CMWME.Service.ServiceStatusController">
            <summary>
            Wrapper for the advapi32.dll function of SetServiceStatus that changes the status of the service.
            </summary>
        </member>
        <member name="T:CMWME.Service.ServiceStatusController.ServiceStatus">
            <summary>
            Class that is sent to the SetServiceStatus function in the Advapi32.dll, the class tells
            the SetServiceStatus what is the current status of the service.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceStatusController.ServiceStatus.dwCurrentState">
            <summary>
            Sets the current state of the service.
            </summary>
        </member>
        <member name="F:CMWME.Service.ServiceStatusController.ServiceStatus.dwWaitHint">
            <summary>
            How long to wait for the service to stop/start.
            </summary>
        </member>
        <member name="M:CMWME.Service.ServiceStatusController.SetServiceStatus(System.IntPtr,CMWME.Service.ServiceStatusController.ServiceStatus@)">
            <summary>
            Sets the current status of the service to the given ServiceStatus properties.
            </summary>
            <param name="handle">Handle for the service.</param>
            <param name="serviceStatus">Class used to determine what the status is.</param>
        </member>
        <member name="M:CMWME.Service.ServiceStatusController.SetServiceStatus(System.IntPtr,CMWME.Service.ServiceState)">
            <summary>
            Changes the status of the service to the status given.
            </summary>
            <param name="serviceHandle">The serviceHandle property of the service controller.</param>
            <param name="status">Status to change the service to.</param>
        </member>
        <member name="T:CMWME.SQLLib.ColumnsValues">
            <summary>
            Class of Columns with associated Values and properties
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.ColumnName">
            <summary>
            Name Of Column 
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.ColumnValue">
            <summary>
            Value of Column
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.AppendValue">
            <summary>
            Whether or not to append the value when doing an update. 
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.ValueLen">
            <summary>
            Length of the Value determined on creation.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.Condition">
            <summary>
            Gets the Condition type of the where clause. Must be set during creation.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.DataTypeOverride">
            <summary>
            Overrides the specific data type found in the ColumnValue given. Must be set during creation.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.OrSeporator">
            <summary>
            If true the where statement will use an OR operator instead of an AND. Must be set during creation.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ColumnsValues._paramName">
            <summary>
            Parameter name for the command, if not set will use default parameter names. Must be set during creation.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.#ctor(System.String)">
            <summary>
            Object with Column, no Value and associated properties
            </summary>
            <param name="ColumnName">Column Name</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.#ctor(System.String,System.Object,CMWME.SQLLib.DataType,System.Boolean,System.Boolean,System.String)">
            <summary>
            Object with Column and Value and associated properties
            </summary>
            <param name="ColumnName">Column Name</param>
            <param name="ColumnValue">Column Value</param>
            <param name="AppendValue">Whether or not to append the value when doing an update</param>
            <param name="OrSeporator">If true the where statement will use an OR operator instead of an AND.</param>
            <param name="OverrideType">Overrides the specific data type found in the ColumnValue given.</param>
            <param name="ParamName">Parameter name for the command, if not set will use default parameter names.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.#ctor(System.String,System.Object,CMWME.SQLLib.SQLCondidtion,CMWME.SQLLib.DataType,System.Boolean,System.Boolean,System.String)">
            <summary>
            Object with Column and Value and associated properties.
            </summary>
            <param name="ColumnName">Column Name the column the class is representing.</param>
            <param name="ColumnValue">Column value to set, to insert or retrieved from a SQL server.</param>
            <param name="Condition">Condition for where statements.</param>
            <param name="AppendValue">Whether or not to append the value when doing an update.</param>
            <param name="OrSeporator">If true the where statement will use an OR operator instead of an AND.</param>
            <param name="OverrideType">Overrides the specific data type found in the ColumnValue given.</param>
            <param name="ParamName">Parameter name for the command, if not set will use default parameter names.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.GetCollection">
            <summary>
            returns a ColumnValuesCollection from the current values within the class.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.Add(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Will add a single ColumnValues class to the current class.
            </summary>
            <param name="ColumnToAdd">ColumnsValues to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.AddRange(System.Collections.Generic.IEnumerable{CMWME.SQLLib.IColumnsValues})">
            <summary>
            Will add any collection of ColumnValues to the current class.
            </summary>
            <param name="ColumnToAdd">ColumnsValues collection to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.Remove(System.String)">
            <summary>
            Removes a specific ColumnsValues object from the current class. By the name of the Column.
            </summary>
            <param name="ColumnNameToRemove">Name of Column to remove</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.Remove(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Removes ColumnsValues object from class.
            </summary>
            <param name="ColumnToRemove">ColumnsValues object to remove.</param>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.Count">
            <summary>
            Returns the count of objects in the class.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.Item(System.String)">
            <summary>
            Indexer that will return the ColumnsValues object finding it by Column Name.
            </summary>
            <param name="ColumnName">Name of column to find.</param>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValues.Item(System.Int32)">
            <summary>
            Indexer that will return the ColumnsValues by it's zero based index.
            </summary>
            <param name="Index">Index number to return.</param>   
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.ColumnsString">
            <summary>
            Gets the String for SQL with the lists of columns surrounded by square brackets and seporated by commas
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.op_Equality(CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.ColumnsValues)">
            <summary>
            Compares two ColumnsValues class and checks to see if the properties are equal.
            </summary>
            <param name="col1">First class of ColumnsValues to compare to the second.</param>
            <param name="col2">Second class of ColumnsValues to compare to the first.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.op_Inequality(CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.ColumnsValues)">
            <summary>
            Compares two ColumnsValues class and checks to see if the properties are not equal.
            </summary>
            <param name="col1">First class of ColumnsValues to compare to the second.</param>
            <param name="col2">Second class of ColumnsValues to compare to the first.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.Equals(CMWME.SQLLib.ColumnsValues)">
            <summary>
            Compares the specified ColumnsValues class to the given. If properties are same returns true.
            </summary>
            <param name="obj">ColumnsValues class to compare to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.Equals(System.Object)">
            <summary>
            Determine whether the specified object is equal to the given object.
            </summary>
            <param name="obj">Object to compare to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValues.GetHashCode">
            <summary>
            Servers as a default has function.
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.ColumnsValuesCollection">
            <summary>
            Array of ColumnsValues
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ColumnsValuesCollection.Item(System.String)">
            <summary>
            Indexer that will return the ColumnsValues object finding it by Column Name.
            </summary>
            <param name="ColumnName">Name of column to find.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.Add(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Will add a single ColumnValues class to the current class.
            </summary>
            <param name="ColumnToAdd">ColumnsValues to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.AddRange(System.Collections.Generic.IEnumerable{CMWME.SQLLib.IColumnsValues})">
            <summary>
            Will add any collection of ColumnValues to the current class.
            </summary>
            <param name="ColumnToAdd">ColumnsValues collection to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.Remove(System.String)">
            <summary>
            Removes a specific ColumnsValues object from the current class. By the name of the Column.
            </summary>
            <param name="ColumnNameToRemove">Name of Column to remove</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.Remove(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Removes ColumnsValues object from class.
            </summary>
            <param name="ColumnToRemove">ColumnsValues object to remove.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.ColumnsString">
            <summary>
            Gets the String for SQL with the lists of columns surrounded by square brackets and seporated by commas
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.HasColumn(System.String)">
            <summary>
            Checks if Column Value Collection has Column with Column Name
            </summary>
            <param name="ColumnName">Column Name to Check for</param>
            <returns>True if Column Exists Else Returns False</returns>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.GetCollection">
            <summary>
            returns a ColumnValuesCollection from the current values within the class.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.ToString">
            <summary>
            Prints out each column name/value in the format of [{ColumnName}] {Operator} {ColumnValue}
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.op_Equality(CMWME.SQLLib.ColumnsValuesCollection,CMWME.SQLLib.ColumnsValuesCollection)">
            <summary>
            Compares two ColumnsValuesCollections and if the ColumnsValues within the collections 
            match returns true otherwise it returns false.
            </summary>
            <param name="col1">Collection one to compare collection two to.</param>
            <param name="col2">Collection two to compare collection one to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.op_Inequality(CMWME.SQLLib.ColumnsValuesCollection,CMWME.SQLLib.ColumnsValuesCollection)">
            <summary>
            Compares two ColumnsValuesCollections and if the ColumnsValues within the collections 
            do not match returns true otherwise it returns false.
            </summary>
            <param name="col1">Collection one to compare collection two to.</param>
            <param name="col2">Collection two to compare collection one to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.Equals(CMWME.SQLLib.ColumnsValuesCollection)">
            <summary>
            Compares selected ColumnsValuesCollections to the given collection and if the ColumnsValues 
            within the collections match returns true otherwise it returns false.
            </summary>
            <param name="obj">Collection to compare to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.Equals(System.Object)">
            <summary>
            Determine whether the specified object is equal to the given object.
            </summary>
            <param name="obj">Object to compare to.</param>
        </member>
        <member name="M:CMWME.SQLLib.ColumnsValuesCollection.GetHashCode">
            <summary>
            Servers as a default has function.
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary">
            <summary>
            Dictionary or definition used to define a connection string keys and the connection string type. 
            Used to help generate a connection string.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.StringType">
            <summary>
            Type of Connection String in the dictionary.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.Driver">
            <summary>
            Driver key value used when creating a connection string.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.ServerName">
            <summary>
            Server name key value used when creating a connection string
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.Database">
            <summary>
            Database key value used when creating a connection string
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.TrustedConnection">
            <summary>
            TrustedConnection key value used when creating a connection string
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.TrustedConnectionValue">
            <summary>
            TrustedConnection true value used when creating a connection string
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.UserId">
            <summary>
            User id key value used when creating a connection string
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringDictionary.Password">
            <summary>
            Password key value used when creating a connection string
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.ConnectionString.ConnectionStringCreator">
            <summary>
            Class used to create a connection string, before connecting to the SQL server.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.ServerName">
            <summary>
            Name of server used when creating the connection string.
            <para />
            *Note* this is just the value not the key, the ConnectionStringType will determine what key to use.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.DatabaseName">
            <summary>
            Name of database used when creating the connection string.
            <para />
            *Note* this is just the value not the key, the ConnectionStringType will determine what key to use.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.TrustedConnection">
            <summary>
            If true then the connection string will be created with the TrustedConnection value.
            <para />
            *Note* this is just the value not the key, the ConnectionStringType will determine what key to use.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.UserId">
            <summary>
            Value of User id used when creating the connection string.
            <para />
            *Note* this is just the value not the key, the ConnectionStringType will determine what key to use.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.Type">
            <summary>
            Type of ConnectionStringType used to get the dictionary when creating the connection string.
            <para />
            To learn more about ConnectionStringTypes and the dictionary see summary of class 
            ConnectionStringDictionaryStore.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.Driver">
            <summary>
            Driver value used when creating the connection string. 
            <para />
            *Note* this is just the value not the key, the ConnectionStringType will determine what key to use.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.CreateUsingConnection(System.String)">
            <summary>
            Method generates a ConnectionStringCreator class used to create a connection string needed
            to connection to a SQL server.
            </summary>
            <param name="connectionString">Connection string that will be parsed and converted into a ConnectionStringCreator class.</param>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.CreateString(System.String,CMWME.SQLLib.ConnectionString.ConnectionStringType)">
            <summary>
            Method generates a ConnectionStringCreator class using the ServerName and ConnectionStringType given.
            <para />
            To learn more about ConnectionStringTypes and the dictionary see summary of class 
            ConnectionStringDictionaryStore.
            </summary>
            <param name="serverName">Name of server to connect to.</param>
            <param name="connectionType">
            ConnectionStringType is used to get the ConnectionStringDictionary class that is used to define the 
            keys of the connection string.
            <para />
            To learn more about ConnectionStringTypes and the dictionary see summary of class 
            ConnectionStringDictionaryStore.
            </param>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.CreateProtectedPassword(System.String)">
            <summary>
            Creates Protected Password for SQL Connection
            </summary>
            <param name="unprotectedPassword">Unprotected String Password</param>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.CreateProtectedPassword(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates Protected Password for SQL Connection
            </summary>
            <param name="unprotectedPassword">Unprotected Byte Array</param>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringCreator.SetPassword(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the password used when connecting to inject the password into the connection string when 
            connecting to the SQL server.
            <para/>
            To create an encrypted password use EncryptMe application to create an encrypted password with key and 
            store them in byte arrays in your code. Contact Jason Mastnick for more information.
            </summary>
            <param name="protectedPassword">
            Byte array representing an encrypted password
            <para/>
            To create an encrypted password use EncryptMe application to create an encrypted password with key and 
            store them in byte arrays in your code. Contact Jason Mastnick for more information.</param>
            <param name="key">Byte array that represents a key used to encrypt the password.</param>
        </member>
        <member name="T:CMWME.SQLLib.ConnectionString.ConnectionStringDictionaryStore">
            <summary>
            Store that houses a connection string dictionary. To learn what type of connection string is each 
            ConnectionStringType use GetDictionary(type) to return a ConnectionStringDictionary class, this class
            has the definition of the connection string. You can also run GetDictionary(connectionString) which will
            return the ConnectionStringDictionary with the appropriate ConnectionStringType in the definition.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringDictionaryStore.GetDictionary(System.String)">
            <summary>
            Gets the ConnectionStringDictionary class that matches the given connectionString.
            </summary>
            <param name="connectionString">Connection string used to find the ConnectionStringDictionary class.</param>
        </member>
        <member name="M:CMWME.SQLLib.ConnectionString.ConnectionStringDictionaryStore.GetDictionary(CMWME.SQLLib.ConnectionString.ConnectionStringType)">
            <summary>
            Returns the first ConnectionStringDictionary class that matches the ConnectionStringType. Typically
            the Non-Standard types have multiple, so will only return the first one found.
            </summary>
            <param name="type">Connection string type used to find the appropriate dictionary.</param>
        </member>
        <member name="T:CMWME.SQLLib.ConnectionString.ConnectionStringType">
            <summary>
            Type of connection string to build when generating a connection string.
            See ConnectionStringDictionaryStore for more information.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_DSN">
            <summary>
            Generate an ODBC DSN connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_STD">
            <summary>
            Generates an Standard ODBC connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_SVR">
            <summary>
            Generates a Svr based ODBC connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_DBQ">
            <summary>
            Generates a Dbq based ODBC connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_HOST">
            <summary>
            Generates a Host based ODBC connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.OLEDB_STD">
            <summary>
            Generates a Standard OLEDB connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.OLEDB_NSTD">
            <summary>
            Generates a Non-Standard OLEDB connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.ODBC_NSTD">
            <summary>
            Generates a Non-Standard ODBC connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.SQL_STD">
            <summary>
            Generates a Standard SQL connection string.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ConnectionString.ConnectionStringType.SQL_NSTD">
            <summary>
            Generates a Non-Standard SQL connection string.
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.IColumnsValues">
            <summary>
            Interface for any ColumnValues 
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.GetCollection">
            <summary>
            returns a ColumnValuesCollection from the current values within the class.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.AddRange(System.Collections.Generic.IEnumerable{CMWME.SQLLib.IColumnsValues})">
            <summary>
            Will add any collection of ColumnValues to the current class.
            </summary>
            <param name="ColumnsToAdd">ColumnsValues collection to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.Add(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Will add a single ColumnValues class to the current class.
            </summary>
            <param name="ColumnToAdd">ColumnsValues to add.</param>
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.Remove(System.String)">
            <summary>
            Removes a specific ColumnsValues object from the current class. By the name of the Column.
            </summary>
            <param name="ColumnNameToRemove">Name of Column to remove</param>
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.Remove(CMWME.SQLLib.IColumnsValues)">
            <summary>
            Removes ColumnsValues object from class.
            </summary>
            <param name="ColumnToRemove">ColumnsValues object to remove.</param>
        </member>
        <member name="P:CMWME.SQLLib.IColumnsValues.Count">
            <summary>
            Returns the count of objects in the class.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.IColumnsValues.Item(System.String)">
            <summary>
            Indexer that will return the ColumnsValues object finding it by Column Name.
            </summary>
            <param name="ColumnName">Name of column to find.</param>
        </member>
        <member name="P:CMWME.SQLLib.IColumnsValues.Item(System.Int32)">
            <summary>
            Indexer that will return the ColumnsValues by it's zero based index.
            </summary>
            <param name="Index">Index number to return.</param>        
        </member>
        <member name="M:CMWME.SQLLib.IColumnsValues.ColumnsString">
            <summary>
            Returns a string with the column names concatenated with a comma.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CMWME.SQLLib.IWhereColumnsValues">
            <summary>
            Interface for any ColumnValues that is mainly used for where statements/parameters for where columns.
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.SQLConnection">
            <summary>
            SQL Connection Type
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLConnection.App_Config">
            <summary>
            Gets the SQL Connection string from the App.Config
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLConnection.Web_Config">
            <summary>
            Gets the SQL Connection string from the Web.Config
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLConnection.String_Config">
            <summary>
            Gets the SQL Connection string from the string provided
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.ParameterType">
            <summary>
            Type of Parameter for Get/add parameter methods
            <para>in_type - creates an in type parameter</para>
            <para>out_type - creates an out type parameter</para>
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ParameterType.in_type">
            <summary>
            Sets the Parameter Type to an In Parameter
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.ParameterType.out_type">
            <summary>
            Sets the Parameter Type to an Out Parameter
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.SQLStringType">
            <summary>
            SQL String type
            <para>App_text - SQL file stored as Embedded Resource</para>
            <para>Web_text - .net Website type, SQL file stored on the server </para>
            <para>local_text - Local file stored some where locally</para>
            <para>str_text - String variable</para>
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLStringType.app_text">
            <summary>
            SQL String Type is Embedded Application Text File
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLStringType.web_text">
            <summary>
            SQL String Type if an Website Text File
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLStringType.local_text">
            <summary>
            SQL String Type is Local Text File
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLStringType.str_text">
            <summary>
            SQL String Type
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.DataType">
            <summary>
            Used to override the found data type of the ColumnValue.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.none">
            <summary>
            Disables Override uses checks to determine type
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.stringType">
            <summary>
            Overrides type as String
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.intType">
            <summary>
            Overrides type as Integer
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.int64Type">
            <summary>
            Overrides type as Int 64 or BigInt
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.boolType">
            <summary>
            Overrides type as Boolean or Bit
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.decimalType">
            <summary>
            Overrides type as Decimal
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.floatType">
            <summary>
            Overrides Type as Float
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.DataType.datetimeType">
            <summary>
            Overrides Type as DateTime
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.SQLBuilderType">
            <summary>
            Type of SQL string to build.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.insert">
            <summary>
            Builds an insert SQL statement.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.update">
            <summary>
            Builds an update SQL statement.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.select">
            <summary>
            Builds a Select SQL statement.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.delete">
            <summary>
            Builds a Delete SQL statement, this statement requires a where statement. 
            If clearing all values from the SQL table is needed use clear. Ignores any
            update columns given.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.truncate">
            <summary>
            Builds a Truncate Table SQL statement. Ignores any where or update columns given.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.clear">
            <summary>
            Builds a Delete all SQL statement, ignoring any where or update columns given.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.merge">
            <summary>
            Builds a Merge SQL statement, attempts to update the row(s) found if where statement 
            matches any rows, otherwise it inserts a new record.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.storedProc">
            <summary>
            Builds a Exec StoredProc statement, using the table given and uses the update columns
            to add any parameters to the statement needed.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.custom">
            <summary>
            This is only used internally, do not use this to attempt to execute a statement.
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLBuilderType.selectzero">
            <summary>
            This only returns an empty table, a select top 0 [cols] from table.
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.SQLCondidtion">
            <summary>
            SQL Column Value Where Condition 
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.eq">
            <summary>
            SQL Condition for Where is Equals
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.neq">
            <summary>
            SQL Condition for Where is Not Equals
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.gt">
            <summary>
            SQL Condition for Where is Greater Than
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.lt">
            <summary>
            SQL Condition for Where is Less Than
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.ge">
            <summary>
            SQL Condition for Where is Greater Than or Equals
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.le">
            <summary>
            SQL Condition for Where is Less Than or Equals
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.nLike">
            <summary>
            SQL Condition for Where is Not Like
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.like">
            <summary>
            SQL Condition for Where is Like
            </summary>
        </member>
        <member name="F:CMWME.SQLLib.SQLCondidtion.none">
            <summary>
            SQL Condition for Where is None
            </summary>
        </member>
        <member name="T:CMWME.SQLLib.SQLClass">
            <summary>
            * Reference used by SQLClass
            * 
            * .NET Reference: System v4.0.0.0; File Version: 4.0.303169.17929
            * .NET Reference: System.Web v4.0.0.0; File Version: 4.0.303169.17929
            * .NET Reference: System.Configuration v4.0.0.0; File Version 4.0.30319.17929
            * .NET Reference: System.Data v4.0.0.0; File Version 4.0.30319.17929
            * .NET Reference: System.Xml v4.0.0.0; File Version 4.0.30319.17929
            * 
            * Created by Jason Mastnick
            * 
            * SQLClass 
            * 
            * This Class automates Connection, Execution and retrieval of SQL scripts.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.sqlString">
            <summary>
            Gets the sqlString using the set file type and path or by SQL string fed.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.connection">
            <summary>
            creates the SQL connection/server connection
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.adapter">
            <summary>
            creates the Adapter for the server connection
            </summary>
            
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.command">
            <summary>
            creates the Command object for the server connection
            </summary>
            
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.commandBuilder">
            <summary>
            creates the CommandBuilder object for the server connection
            </summary>
            
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.Error">
            <summary>
            Error property if true then error has occurred during functions
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.ErrorException">
            <summary>
            Last Exception that has occurred.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.missingParameterName">
            <summary>
            Amount of parameters are missing the name.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.#ctor">
            <summary>
            Initializing the SQL Class Used to Execute, Gather, or Return data from a Data Server, with Minimal Code Writes 
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetExceptionString">
            <summary>
            Returns a full print out of the exception thrown.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ConnectionOpen">
            <summary>
            Returns true if the connection state is open.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.checkAndConnect">
            <summary>
            Checks for connection, if not connected connects. If connection succeeds returns true, else false.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(CMWME.SQLLib.ConnectionString.ConnectionStringCreator)">
            <summary>
            Uses the ConnectionStringCreator class to build a connection string then creates 
            base classes and connection to SQL server.
            </summary>
            <param name="ConnectionString">
            Class used to build a connection string. To generate the class use
            ConnectionStringCreator.CreateString(ServerName, [ConnectionType]) then set the properties
            of the class.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(System.String)">
            <summary>
            Connects the SQL server using the given connection string.
            </summary>
            <param name="ConnectionString">Connection string to use when connecting to the SQL server.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(System.String,CMWME.SQLLib.SQLConnection)">
            <summary>
            Connects the SQL server using the given connection string.
            </summary>
            <param name="ConnectionString">Connection string to use when connecting to the SQL server.</param>
            <param name="Type">
            Type of connection string given. Type of App_Config gets the connection string from the 
            App.Config; Type of Web_Config will get the connection string from the Web.Config; and 
            the type of String_Config will get the connection string from the given string.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(System.String,CMWME.SQLLib.SQLConnection,System.String)">
            <summary>
            Connects the SQL server using the given connection string.
            </summary>
            <param name="ConnectionString">Connection string to use when connecting to the SQL server.</param>
            <param name="Type">
            Type of connection string given. Type of App_Config gets the connection string from the 
            App.Config; Type of Web_Config will get the connection string from the Web.Config; and 
            the type of String_Config will get the connection string from the given string.
            </param>
            <param name="stringPassword">
            Unprotected string password for the connection string. Which will be encrypted and stored within 
            the class, and used to connect to the SQL server.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(System.String,CMWME.SQLLib.SQLConnection,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Connects the SQL server using the given connection string.
            </summary>
            <param name="ConnectionString">Connection string to use when connecting to the SQL server.</param>
            <param name="Type">
            Type of connection string given. Type of App_Config gets the connection string from the 
            App.Config; Type of Web_Config will get the connection string from the Web.Config; and 
            the type of String_Config will get the connection string from the given string.
            </param>
            <param name="UnprotectedPassword">
            Non-encrypted byte array that represents the password for the connection string. 
            Which will be encrypted and stored within the class, and used to connect to the SQL server.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Connect(System.String,CMWME.SQLLib.SQLConnection,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Connects the SQL server using the given connection string.
            </summary>
            <param name="ConnectionString">Connection string to use when connecting to the SQL server.</param>
            <param name="Type">
            Type of connection string given. Type of App_Config gets the connection string from the 
            App.Config; Type of Web_Config will get the connection string from the Web.Config; and 
            the type of String_Config will get the connection string from the given string.
            </param>
            <param name="ProtectedPassword">
            Encrypted byte array representing the password for the connection string. which will be encrypted 
            and stored within the class, and used to connect to the SQL server.
            </param>
            <param name="Key">
            Key to decrypt the protected password used, when decrypting the password and injecting it into the 
            connection string.
            </param>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass._connect">
            <summary>
            creates the DBO connection and connects
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetIdentityInsertOn">
            <summary>
            Turns identity insert on, so the identity column can be inserted, turn off after all inserts are done on an identity Column.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetIdentityInsertOff">
            <summary>
            Turns identity insert off, this will disable inserting the identity column into SQL.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetTable(System.String)">
            <summary>
            Sets the table to execute SQL class functions on.
            </summary>
            <param name="tableName">Table name used to set.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetDatabase(System.String)">
            <summary>
            Sets the database to execute SQL class functions on.
            </summary>
            <param name="DatabaseName">Database name used to set.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ErrorClear">
            <summary>
            Clears any Errors Associated with SQL Class
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ExecuteSQL(System.String,CMWME.SQLLib.SQLBuilderType,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Executes SQL Command type with given Columns with given Where Statement
            </summary>
            <param name="TableName">Table name to get execute the SQL command on.</param>
            <param name="Type">Type of Command to run</param>
            <param name="UpdateColumnValues">Columns to run statement on, leave null or empty if want all columns</param>
            <param name="WhereColumnValues">Where Columns to create the Where statement, leave null or empty to effect all columns</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ExecuteSQL(CMWME.SQLLib.SQLBuilderType,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Executes SQL Command type with given Columns with given Where Statement
            </summary>
            <param name="Type">Type of Command to run</param>
            <param name="UpdateColumnValues">Columns to run statement on, leave null or empty if want all columns</param>
            <param name="WhereColumnValues">Where Columns to create the Where statement, leave null or empty to effect all columns</param>
            <returns></returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ExecuteSQL(System.String)">
            <summary>
            Executes SQL string given, command given, use this if a SqlBuilderType isn't available or more complicated query needed ran.
            </summary>
            <param name="sqlString">Sql string to execute.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ExecuteSQL">
            <summary>
            Runs SQL code in the Command to the server
            </summary>
            <returns>Amount of Records Affected</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDataTable(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Runs SQL string given to produce a DataTable
            </summary>
            <param name="TableName">Table to query</param>
            <param name="ColumnValues">Column to return</param>
            <param name="WhereColumnsVals">Collection of where columns</param>
            <returns>Data Table from SQL String given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDataTable(System.String,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Runs SQL string given to produce a DataTable
            </summary>
            <param name="TableName">Table to query</param>
            <param name="WhereColumnsVals">Collection of where columns</param>
            <returns>Data Table from SQL String given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDataTable(CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Runs SQL string given to produce a DataTable
            </summary>
            <param name="ColumnValues">Column to return</param>
            <param name="WhereColumnsVals">Collection of where columns</param>
            <returns>Data Table from SQL String given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityColumn(System.String)">
            <summary>
            Returns a columnsValue collection representing the Identity column of a table.
            </summary>
            <param name="TableName">Table to get the identity column from.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityColumn">
            <summary>
            Returns a columnsValue collection representing the Identity column of a table.
            Column "Identity" represents the last identity inserted, column "ColumnNameToRemove" represents the 
            identity column name.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(System.String,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="ColumnsToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleCel(System.String,CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Column Row Value.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleCel(CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Column Row Value.
            </summary>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetLastIdentity(System.String)">
            <summary>
            Get the Last Inserted Identity Created for a table
            </summary>
            <param name="TableName">Table to get Identity from</param>
            <returns>Last Inserted Identity for the table given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetLastIdentity">
            <summary>
            Get the Last Inserted Identity Created for a table
            </summary>
            <returns>Last Inserted Identity for the table given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetLastIdentity(System.String,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns the identity value for the first record that is returned using a select with the where columns given.
            </summary>
            <param name="TableName">Table to get the Identity value from.</param>
            <param name="WhereColumns">Columns values used to create a where statement.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetLastIdentity(CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns the identity value for the first record that is returned using a select with the where columns given.
            </summary>
            <param name="WhereColumns">Columns values used to create a where statement.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleColumn``1(System.String,CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns a single column value.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleColumn``1(CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns a single column value.
            </summary>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.UpdateTable(System.String,System.Data.DataTable)">
            <summary>
            Takes DataTable given with any updates and applies them to the selected Table given, if no Database 
            given the default database in the connection will be used. Returns amount of changed rows updated.
            </summary>
            <param name="u_DataTable">Data Table to Send with Updates</param>
            <param name="TableName">Table to update the DataTable to</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.UpdateTable(System.Data.DataTable)">
            <summary>
            Takes DataTable given with any updates and applies them to the selected Table given, if no Database 
            given the default database in the connection will be used. Returns amount of changed rows updated.
            </summary>
            <param name="u_DataTable">Data Table to Send with Updates</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetRecordCount(System.String)">
             <summary>
             Gets the Count of records in a Database and Table
             </summary>
            <param name="TableName">Table to get the record count from.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetRecordCount">
            <summary>
            Gets the Count of records in a Database and Table
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetColumns(System.String)">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
            <param name="TableName">Table to get list of columns from</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetColumns">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetEmptyTable(System.String)">
            <summary>
            Gets a table representing the schema of the SQL table, if database not specified will use default database for connection
            </summary>
            <param name="TableName">Table to lookup in the database given</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetEmptyTable">
            <summary>
            Gets a table representing the schema of the SQL table, if database not specified will use default database for connection
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetTables">
            <summary>
            Returns a list of tables in the default database of the connection.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDatabases">
            <summary>
            Gets a list of databases in the server that are not system
            </summary>
            <returns>a string list of databases in the server</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetKeys(System.String)">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
            <param name="TableName">Table to get list of columns from</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetKeys">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ClearTable(System.String)">
            <summary>
            Clears SQL table from supplied database and table, if database isn't supplied uses default for connection.
            </summary>
            <param name="TableName">Table to Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ClearTable">
            <summary>
            Clears SQL table from supplied database and table, if database isn't supplied uses default for connection.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTableV2(System.String,System.String)">
            <summary>
            Restores Table from backup database.
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
            <param name="BackupDBName">Database to restore from</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTableV2(System.String,System.String,System.String)">
            <summary>
            Restores Table from backup database.
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
            <param name="BackupDBName">Database to restore from</param>
            <param name="BackupTableName">Table to restore From</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTableV2(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Backs up the Table given to the BackupDB and BackupTable given. Leave BackupDBName blank or null to use the
            same database. Will delete up to the specific amount of backups in the database to the given BackupsToKeep
            value. If an error occurs and the RestoreOnError value is true, the function will attempt to restore from a 
            backup and return true if restore is successful. Function will return true if backup is successful.
            <para/>
            If a failure occurs during deletion of backups or if a failure occurs and RestoreOnError is successful, the
            function will write to the LogFx.UpdateLogs(message, logsType) function, so if the LogFx class is created
            it will log a warning.
            </summary>
            <param name="TableName">Table to backup.</param>
            <param name="BackupDBName">Database to create the BackupTable in.</param>
            <param name="BackupTableName">Table to backup the TableName given to.</param>
            <param name="BackupsToKeep">
            How many previous backups to retain, in descending alphabetical order. The function counts from the first 
            instances till it reaches this value then it starts deleting the backups.
            </param>
            <param name="RestoreOnError">
            If an error occurs during the restore process, other than deleting backups, it will attempt to restore if 
            this parameter is true.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTableV2(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Backs up the Table given to the BackupDB and BackupTable given. Leave BackupDBName blank or null to use the
            same database. Will delete up to the specific amount of backups in the database to the given BackupsToKeep
            value. If an error occurs and the RestoreOnError value is true, the function will attempt to restore from a 
            backup and return true if restore is successful. Function will return true if backup is successful.
            <para/>
            If a failure occurs during deletion of backups or if a failure occurs and RestoreOnError is successful, the
            function will write to the LogFx.UpdateLogs(message, logsType) function, so if the LogFx class is created
            it will log a warning.
            </summary>
            <param name="BackupDBName">Database to create the BackupTable in.</param>
            <param name="BackupTableName">Table to backup the TableName given to.</param>
            <param name="BackupsToKeep">
            How many previous backups to retain, in descending alphabetical order. The function counts from the first 
            instances till it reaches this value then it starts deleting the backups.
            </param>
            <param name="RestoreOnError">
            If an error occurs during the restore process, other than deleting backups, it will attempt to restore if 
            this parameter is true.
            </param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTableV2(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Backups Table then Clears Contents for updates.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="BackupDBName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
            <param name="BackupsToKeep">Amount of backups to keep starting with the most recent, by alphabetical.</param>
            <param name="RestoreOnError">Restores Original Table on Error of Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTableV2(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Backups Table then Clears Contents for updates.
            </summary>
            <param name="BackupDBName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
            <param name="BackupsToKeep">Amount of backups to keep starting with the most recent, by alphabetical.</param>
            <param name="RestoreOnError">Restores Original Table on Error of Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Finalize">
            <summary>
            Disposes of any objects.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.Dispose">
            <summary>
            Disposes of all internal resources.
            </summary>
        </member>
        <member name="P:CMWME.SQLLib.SQLClass.ErrorMessage">
            <summary>
            Error Message property if error happens this is given the error message
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetLastIdentity(System.String,System.String)">
            <summary>
            Get the Last Inserted Identity Created for a table
            </summary>
            <returns>Last Inserted Identity for the table given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetInsert(System.String,CMWME.SQLLib.IColumnsValues,System.Boolean)">
            <summary>
            Attempts to insert rows with the given Columns and values into the given database and table
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns with values to insert</param>
            <param name="InsertIdentity">Whether or not to insert the identity if one of the values is an identity column.</param>
            <returns>The Amount of rows affected by the insert.</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetInsert(System.String,System.String,CMWME.SQLLib.IColumnsValues,System.Boolean)">
            <summary>
            Attempts to insert rows with the given Columns and values into the given database and table
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns with values to insert</param>
            <param name="InsertIdentity">Whether or not to insert the identity if one of the values is an identity column.</param>
            <returns>The Amount of rows affected by the insert.</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetUpdateInsert(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues,System.Boolean)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="WhereColumns">Where Columns to find the record to update</param>
            <param name="InsertIdentity">If true and function ends up inserting the record it will insert the identify if given.</param>
            <returns>the value of the identity column</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetUpdateInsert(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues,System.Boolean)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="WhereColumns">Where Columns to find the record to update</param>
            <param name="InsertIdentity">If true and function ends up inserting the record it will insert the identify if given.</param>
            <returns>the value of the identity column</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithInsert(System.String,CMWME.SQLLib.IColumnsValues)">
            <summary>
            Inserts into the database/table given the column/values given and returns the identity of the table
            </summary>
            <param name="TableName">Table Name to insert</param>
            <param name="ColumnValueCol">Column with value to insert</param>
            <returns>The Amount of rows affected by the insert.</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithInsert(System.String,System.String,CMWME.SQLLib.IColumnsValues)">
            <summary>
            Inserts into the database/table given the column/values given and returns the identity of the table
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to insert</param>
            <param name="ColumnValueCol">Column with value to insert</param>
            <returns>The Amount of rows affected by the insert.</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDelete(System.String,System.String,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to Delete rows with the given Columns and values into the given database and table
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="WhereColumnsValuesCol">Columns with values to Delete</param>
            <returns>The Amount of rows affected by the Delete.</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetDataTable(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Runs SQL string given to produce a DataTable
            </summary>
            <param name="DatabaseName">Database where Column resides</param>
            <param name="TableName">Table to query</param>
            <param name="ColumnValues">Column to return</param>
            <param name="WhereColumns">Collection of where columns</param>
            <returns>Data Table from SQL String given</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(System.String,System.String,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleRow(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Rows Columns Values.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleCel(System.String,System.String,CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns Single Column Row Value.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithUpdateInsert(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnValueCol">Column value to update</param>
            <param name="whereColumn">where column to find record</param>
            <returns>the value of the identity column</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithUpdateInsert(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="whereColumns">Where Columns to find the record to update</param>
            <returns>the value of the identity column</returns> 
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithUpdate(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="whereColumns">where columns to find the record</param>
            <returns>the value of the identity column</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetIdentityWithUpdate(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="whereColumns">where columns to find the record</param>
            <returns>the value of the identity column</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetUpdate(System.String,System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to find the record returns the identity column's value of updated record.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnsValuesCol">Columns to update</param>
            <param name="WhereColumns">where columns to find the record</param>
            <returns>the number of records updated</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetUpdate(System.String,CMWME.SQLLib.IColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Attempts to update column(s) given table in database given using where Column(s) to update record.
            </summary>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnValueCol">Column value to update</param>
            <param name="whereColumn">where column to find record</param>
            <returns>the number of records updated</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetSingleColumn``1(System.String,System.String,CMWME.SQLLib.ColumnsValues,CMWME.SQLLib.IWhereColumnsValues)">
            <summary>
            Returns a single column value.
            </summary>
            <param name="DatabaseName">Database table resides</param>
            <param name="TableName">Table Name to update</param>
            <param name="ColumnToFind">Column value to update</param>
            <param name="WhereColumns">where column to find record</param>
            <returns>The Column Value found</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.UpdateTable(System.String,System.String,System.Data.DataTable)">
            <summary>
            Takes DataTable given with any updates and applies them to the selected Table given, if no Database 
            given the default database in the connection will be used. Returns amount of changed rows updated.
            </summary>
            <param name="u_DataTable">Data Table to Send with Updates</param>
            <param name="DatabaseName">Database to Update the table in</param>
            <param name="TableName">Table to update the DataTable to</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTable(System.String)">
            <summary>
            Restores Table from backup database. Default Backup Database is "BackupTables."
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTable(System.String,System.String,System.String)">
            <summary>
            Restores Table from backup database. Default Backup Database is "BackupTables."
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
            <param name="DatabaseName">Database Table resides</param>
            <param name="BackupTableName">Table to restore From</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTable(System.String,System.String)">
            <summary>
            Restores Table from backup database. Default Backup Database is "BackupTables."
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
            <param name="BackupTableName">Table to restore From</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.RestoreTable(System.String,System.String,System.String,System.String)">
            <summary>
            Restores Table from backup database.
            *Note* Backup Table and Database both cannot be the same name as original one or the other has to be different.
            </summary>
            <param name="TableName">Table to restore</param>
            <param name="DatabaseName">Database Table resides</param>
            <param name="BackupDatabaseName">Database to restore from</param>
            <param name="BackupTableName">Table to restore From</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetTables(System.String)">
            <summary>
            Returns a list of tables in the given database.
            </summary>
            <param name="DatabaseName">Database to get the tables from.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetRecordCount(System.String,System.String)">
             <summary>
             Gets the Count of records in a Database and Table
             </summary>
            <param name="DatabaseName">Database to find the table in.</param>
            <param name="TableName">Table to get the record count from.</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetColumns(System.String,System.String)">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
            <param name="TableName">Table to get list of columns from</param>
            <param name="DatabaseName">Database where table resides</param>
            <returns>List of columns</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetTableSchema(System.String,System.String)">
            <summary>
            Gets a table representing the schema of the sql table, if database not specified will use default database for connection
            </summary>
            <param name="TableName">Table to lookup in the database given</param>
            <param name="DatabaseName">Database to get table from</param>
            <returns>DataTable representing the sql table</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetTableSchema(System.String)">
            <summary>
            Gets a table representing the schema of the SQL table, if database not specified will use default database for connection
            </summary>
            <param name="TableName">Table to lookup in the database given</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetTableSchema">
            <summary>
            Gets a table representing the schema of the SQL table, if database not specified will use default database for connection
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.GetKeys(System.String,System.String)">
            <summary>
            Gets a list of columns for the specific table, uses default database for connection if none specified
            </summary>
            <param name="TableName">Table to get list of columns from</param>
            <param name="DatabaseName">Database where table resides</param>
            <returns>List of columns</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.ClearTable(System.String,System.String)">
            <summary>
            Clears SQL table from supplied database and table, if database isn't supplied uses default for connection.
            </summary>
            <param name="DatabaseName">Database to look table up in</param>
            <param name="TableName">Table to Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTable(System.String)">
            <summary>
            Backups Table. Backup Database Default is "BackupTables." Backup Table Name Default is Original Table Name + _MMddyyyy_HHmmss_bak.
            </summary>
            <param name="TableName">Table to Backup</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTable(System.String,System.String)">
            <summary>
            Backups Table. Backup Database Default is "BackupTables." Backup Table Name Default is Original Table Name + _MMddyyyy_HHmmss_bak.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTable(System.String,System.String,System.String)">
            <summary>
            Backups Table. Backup Database Default is "BackupTables." 
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
            <param name="BackupTableName">Backup Table New Name</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupTable(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Backups Table.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
            <param name="BackupDatabaseName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
            <param name="RestoreOnError">Restores Original Table on Error of Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String)">
            <summary>
            Backups Table then Clears Contents for updates. Backup Database Default is "BackupTables." Backup Table Name Default is Original Table Name + _MMddyyyy_HHmmss_bak.
            </summary>
            <param name="TableName">Table to Backup</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String,System.String)">
            <summary>
            Backups Table then Clears Contents for updates. Backup Database Default is "BackupTables." Backup Table Name Default is Original Table Name + _MMddyyyy_HHmmss_bak.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String,System.String,System.String)">
            <summary>
            Backups Table then Clears Contents for updates. Backup Database Default is "BackupTables." 
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
            <param name="BackupTableName">Backup Table New Name</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String,System.String,System.String,System.String)">
            <summary>
            Backups Table then Clears Contents for updates.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
            <param name="BackupDatabaseName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Backups Table then Clears Contents for updates.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="BackupDatabaseName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
            <param name="RestoreOnError">Restores Original Table on Error of Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.BackupClearTable(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Backups Table then Clears Contents for updates.
            </summary>
            <param name="TableName">Table to Backup</param>
            <param name="DatabaseName">Database table resides</param>
            <param name="BackupDatabaseName">Database to write new backup table</param>
            <param name="BackupTableName">Backup Table New Name</param>
            <param name="RestoreOnError">Restores Original Table on Error of Clear</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetConnection(System.String)">
            <summary>
            Sets the connection string based on the Connection type given. Either Web.config, App.Config, or String.
            By Default on Class Initialize Connection String Type is String. After any Connection string add the default is the last added.
            </summary>
            <param name="ConnectionString">Connection String</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetConnection(System.String,CMWME.SQLLib.SQLConnection)">
            <summary>
            Sets the connection string based on the Connection type given. Either Web.config, App.Config, or String.
            By Default on Class Initialize Connection String Type is String. After any Connection string add the default is the last added.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <param name="Type">Type of Connection String</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetConnection(System.String,CMWME.SQLLib.SQLConnection,System.String)">
            <summary>
            Sets the connection string based on the Connection type given. Either Web.config, App.Config, or String.
            By Default on Class Initialize Connection String Type is String. After any Connection string add the default is the last added.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <param name="Type">Type of Connection String</param>
            <param name="stringPassword">Unprotected string password</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetConnection(System.String,CMWME.SQLLib.SQLConnection,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the connection string based on the Connection type given. Either Web.config, App.Config, or String.
            By Default on Class Initialize Connection String Type is String. After any Connection string add the default is the last added.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <param name="Type">Type of Connection String</param>
            <param name="unprotectedPassword">Unprotected Byte Password</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.SetConnection(System.String,CMWME.SQLLib.SQLConnection,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the connection string based on the Connection type given. Either Web.config, App.Config, or String.
            </summary>
            <param name="ConnectionString">Connection String</param>
            <param name="Type">Type of Connection String</param>
            <param name="ProtectedPassword">Protected Password for Connection String</param>
            <param name="PasswordKey">Key for the Protected Password</param>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.checkServerConnection">
            <summary>
            Checks to see if server is present and connect to table using connection string.
            </summary>
            <returns>Returns True if Connection was successful</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLClass.checkServerConnection(System.String)">
            <summary>
            Checks to see if server is present and connect to table using connection string.
            </summary>
            /// <returns>Returns True if Connection was successful</returns>
        </member>
        <member name="T:CMWME.SQLLib.SQLExtensions">
            <summary>
            SQL Extensions Class
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLExtensions.ConvertToColumnsValues(System.Data.DataTable)">
            <summary>
            Converts a Table into a list of ColumnsValuesCollections which then can be used to send to an insert or update function
            </summary>
            <param name="t">Table To Convert</param>
            <returns>List of ColumnsValuesCollection</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLExtensions.ConvertToColumnsValues(System.Data.DataTable,CMWME.SQLLib.ColumnsValues)">
            <summary>
            Converts a Table into a list of ColumnsValuesCollections which then can be used to send to an insert or update function
            </summary>
            <param name="t">Table To Convert</param>
            <param name="whereCols">Where Column to Seporate Out from the table</param>
            <returns>List of ColumnsValuesCollection</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLExtensions.ConvertToColumnsValues(System.Data.DataTable,System.Collections.Generic.IEnumerable{CMWME.SQLLib.ColumnsValues})">
            <summary>
            Converts a Table into a list of ColumnsValuesCollections which then can be used to send to an insert or update function
            </summary>
            <param name="t">Table To Convert</param>
            <param name="whereCols">Where Columns to Seporate Out from the table</param>
            <returns>List of ColumnsValuesCollection</returns>
        </member>
        <member name="M:CMWME.SQLLib.SQLExtensions.GetOperatorString(CMWME.SQLLib.ColumnsValues)">
            <summary>
            Gets the Compare String Value from the ColumnsValues
            </summary>
            <param name="ColumnToAdd">ColumnValues</param>
            <returns>String value of Compare type</returns>
        </member>
        <member name="T:CMWME.SQLLib.SQLStringBuilder">
            <summary>
            Builds SQL strings based on the type given.
            </summary>
        </member>
        <member name="M:CMWME.SQLLib.SQLStringBuilder.GenerateSqlString(CMWME.SQLLib.SQLClass,CMWME.SQLLib.SQLBuilderType)">
            <summary>
            Creates a SQLStringBuilder class and uses it to generate the SQL string based on the string type given.
            </summary>
            <param name="sql">SQL class to pass on to the SQLStringBuilder class used to help build the SQL string.</param>
            <param name="stringType">Type of SQL string to generate.</param>
        </member>
        <member name="T:CMWME.C_Types.boolyn">
            <summary>
            Represents a boolean value of Yes and No that can convert any Yes No Value to Boolean representation
            </summary>
        </member>
        <member name="P:CMWME.C_Types.boolyn.yes">
            <summary>
            Public Class that represent the value of yes of the class
            </summary>
        </member>
        <member name="P:CMWME.C_Types.boolyn.no">
            <summary>
            Public Class that represent the value of no of the class
            </summary>
        </member>
        <member name="F:CMWME.C_Types.boolyn.YesString">
            <summary>
            The public string representation of true. 
            </summary>
        </member>
        <member name="F:CMWME.C_Types.boolyn.NoString">
            <summary>
            The public string representation of false.
            </summary>
        </member>
        <member name="M:CMWME.C_Types.boolyn.GetHashCode">
            <summary>
            Provides a hash code for this instance. 
            </summary>
            <returns>Provides a hash code for this instance. </returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.ToString">
            <summary>
            Converts the Objects Value to Sting 
            </summary>
            <returns>string value of the object</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.ToString(System.IFormatProvider)">
            <summary>
            Converts the Objects Value to Sting using the format provider
            </summary>
            <param name="provider">format provider</param>
            <returns>string value of the object</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.Equals(System.Object)">
            <summary>
            Determines whether two Boolean objects are equal. 
            </summary>
            <param name="obj">Object to Compare To</param>
            <returns>True if the objects are equal or false if they are not </returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.Equals(CMWME.C_Types.boolyn)">
            <summary>
            Determines whether two Boolean objects are equal. 
            
            </summary>
            <param name="obj">Object to Compare To</param>
            <returns>True if the objects are equal or false if they are not </returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.CompareTo(System.Object)">
             <summary>
             Compares this object to another object, returning an integer that
             indicates the relationship. For booleans, false sorts before true.
             null is considered to be less than any instance.
             If object is not of type boolean, this method throws an ArgumentException. 
            
             
             </summary>
             <param name="obj">Object to Compare To</param>
             <returns>Returns a value less than zero if this  object </returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.CompareTo(CMWME.C_Types.boolyn)">
             <summary>
             Compares this object to another object, returning an integer that
             indicates the relationship. For booleans, false sorts before true.
             null is considered to be less than any instance.
             If object is not of type boolean, this method throws an ArgumentException. 
            
             
             </summary>
             <param name="value">Object to Compare To</param>
             <returns>Returns a value less than zero if this  object </returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.Parse(System.String)">
             <summary>
            Determines whether a String represents true or false. 
             </summary>
             <param name="value">value to parse</param>
             <returns>boolyn class representing the string</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.TryParse(System.String,CMWME.C_Types.boolyn@)">
            <summary>
            Determines whether a String represents true or false. 
            </summary>
            <param name="value">String to Parse</param>
            <param name="result">boolyn object representing the string</param>
            <returns>true if parse was successful false if it wasn't</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.GetTypeCode">
            <summary>
            Gets TypeCode of Object
            </summary>
            <returns>TypeCode</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.op_Equality(CMWME.C_Types.boolyn,CMWME.C_Types.boolyn)">
            <summary>
            Checkes if Two Values are Equal
            </summary>
            <param name="lhs">Left Hand Object</param>
            <param name="rhs">Right Hand Object</param>
            <returns>boolean value if the two are equal or not</returns>
        </member>
        <member name="M:CMWME.C_Types.boolyn.op_Inequality(CMWME.C_Types.boolyn,CMWME.C_Types.boolyn)">
            <summary>
            Checkes if Two Values are Not Equal
            </summary>
            <param name="lhs">Left Hand Object</param>
            <param name="rhs">Right Hand Object</param>
            <returns>boolean value if the two are not equal</returns>
        </member>
        <member name="T:CMWME.Variables">
            <summary>
            Public Global variables for the CMWME_Lib
            </summary>
        </member>
        <member name="F:CMWME.Variables.CommandLine">
            <summary>
            Path call to the current application.
            </summary>
        </member>
        <member name="F:CMWME.Variables.CommandArgs">
            <summary>
            Arguments given to the application.
            </summary>
        </member>
        <member name="F:CMWME.Variables.FullCommandLine">
            <summary>
            Full command path given to the application.
            </summary>
        </member>
        <member name="P:CMWME.Variables.ProgramName">
            <summary>
            Name of program or applicaiton that is currently running.
            </summary>
        </member>
        <member name="P:CMWME.Variables.ProgramVersion">
            <summary>
            Version of the application that is currently running.
            </summary>
        </member>
        <member name="P:CMWME.Variables.LogDllName">
            <summary>
            Name of this DLL\library.
            </summary>
        </member>
        <member name="P:CMWME.Variables.LogDllPath">
            <summary>
            Path to this DLL\library.
            </summary>
        </member>
        <member name="P:CMWME.Variables.LogDllVersion">
            <summary>
            Version of this DLL\library.
            </summary>
        </member>
        <member name="F:CMWME.Variables.IOWaitTime">
            <summary>
            Amount of time in milliseconds the IO methods will wait while copying files, creating directories etc. Default wait 
            time is 2000 milliseconds.
            </summary>
        </member>
        <member name="F:CMWME.Variables.IORenameRetry">
            <summary>
            Amount of times file writes will attempt to rename a file before quiting.
            </summary>
        </member>
        <member name="F:CMWME.Variables.Domain">
            <summary>
            Domain of the current logged in user.
            </summary>
        </member>
        <member name="F:CMWME.Variables.User">
            <summary>
            User ID of the current logged in user.
            </summary>
        </member>
        <member name="F:CMWME.Variables.ExecutingCredentals">
            <summary>
            Full user path of current logged in user.
            </summary>
        </member>
        <member name="F:CMWME.Variables.ProcessName">
            <summary>
            Name of the proccess that's currently executing code.
            </summary>
        </member>
        <member name="F:CMWME.Variables.MachineName">
            <summary>
            Name of the machine that is running the process.
            </summary>
        </member>
        <member name="T:CMWME.WPF.NotifyPropertyClass">
            <summary>
            Class to add to a WPF data context, to allow the class to notify the WPF form when property has changed.
            </summary>
        </member>
        <member name="E:CMWME.WPF.NotifyPropertyClass.PropertyChanged">
            <summary>
            Event to call when value of property has changed. Use the Function NotifyPropertyChanged function instead.
            </summary>
        </member>
        <member name="P:CMWME.WPF.NotifyPropertyClass.Dispatcher">
            <summary>
            The dispatcher of current running application, if none retruns null.
            </summary>
        </member>
        <member name="M:CMWME.WPF.NotifyPropertyClass.NotifyPropertyChanged(System.String)">
            <summary>
            Function to call when the value of a binded property has changed.
            </summary>
            <param name="propertyName">Name of property. You can use nameof(property) to keep from name changes causing issues.</param>
        </member>
        <member name="T:CMWME.WPF.ProgressLabelMonitor">
            <summary>
            This class supports WPF, and makes a TextBlock have a trailing periods that add every second. Up to 
            The TrailingPreiods property. If not set, is defaulted to 5. The textblock must have a binding and the 
            class/property name will need to be passed through the constructor. If the property is an enum and has
            a description, the discription will be used as the text instead of the value name.
            </summary>
        </member>
        <member name="E:CMWME.WPF.ProgressLabelMonitor.ProgressTick">
            <summary>
            Event handler that will be fired every time the internal dispatch timer's tick is called. This 
            allows for additional handleing when the trailing periods are managed.
            </summary>
        </member>
        <member name="P:CMWME.WPF.ProgressLabelMonitor.TrailingPeriods">
            <summary>
            The amount of periods to add to the text block, set in the constructor. If 0 it's defaulted to 5.
            </summary>
        </member>
        <member name="P:CMWME.WPF.ProgressLabelMonitor.Label">
            <summary>
            TextBlock label to update, that is passed in the constructor.
            </summary>
        </member>
        <member name="P:CMWME.WPF.ProgressLabelMonitor.ClassBinding">
            <summary>
            The class object that the binding for the label is from. Set in the constructor.
            </summary>
        </member>
        <member name="P:CMWME.WPF.ProgressLabelMonitor.PropertyName">
            <summary>
            The Property of the class that is binded to the label. Set in the constructor.
            </summary>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.#ctor(System.Windows.Controls.TextBlock,System.Object,System.String,System.Int32)">
            <summary>
            Constructor of the ProgressLabelMonitor class. This class supports WPF, and makes a TextBlock have a trailing periods that add every second. Up to 
            The TrailingPreiods property. If not set, is defaulted to 5. The textblock must have a binding and the 
            class/property name will need to be passed through the constructor. If the property is an enum and has
            a description, the discription will be used as the text instead of the value name.
            </summary>
            <param name="label">The TextBlock label to update with the trailing periods.</param>
            <param name="classBinding">The class object that contains the property that is binded to the label.</param>
            <param name="propertyName">The nameof the property from the class that is binded to the label.</param>
            <param name="trailingPeriods">The total amount of trailing periods that will be appended to the text of the label.</param>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.ResetLabel">
            <summary>
            Resets the TextBlock/label's text back to the original binding, if that fails falls back to the text value of the 
            property.
            </summary>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.Dispose(System.Boolean)">
            <summary>
            Stops the dispatch timer, resets the label, and clears all properties.
            </summary>
            <param name="disposing">If set to true, then disposes managed content.</param>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.Dispose">
            <summary>
            Stops the dispatch timer, resets the label, and clears all properties.
            </summary>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.Finalize">
            <summary>
            Disposes of all non managed content.
            </summary>
        </member>
        <member name="M:CMWME.WPF.ProgressLabelMonitor.StopMonitor">
            <summary>
            Stops the dispatch timer, resets the label text.
            </summary>
        </member>
    </members>
</doc>
